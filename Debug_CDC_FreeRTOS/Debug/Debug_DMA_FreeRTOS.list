
Debug_DMA_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b780  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800b910  0800b910  0001b910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba24  0800ba24  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba24  0800ba24  0001ba24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba2c  0800ba2c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba2c  0800ba2c  0001ba2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba30  0800ba30  0001ba30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800ba34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
 10 .bss          00005ec0  2000016c  2000016c  0002016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000602c  2000602c  0002016c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025ddf  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005158  00000000  00000000  00045f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec0  00000000  00000000  0004b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001cd0  00000000  00000000  0004cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b60  00000000  00000000  0004ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000261ff  00000000  00000000  000767c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de371  00000000  00000000  0009c9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017ad38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000853c  00000000  00000000  0017ad88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8f8 	.word	0x0800b8f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800b8f8 	.word	0x0800b8f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000188 	.word	0x20000188
 8000514:	2000023c 	.word	0x2000023c

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fdcb 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f825 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f973 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 800052a:	f000 f949 	bl	80007c0 <MX_DMA_Init>
  MX_I2C1_Init();
 800052e:	f000 f889 	bl	8000644 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000532:	f000 f8b5 	bl	80006a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000536:	f000 f8e3 	bl	8000700 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800053a:	f000 f917 	bl	800076c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of debugTask */
  osThreadDef(debugTask, StartDebugTask, osPriorityNormal, 0, 128);
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <main+0x50>)
 8000540:	1d3c      	adds	r4, r7, #4
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  debugTaskHandle = osThreadCreate(osThread(debugTask), NULL);
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f009 f92e 	bl	80097b6 <osThreadCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <main+0x54>)
 800055e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000560:	f009 f922 	bl	80097a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x4c>
 8000566:	bf00      	nop
 8000568:	0800b91c 	.word	0x0800b91c
 800056c:	20000634 	.word	0x20000634

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f00b f8da 	bl	800b738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b28      	ldr	r3, [pc, #160]	; (800063c <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a27      	ldr	r2, [pc, #156]	; (800063c <SystemClock_Config+0xcc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <SystemClock_Config+0xd0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fc54 	bl	8003ea4 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000602:	f000 fa6b 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000612:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2105      	movs	r1, #5
 8000624:	4618      	mov	r0, r3
 8000626:	f003 feb5 	bl	8004394 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000630:	f000 fa54 	bl	8000adc <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	; 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2C1_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_I2C1_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_I2C1_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_I2C1_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_I2C1_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_I2C1_Init+0x50>)
 8000682:	f001 fbad 	bl	8001de0 <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 fa26 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000043c 	.word	0x2000043c
 8000698:	40005400 	.word	0x40005400
 800069c:	000186a0 	.word	0x000186a0

080006a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <MX_I2S3_Init+0x58>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006c8:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <MX_I2S3_Init+0x5c>)
 80006ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_I2S3_Init+0x54>)
 80006e0:	f001 fcc2 	bl	8002068 <HAL_I2S_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ea:	f000 f9f7 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000490 	.word	0x20000490
 80006f8:	40003c00 	.word	0x40003c00
 80006fc:	00017700 	.word	0x00017700

08000700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_SPI1_Init+0x64>)
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <MX_SPI1_Init+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI1_Init+0x64>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI1_Init+0x64>)
 800074c:	220a      	movs	r2, #10
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_SPI1_Init+0x64>)
 8000752:	f004 f9b1 	bl	8004ab8 <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f9be 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200004d8 	.word	0x200004d8
 8000768:	40013000 	.word	0x40013000

0800076c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_USART2_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f004 fcbe 	bl	8005124 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f000 f995 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000530 	.word	0x20000530
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_DMA_Init+0x4c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <MX_DMA_Init+0x4c>)
 80007d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_DMA_Init+0x4c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2105      	movs	r1, #5
 80007e6:	2010      	movs	r0, #16
 80007e8:	f000 fd84 	bl	80012f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007ec:	2010      	movs	r0, #16
 80007ee:	f000 fd9d 	bl	800132c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2105      	movs	r1, #5
 80007f6:	2011      	movs	r0, #17
 80007f8:	f000 fd7c 	bl	80012f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007fc:	2011      	movs	r0, #17
 80007fe:	f000 fd95 	bl	800132c <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a71      	ldr	r2, [pc, #452]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a6a      	ldr	r2, [pc, #424]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b64      	ldr	r3, [pc, #400]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a63      	ldr	r2, [pc, #396]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b61      	ldr	r3, [pc, #388]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b5d      	ldr	r3, [pc, #372]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a5c      	ldr	r2, [pc, #368]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b5a      	ldr	r3, [pc, #360]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a55      	ldr	r2, [pc, #340]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a4e      	ldr	r2, [pc, #312]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b4c      	ldr	r3, [pc, #304]	; (80009f4 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4849      	ldr	r0, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 80008d4:	f001 fa50 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	4847      	ldr	r0, [pc, #284]	; (80009fc <MX_GPIO_Init+0x1ec>)
 80008de:	f001 fa4b 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	2200      	movs	r2, #0
 80008e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e8:	4845      	ldr	r0, [pc, #276]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80008ea:	f001 fa45 	bl	8001d78 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	483c      	ldr	r0, [pc, #240]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 8000906:	f001 f89b 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4836      	ldr	r0, [pc, #216]	; (80009fc <MX_GPIO_Init+0x1ec>)
 8000922:	f001 f88d 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000936:	2305      	movs	r3, #5
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	482e      	ldr	r0, [pc, #184]	; (80009fc <MX_GPIO_Init+0x1ec>)
 8000942:	f001 f87d 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	482a      	ldr	r0, [pc, #168]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 800095c:	f001 f870 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000960:	2304      	movs	r3, #4
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000974:	f001 f864 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000996:	f001 f853 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800099e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80009b4:	f001 f844 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b8:	2320      	movs	r3, #32
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_GPIO_Init+0x1f0>)
 80009cc:	f001 f838 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x1e8>)
 80009e6:	f001 f82b 	bl	8001a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ea:	bf00      	nop
 80009ec:	3730      	adds	r7, #48	; 0x30
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400

08000a0c <StartDebugTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void const * argument)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a14:	f00a f92a 	bl	800ac6c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  for(;;)
  {
	           // If the buffer contains a color, change LED color
	           if (strstr((char*)buffer, "red") != NULL)
 8000a18:	4920      	ldr	r1, [pc, #128]	; (8000a9c <StartDebugTask+0x90>)
 8000a1a:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <StartDebugTask+0x94>)
 8000a1c:	f00a fefe 	bl	800b81c <strstr>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d005      	beq.n	8000a32 <StartDebugTask+0x26>
	           {
	               // Toggle red LED
	               HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2a:	481e      	ldr	r0, [pc, #120]	; (8000aa4 <StartDebugTask+0x98>)
 8000a2c:	f001 f9bd 	bl	8001daa <HAL_GPIO_TogglePin>
 8000a30:	e025      	b.n	8000a7e <StartDebugTask+0x72>
	           }
	           else if (strstr((char*)buffer, "blue") != NULL)
 8000a32:	491d      	ldr	r1, [pc, #116]	; (8000aa8 <StartDebugTask+0x9c>)
 8000a34:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <StartDebugTask+0x94>)
 8000a36:	f00a fef1 	bl	800b81c <strstr>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d005      	beq.n	8000a4c <StartDebugTask+0x40>
	           {
	               // Toggle blue LED
	               HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a44:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <StartDebugTask+0x98>)
 8000a46:	f001 f9b0 	bl	8001daa <HAL_GPIO_TogglePin>
 8000a4a:	e018      	b.n	8000a7e <StartDebugTask+0x72>
	           }
	           else if (strstr((char*)buffer, "green") != NULL)
 8000a4c:	4917      	ldr	r1, [pc, #92]	; (8000aac <StartDebugTask+0xa0>)
 8000a4e:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <StartDebugTask+0x94>)
 8000a50:	f00a fee4 	bl	800b81c <strstr>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d005      	beq.n	8000a66 <StartDebugTask+0x5a>
			   {
				   // Toggle green LED
				   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <StartDebugTask+0x98>)
 8000a60:	f001 f9a3 	bl	8001daa <HAL_GPIO_TogglePin>
 8000a64:	e00b      	b.n	8000a7e <StartDebugTask+0x72>
			   }
	           else if (strstr((char*)buffer, "orange") != NULL)
 8000a66:	4912      	ldr	r1, [pc, #72]	; (8000ab0 <StartDebugTask+0xa4>)
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <StartDebugTask+0x94>)
 8000a6a:	f00a fed7 	bl	800b81c <strstr>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d004      	beq.n	8000a7e <StartDebugTask+0x72>
			   {
				   // Toggle orange LED
				   HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <StartDebugTask+0x98>)
 8000a7a:	f001 f996 	bl	8001daa <HAL_GPIO_TogglePin>
			   }
	 CDC_Transmit_FS((uint8_t*)txt1,strlen((const char*)txt1));
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <StartDebugTask+0xa8>)
 8000a80:	f7ff fba6 	bl	80001d0 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <StartDebugTask+0xa8>)
 8000a8c:	f00a f9b6 	bl	800adfc <CDC_Transmit_FS>
	 //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	 osDelay(500);
 8000a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a94:	f008 fedb 	bl	800984e <osDelay>
	           if (strstr((char*)buffer, "red") != NULL)
 8000a98:	e7be      	b.n	8000a18 <StartDebugTask+0xc>
 8000a9a:	bf00      	nop
 8000a9c:	0800b938 	.word	0x0800b938
 8000aa0:	20000638 	.word	0x20000638
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	0800b93c 	.word	0x0800b93c
 8000aac:	0800b944 	.word	0x0800b944
 8000ab0:	0800b94c 	.word	0x0800b94c
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aca:	f000 fb17 	bl	80010fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40010000 	.word	0x40010000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_MspInit+0x54>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <HAL_MspInit+0x54>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x54>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_MspInit+0x54>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_MspInit+0x54>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_MspInit+0x54>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	f06f 0001 	mvn.w	r0, #1
 8000b2e:	f000 fbe1 	bl	80012f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_I2C_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b90:	2304      	movs	r3, #4
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_I2C_MspInit+0x8c>)
 8000b9c:	f000 ff50 	bl	8001a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <HAL_I2S_MspInit+0xf0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d15a      	bne.n	8000cb6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c04:	23c0      	movs	r3, #192	; 0xc0
 8000c06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fe11 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c1c:	f7ff ff5e 	bl	8000adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a26      	ldr	r2, [pc, #152]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c74:	2310      	movs	r3, #16
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c84:	2306      	movs	r3, #6
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <HAL_I2S_MspInit+0xf8>)
 8000c90:	f000 fed6 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c94:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca6:	2306      	movs	r3, #6
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4806      	ldr	r0, [pc, #24]	; (8000ccc <HAL_I2S_MspInit+0xfc>)
 8000cb2:	f000 fec5 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3738      	adds	r7, #56	; 0x38
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40003c00 	.word	0x40003c00
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	40020800 	.word	0x40020800

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_SPI_MspInit+0x84>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12b      	bne.n	8000d4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d2a:	23e0      	movs	r3, #224	; 0xe0
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d46:	f000 fe7b 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40013000 	.word	0x40013000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a4b      	ldr	r2, [pc, #300]	; (8000eac <HAL_UART_MspInit+0x14c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	f040 8090 	bne.w	8000ea4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <HAL_UART_MspInit+0x150>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_UART_MspInit+0x150>)
 8000d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <HAL_UART_MspInit+0x150>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <HAL_UART_MspInit+0x150>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <HAL_UART_MspInit+0x150>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <HAL_UART_MspInit+0x150>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4837      	ldr	r0, [pc, #220]	; (8000eb4 <HAL_UART_MspInit+0x154>)
 8000dd8:	f000 fe32 	bl	8001a40 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000dde:	4a37      	ldr	r2, [pc, #220]	; (8000ebc <HAL_UART_MspInit+0x15c>)
 8000de0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000de2:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000de4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e1c:	4826      	ldr	r0, [pc, #152]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000e1e:	f000 fa93 	bl	8001348 <HAL_DMA_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000e28:	f7ff fe58 	bl	8000adc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
 8000e32:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <HAL_UART_MspInit+0x158>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e3a:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_UART_MspInit+0x164>)
 8000e3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e44:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e48:	2240      	movs	r2, #64	; 0x40
 8000e4a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e58:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e78:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e7a:	f000 fa65 	bl	8001348 <HAL_DMA_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000e84:	f7ff fe2a 	bl	8000adc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_UART_MspInit+0x160>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2105      	movs	r1, #5
 8000e98:	2026      	movs	r0, #38	; 0x26
 8000e9a:	f000 fa2b 	bl	80012f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e9e:	2026      	movs	r0, #38	; 0x26
 8000ea0:	f000 fa44 	bl	800132c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	20000574 	.word	0x20000574
 8000ebc:	40026088 	.word	0x40026088
 8000ec0:	200005d4 	.word	0x200005d4
 8000ec4:	400260a0 	.word	0x400260a0

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_InitTick+0xd4>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <HAL_InitTick+0xd4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <HAL_InitTick+0xd4>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fc68 	bl	80047d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f04:	f003 fc52 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <HAL_InitTick+0xd8>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9b      	lsrs	r3, r3, #18
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_InitTick+0xe0>)
 8000f20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f44:	f003 fe41 	bl	8004bca <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d11b      	bne.n	8000f8e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f56:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <HAL_InitTick+0xdc>)
 8000f58:	f003 fe90 	bl	8004c7c <HAL_TIM_Base_Start_IT>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d111      	bne.n	8000f8e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f6a:	2019      	movs	r0, #25
 8000f6c:	f000 f9de 	bl	800132c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	d808      	bhi.n	8000f88 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f76:	2200      	movs	r2, #0
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	2019      	movs	r0, #25
 8000f7c:	f000 f9ba 	bl	80012f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_InitTick+0xe4>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e002      	b.n	8000f8e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3730      	adds	r7, #48	; 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	20000678 	.word	0x20000678
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	2000000c 	.word	0x2000000c

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <DMA1_Stream5_IRQHandler+0x10>)
 8000fe2:	f000 faf1 	bl	80015c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000574 	.word	0x20000574

08000ff0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <DMA1_Stream6_IRQHandler+0x10>)
 8000ff6:	f000 fae7 	bl	80015c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200005d4 	.word	0x200005d4

08001004 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800100a:	f003 fea7 	bl	8004d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000678 	.word	0x20000678

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART2_IRQHandler+0x10>)
 800101e:	f004 f8cf 	bl	80051c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000530 	.word	0x20000530

0800102c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <OTG_FS_IRQHandler+0x10>)
 8001032:	f001 fe09 	bl	8002c48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200058f8 	.word	0x200058f8

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108e:	f7ff ffd7 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f00a fb1d 	bl	800b6d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fa3f 	bl	8000518 <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800109c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80010a8:	0800ba34 	.word	0x0800ba34
  ldr r2, =_sbss
 80010ac:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80010b0:	2000602c 	.word	0x2000602c

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f8fc 	bl	80012de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f7ff feee 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fcfc 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000010 	.word	0x20000010
 8001120:	200006c0 	.word	0x200006c0

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200006c0 	.word	0x200006c0

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000010 	.word	0x20000010

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff4c 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001306:	f7ff ff61 	bl	80011cc <__NVIC_GetPriorityGrouping>
 800130a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	6978      	ldr	r0, [r7, #20]
 8001312:	f7ff ffb1 	bl	8001278 <NVIC_EncodePriority>
 8001316:	4602      	mov	r2, r0
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff80 	bl	8001224 <__NVIC_SetPriority>
}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff54 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff fee6 	bl	8001124 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e099      	b.n	8001498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001384:	e00f      	b.n	80013a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001386:	f7ff fecd 	bl	8001124 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b05      	cmp	r3, #5
 8001392:	d908      	bls.n	80013a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2220      	movs	r2, #32
 8001398:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2203      	movs	r2, #3
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e078      	b.n	8001498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1e8      	bne.n	8001386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <HAL_DMA_Init+0x158>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d107      	bne.n	8001410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4313      	orrs	r3, r2
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4313      	orrs	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f023 0307 	bic.w	r3, r3, #7
 8001426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	4313      	orrs	r3, r2
 8001430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	2b04      	cmp	r3, #4
 8001438:	d117      	bne.n	800146a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4313      	orrs	r3, r2
 8001442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00e      	beq.n	800146a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fa7b 	bl	8001948 <DMA_CheckFifoParam>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2240      	movs	r2, #64	; 0x40
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001466:	2301      	movs	r3, #1
 8001468:	e016      	b.n	8001498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fa32 	bl	80018dc <DMA_CalcBaseAndBitshift>
 8001478:	4603      	mov	r3, r0
 800147a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001480:	223f      	movs	r2, #63	; 0x3f
 8001482:	409a      	lsls	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	f010803f 	.word	0xf010803f

080014a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014b2:	f7ff fe37 	bl	8001124 <HAL_GetTick>
 80014b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d008      	beq.n	80014d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e052      	b.n	800157c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0216 	bic.w	r2, r2, #22
 80014e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d103      	bne.n	8001506 <HAL_DMA_Abort+0x62>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0208 	bic.w	r2, r2, #8
 8001514:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001526:	e013      	b.n	8001550 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001528:	f7ff fdfc 	bl	8001124 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b05      	cmp	r3, #5
 8001534:	d90c      	bls.n	8001550 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2220      	movs	r2, #32
 800153a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e015      	b.n	800157c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e4      	bne.n	8001528 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001562:	223f      	movs	r2, #63	; 0x3f
 8001564:	409a      	lsls	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d004      	beq.n	80015a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00c      	b.n	80015bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2205      	movs	r2, #5
 80015a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015d4:	4b8e      	ldr	r3, [pc, #568]	; (8001810 <HAL_DMA_IRQHandler+0x248>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a8e      	ldr	r2, [pc, #568]	; (8001814 <HAL_DMA_IRQHandler+0x24c>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0a9b      	lsrs	r3, r3, #10
 80015e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	2208      	movs	r2, #8
 80015f4:	409a      	lsls	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01a      	beq.n	8001634 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0204 	bic.w	r2, r2, #4
 800161a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2208      	movs	r2, #8
 8001622:	409a      	lsls	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	2201      	movs	r2, #1
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d012      	beq.n	800166a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2201      	movs	r2, #1
 8001658:	409a      	lsls	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	f043 0202 	orr.w	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2204      	movs	r2, #4
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d012      	beq.n	80016a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	2204      	movs	r2, #4
 800168e:	409a      	lsls	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	f043 0204 	orr.w	r2, r3, #4
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	2210      	movs	r2, #16
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d043      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d03c      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c2:	2210      	movs	r2, #16
 80016c4:	409a      	lsls	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d018      	beq.n	800170a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d108      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d024      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	4798      	blx	r3
 80016f6:	e01f      	b.n	8001738 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01b      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
 8001708:	e016      	b.n	8001738 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0208 	bic.w	r2, r2, #8
 8001726:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	2220      	movs	r2, #32
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 808f 	beq.w	8001868 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8087 	beq.w	8001868 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2220      	movs	r2, #32
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b05      	cmp	r3, #5
 8001770:	d136      	bne.n	80017e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0216 	bic.w	r2, r2, #22
 8001780:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001790:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d103      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x1da>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0208 	bic.w	r2, r2, #8
 80017b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	223f      	movs	r2, #63	; 0x3f
 80017b8:	409a      	lsls	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d07e      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
        }
        return;
 80017de:	e079      	b.n	80018d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d01d      	beq.n	800182a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10d      	bne.n	8001818 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	2b00      	cmp	r3, #0
 8001802:	d031      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
 800180c:	e02c      	b.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181c:	2b00      	cmp	r3, #0
 800181e:	d023      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
 8001828:	e01e      	b.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10f      	bne.n	8001858 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0210 	bic.w	r2, r2, #16
 8001846:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	2b00      	cmp	r3, #0
 800186e:	d032      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d022      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2205      	movs	r2, #5
 8001880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3301      	adds	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	429a      	cmp	r2, r3
 800189e:	d307      	bcc.n	80018b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f2      	bne.n	8001894 <HAL_DMA_IRQHandler+0x2cc>
 80018ae:	e000      	b.n	80018b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
 80018d2:	e000      	b.n	80018d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018d4:	bf00      	nop
    }
  }
}
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	3b10      	subs	r3, #16
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <DMA_CalcBaseAndBitshift+0x64>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <DMA_CalcBaseAndBitshift+0x68>)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d909      	bls.n	800191e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001912:	f023 0303 	bic.w	r3, r3, #3
 8001916:	1d1a      	adds	r2, r3, #4
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	659a      	str	r2, [r3, #88]	; 0x58
 800191c:	e007      	b.n	800192e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001926:	f023 0303 	bic.w	r3, r3, #3
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	aaaaaaab 	.word	0xaaaaaaab
 8001944:	0800b9bc 	.word	0x0800b9bc

08001948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d11f      	bne.n	80019a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d856      	bhi.n	8001a16 <DMA_CheckFifoParam+0xce>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <DMA_CheckFifoParam+0x28>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001981 	.word	0x08001981
 8001974:	08001993 	.word	0x08001993
 8001978:	08001981 	.word	0x08001981
 800197c:	08001a17 	.word	0x08001a17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d046      	beq.n	8001a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001990:	e043      	b.n	8001a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800199a:	d140      	bne.n	8001a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a0:	e03d      	b.n	8001a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019aa:	d121      	bne.n	80019f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d837      	bhi.n	8001a22 <DMA_CheckFifoParam+0xda>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <DMA_CheckFifoParam+0x70>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	080019c9 	.word	0x080019c9
 80019bc:	080019cf 	.word	0x080019cf
 80019c0:	080019c9 	.word	0x080019c9
 80019c4:	080019e1 	.word	0x080019e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
      break;
 80019cc:	e030      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d025      	beq.n	8001a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019de:	e022      	b.n	8001a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e8:	d11f      	bne.n	8001a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ee:	e01c      	b.n	8001a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d903      	bls.n	80019fe <DMA_CheckFifoParam+0xb6>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d003      	beq.n	8001a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019fc:	e018      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
      break;
 8001a02:	e015      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00e      	beq.n	8001a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
      break;
 8001a14:	e00b      	b.n	8001a2e <DMA_CheckFifoParam+0xe6>
      break;
 8001a16:	bf00      	nop
 8001a18:	e00a      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e008      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e006      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a22:	bf00      	nop
 8001a24:	e004      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
 8001a28:	e002      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a2a:	bf00      	nop
 8001a2c:	e000      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e16b      	b.n	8001d34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 815a 	bne.w	8001d2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d005      	beq.n	8001a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d130      	bne.n	8001af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d017      	beq.n	8001b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d123      	bne.n	8001b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	08da      	lsrs	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3208      	adds	r2, #8
 8001b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	08da      	lsrs	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3208      	adds	r2, #8
 8001b7e:	69b9      	ldr	r1, [r7, #24]
 8001b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0203 	and.w	r2, r3, #3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80b4 	beq.w	8001d2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b60      	ldr	r3, [pc, #384]	; (8001d4c <HAL_GPIO_Init+0x30c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a5f      	ldr	r2, [pc, #380]	; (8001d4c <HAL_GPIO_Init+0x30c>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_GPIO_Init+0x30c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be2:	4a5b      	ldr	r2, [pc, #364]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <HAL_GPIO_Init+0x314>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02b      	beq.n	8001c66 <HAL_GPIO_Init+0x226>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_GPIO_Init+0x318>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x222>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a50      	ldr	r2, [pc, #320]	; (8001d5c <HAL_GPIO_Init+0x31c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x21e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4f      	ldr	r2, [pc, #316]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x21a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4e      	ldr	r2, [pc, #312]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x216>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4d      	ldr	r2, [pc, #308]	; (8001d68 <HAL_GPIO_Init+0x328>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x212>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4c      	ldr	r2, [pc, #304]	; (8001d6c <HAL_GPIO_Init+0x32c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x20e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4b      	ldr	r2, [pc, #300]	; (8001d70 <HAL_GPIO_Init+0x330>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x20a>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00e      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c4a:	2308      	movs	r3, #8
 8001c4c:	e00c      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c4e:	2306      	movs	r3, #6
 8001c50:	e00a      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c52:	2305      	movs	r3, #5
 8001c54:	e008      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c56:	2304      	movs	r3, #4
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e004      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c66:	2300      	movs	r3, #0
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	f002 0203 	and.w	r2, r2, #3
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	4093      	lsls	r3, r2
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c78:	4935      	ldr	r1, [pc, #212]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001caa:	4a32      	ldr	r2, [pc, #200]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb0:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	f67f ae90 	bls.w	8001a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40013800 	.word	0x40013800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40021400 	.word	0x40021400
 8001d6c:	40021800 	.word	0x40021800
 8001d70:	40021c00 	.word	0x40021c00
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dbc:	887a      	ldrh	r2, [r7, #2]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	041a      	lsls	r2, r3, #16
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	400b      	ands	r3, r1
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e12b      	b.n	800204a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe fe9a 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2224      	movs	r2, #36	; 0x24
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e44:	f002 fc9e 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8001e48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4a81      	ldr	r2, [pc, #516]	; (8002054 <HAL_I2C_Init+0x274>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d807      	bhi.n	8001e64 <HAL_I2C_Init+0x84>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4a80      	ldr	r2, [pc, #512]	; (8002058 <HAL_I2C_Init+0x278>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	bf94      	ite	ls
 8001e5c:	2301      	movls	r3, #1
 8001e5e:	2300      	movhi	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e006      	b.n	8001e72 <HAL_I2C_Init+0x92>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4a7d      	ldr	r2, [pc, #500]	; (800205c <HAL_I2C_Init+0x27c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bf94      	ite	ls
 8001e6c:	2301      	movls	r3, #1
 8001e6e:	2300      	movhi	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0e7      	b.n	800204a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4a78      	ldr	r2, [pc, #480]	; (8002060 <HAL_I2C_Init+0x280>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9b      	lsrs	r3, r3, #18
 8001e84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a6a      	ldr	r2, [pc, #424]	; (8002054 <HAL_I2C_Init+0x274>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d802      	bhi.n	8001eb4 <HAL_I2C_Init+0xd4>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	e009      	b.n	8001ec8 <HAL_I2C_Init+0xe8>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	4a69      	ldr	r2, [pc, #420]	; (8002064 <HAL_I2C_Init+0x284>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	099b      	lsrs	r3, r3, #6
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	495c      	ldr	r1, [pc, #368]	; (8002054 <HAL_I2C_Init+0x274>)
 8001ee4:	428b      	cmp	r3, r1
 8001ee6:	d819      	bhi.n	8001f1c <HAL_I2C_Init+0x13c>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e59      	subs	r1, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef6:	1c59      	adds	r1, r3, #1
 8001ef8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001efc:	400b      	ands	r3, r1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_I2C_Init+0x138>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1e59      	subs	r1, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f16:	e051      	b.n	8001fbc <HAL_I2C_Init+0x1dc>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e04f      	b.n	8001fbc <HAL_I2C_Init+0x1dc>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d111      	bne.n	8001f48 <HAL_I2C_Init+0x168>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1e58      	subs	r0, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e012      	b.n	8001f6e <HAL_I2C_Init+0x18e>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e58      	subs	r0, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	0099      	lsls	r1, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Init+0x196>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e022      	b.n	8001fbc <HAL_I2C_Init+0x1dc>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10e      	bne.n	8001f9c <HAL_I2C_Init+0x1bc>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1e58      	subs	r0, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	440b      	add	r3, r1
 8001f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9a:	e00f      	b.n	8001fbc <HAL_I2C_Init+0x1dc>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1e58      	subs	r0, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	0099      	lsls	r1, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	6809      	ldr	r1, [r1, #0]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6911      	ldr	r1, [r2, #16]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68d2      	ldr	r2, [r2, #12]
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	000186a0 	.word	0x000186a0
 8002058:	001e847f 	.word	0x001e847f
 800205c:	003d08ff 	.word	0x003d08ff
 8002060:	431bde83 	.word	0x431bde83
 8002064:	10624dd3 	.word	0x10624dd3

08002068 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e128      	b.n	80022cc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a90      	ldr	r2, [pc, #576]	; (80022d4 <HAL_I2S_Init+0x26c>)
 8002092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7fe fd9b 	bl	8000bd0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020b0:	f023 030f 	bic.w	r3, r3, #15
 80020b4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2202      	movs	r2, #2
 80020bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d060      	beq.n	8002188 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80020ce:	2310      	movs	r3, #16
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e001      	b.n	80020d8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80020d4:	2320      	movs	r3, #32
 80020d6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d802      	bhi.n	80020e6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f002 fc88 	bl	80049fc <HAL_RCCEx_GetPeriphCLKFreq>
 80020ec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f6:	d125      	bne.n	8002144 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d010      	beq.n	8002122 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	fbb2 f2f3 	udiv	r2, r2, r3
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	3305      	adds	r3, #5
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e01f      	b.n	8002162 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	fbb2 f2f3 	udiv	r2, r2, r3
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	461a      	mov	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	3305      	adds	r3, #5
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e00e      	b.n	8002162 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fbb2 f2f3 	udiv	r2, r2, r3
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	461a      	mov	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	3305      	adds	r3, #5
 8002160:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4a5c      	ldr	r2, [pc, #368]	; (80022d8 <HAL_I2S_Init+0x270>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	08db      	lsrs	r3, r3, #3
 800216c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	e003      	b.n	8002190 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002188:	2302      	movs	r3, #2
 800218a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d902      	bls.n	800219c <HAL_I2S_Init+0x134>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2bff      	cmp	r3, #255	; 0xff
 800219a:	d907      	bls.n	80021ac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f043 0210 	orr.w	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e08f      	b.n	80022cc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	ea42 0103 	orr.w	r1, r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	430a      	orrs	r2, r1
 80021be:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80021ca:	f023 030f 	bic.w	r3, r3, #15
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6851      	ldr	r1, [r2, #4]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6892      	ldr	r2, [r2, #8]
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68d2      	ldr	r2, [r2, #12]
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6992      	ldr	r2, [r2, #24]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d161      	bne.n	80022bc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a38      	ldr	r2, [pc, #224]	; (80022dc <HAL_I2S_Init+0x274>)
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a37      	ldr	r2, [pc, #220]	; (80022e0 <HAL_I2S_Init+0x278>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d101      	bne.n	800220c <HAL_I2S_Init+0x1a4>
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_I2S_Init+0x27c>)
 800220a:	e001      	b.n	8002210 <HAL_I2S_Init+0x1a8>
 800220c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	4932      	ldr	r1, [pc, #200]	; (80022e0 <HAL_I2S_Init+0x278>)
 8002218:	428a      	cmp	r2, r1
 800221a:	d101      	bne.n	8002220 <HAL_I2S_Init+0x1b8>
 800221c:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <HAL_I2S_Init+0x27c>)
 800221e:	e001      	b.n	8002224 <HAL_I2S_Init+0x1bc>
 8002220:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002224:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002228:	f023 030f 	bic.w	r3, r3, #15
 800222c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <HAL_I2S_Init+0x278>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d101      	bne.n	800223c <HAL_I2S_Init+0x1d4>
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_I2S_Init+0x27c>)
 800223a:	e001      	b.n	8002240 <HAL_I2S_Init+0x1d8>
 800223c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002240:	2202      	movs	r2, #2
 8002242:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <HAL_I2S_Init+0x278>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_I2S_Init+0x1ea>
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_I2S_Init+0x27c>)
 8002250:	e001      	b.n	8002256 <HAL_I2S_Init+0x1ee>
 8002252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002262:	d003      	beq.n	800226c <HAL_I2S_Init+0x204>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d103      	bne.n	8002274 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800226c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	e001      	b.n	8002278 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002282:	4313      	orrs	r3, r2
 8002284:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800228c:	4313      	orrs	r3, r2
 800228e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002296:	4313      	orrs	r3, r2
 8002298:	b29a      	uxth	r2, r3
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	4313      	orrs	r3, r2
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022a4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <HAL_I2S_Init+0x278>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_I2S_Init+0x24c>
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_I2S_Init+0x27c>)
 80022b2:	e001      	b.n	80022b8 <HAL_I2S_Init+0x250>
 80022b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022b8:	897a      	ldrh	r2, [r7, #10]
 80022ba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	080023df 	.word	0x080023df
 80022d8:	cccccccd 	.word	0xcccccccd
 80022dc:	080024f5 	.word	0x080024f5
 80022e0:	40003800 	.word	0x40003800
 80022e4:	40003400 	.word	0x40003400

080022e8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	1c9a      	adds	r2, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10e      	bne.n	8002378 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002368:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffb8 	bl	80022e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	b292      	uxth	r2, r2
 8002394:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	1c9a      	adds	r2, r3, #2
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10e      	bne.n	80023d6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff93 	bl	80022fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d13a      	bne.n	8002470 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d109      	bne.n	8002418 <I2S_IRQHandler+0x3a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b40      	cmp	r3, #64	; 0x40
 8002410:	d102      	bne.n	8002418 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffb4 	bl	8002380 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d126      	bne.n	8002470 <I2S_IRQHandler+0x92>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b20      	cmp	r3, #32
 800242e:	d11f      	bne.n	8002470 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800243e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f043 0202 	orr.w	r2, r3, #2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff50 	bl	8002310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b03      	cmp	r3, #3
 800247a:	d136      	bne.n	80024ea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d109      	bne.n	800249a <I2S_IRQHandler+0xbc>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b80      	cmp	r3, #128	; 0x80
 8002492:	d102      	bne.n	800249a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff45 	bl	8002324 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d122      	bne.n	80024ea <I2S_IRQHandler+0x10c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d11b      	bne.n	80024ea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f043 0204 	orr.w	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff13 	bl	8002310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a92      	ldr	r2, [pc, #584]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800250e:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002510:	e001      	b.n	8002516 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002512:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a8b      	ldr	r2, [pc, #556]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d101      	bne.n	8002530 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800252c:	4b8a      	ldr	r3, [pc, #552]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800252e:	e001      	b.n	8002534 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002540:	d004      	beq.n	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 8099 	bne.w	800267e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b02      	cmp	r3, #2
 8002554:	d107      	bne.n	8002566 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f925 	bl	80027b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f9c8 	bl	8002910 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d13a      	bne.n	8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d035      	beq.n	8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6e      	ldr	r2, [pc, #440]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800259e:	4b6e      	ldr	r3, [pc, #440]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025a0:	e001      	b.n	80025a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80025a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4969      	ldr	r1, [pc, #420]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025ae:	428b      	cmp	r3, r1
 80025b0:	d101      	bne.n	80025b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80025b2:	4b69      	ldr	r3, [pc, #420]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025b4:	e001      	b.n	80025ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80025b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025be:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f043 0202 	orr.w	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fe88 	bl	8002310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b08      	cmp	r3, #8
 8002608:	f040 80c3 	bne.w	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80bd 	beq.w	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002626:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a49      	ldr	r2, [pc, #292]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002634:	e001      	b.n	800263a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4944      	ldr	r1, [pc, #272]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002642:	428b      	cmp	r3, r1
 8002644:	d101      	bne.n	800264a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002646:	4b44      	ldr	r3, [pc, #272]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002648:	e001      	b.n	800264e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800264a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800264e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002652:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f043 0204 	orr.w	r2, r3, #4
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fe4a 	bl	8002310 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800267c:	e089      	b.n	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b02      	cmp	r3, #2
 8002686:	d107      	bne.n	8002698 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8be 	bl	8002814 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f8fd 	bl	80028ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d12f      	bne.n	800271c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02a      	beq.n	800271c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d101      	bne.n	80026e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026e2:	e001      	b.n	80026e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80026e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4919      	ldr	r1, [pc, #100]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d101      	bne.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026f6:	e001      	b.n	80026fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80026f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002700:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f043 0202 	orr.w	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fdfa 	bl	8002310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b08      	cmp	r3, #8
 8002724:	d136      	bne.n	8002794 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d031      	beq.n	8002794 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800273c:	e001      	b.n	8002742 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800273e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4902      	ldr	r1, [pc, #8]	; (8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800274a:	428b      	cmp	r3, r1
 800274c:	d106      	bne.n	800275c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800274e:	4b02      	ldr	r3, [pc, #8]	; (8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002750:	e006      	b.n	8002760 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002752:	bf00      	nop
 8002754:	40003800 	.word	0x40003800
 8002758:	40003400 	.word	0x40003400
 800275c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002760:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002764:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002774:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f043 0204 	orr.w	r2, r3, #4
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fdc0 	bl	8002310 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002790:	e000      	b.n	8002794 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002792:	bf00      	nop
}
 8002794:	bf00      	nop
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	1c99      	adds	r1, r3, #2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6251      	str	r1, [r2, #36]	; 0x24
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d113      	bne.n	800280a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ffc9 	bl	800279c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	1c99      	adds	r1, r3, #2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6251      	str	r1, [r2, #36]	; 0x24
 8002826:	8819      	ldrh	r1, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <I2SEx_TxISR_I2SExt+0x90>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <I2SEx_TxISR_I2SExt+0x22>
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <I2SEx_TxISR_I2SExt+0x94>)
 8002834:	e001      	b.n	800283a <I2SEx_TxISR_I2SExt+0x26>
 8002836:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800283a:	460a      	mov	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d121      	bne.n	800289a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <I2SEx_TxISR_I2SExt+0x90>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <I2SEx_TxISR_I2SExt+0x50>
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <I2SEx_TxISR_I2SExt+0x94>)
 8002862:	e001      	b.n	8002868 <I2SEx_TxISR_I2SExt+0x54>
 8002864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	490d      	ldr	r1, [pc, #52]	; (80028a4 <I2SEx_TxISR_I2SExt+0x90>)
 8002870:	428b      	cmp	r3, r1
 8002872:	d101      	bne.n	8002878 <I2SEx_TxISR_I2SExt+0x64>
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <I2SEx_TxISR_I2SExt+0x94>)
 8002876:	e001      	b.n	800287c <I2SEx_TxISR_I2SExt+0x68>
 8002878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800287c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002880:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d106      	bne.n	800289a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff81 	bl	800279c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40003800 	.word	0x40003800
 80028a8:	40003400 	.word	0x40003400

080028ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68d8      	ldr	r0, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	1c99      	adds	r1, r3, #2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80028c4:	b282      	uxth	r2, r0
 80028c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d113      	bne.n	8002908 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ff4a 	bl	800279c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <I2SEx_RxISR_I2SExt+0x90>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <I2SEx_RxISR_I2SExt+0x16>
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <I2SEx_RxISR_I2SExt+0x94>)
 8002924:	e001      	b.n	800292a <I2SEx_RxISR_I2SExt+0x1a>
 8002926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800292a:	68d8      	ldr	r0, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	1c99      	adds	r1, r3, #2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002936:	b282      	uxth	r2, r0
 8002938:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d121      	bne.n	8002996 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <I2SEx_RxISR_I2SExt+0x90>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <I2SEx_RxISR_I2SExt+0x50>
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <I2SEx_RxISR_I2SExt+0x94>)
 800295e:	e001      	b.n	8002964 <I2SEx_RxISR_I2SExt+0x54>
 8002960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	490d      	ldr	r1, [pc, #52]	; (80029a0 <I2SEx_RxISR_I2SExt+0x90>)
 800296c:	428b      	cmp	r3, r1
 800296e:	d101      	bne.n	8002974 <I2SEx_RxISR_I2SExt+0x64>
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <I2SEx_RxISR_I2SExt+0x94>)
 8002972:	e001      	b.n	8002978 <I2SEx_RxISR_I2SExt+0x68>
 8002974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002978:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800297c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff03 	bl	800279c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40003800 	.word	0x40003800
 80029a4:	40003400 	.word	0x40003400

080029a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029aa:	b08f      	sub	sp, #60	; 0x3c
 80029ac:	af0a      	add	r7, sp, #40	; 0x28
 80029ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e10f      	b.n	8002bda <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f008 fb59 	bl	800b08c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2203      	movs	r2, #3
 80029de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fbbc 	bl	8006176 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	687e      	ldr	r6, [r7, #4]
 8002a06:	466d      	mov	r5, sp
 8002a08:	f106 0410 	add.w	r4, r6, #16
 8002a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a18:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a1c:	1d33      	adds	r3, r6, #4
 8002a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a20:	6838      	ldr	r0, [r7, #0]
 8002a22:	f003 fa93 	bl	8005f4c <USB_CoreInit>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0d0      	b.n	8002bda <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 fbaa 	bl	8006198 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e04a      	b.n	8002ae0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	333d      	adds	r3, #61	; 0x3d
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	333c      	adds	r3, #60	; 0x3c
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	b298      	uxth	r0, r3
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3344      	adds	r3, #68	; 0x44
 8002a86:	4602      	mov	r2, r0
 8002a88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3340      	adds	r3, #64	; 0x40
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3348      	adds	r3, #72	; 0x48
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	334c      	adds	r3, #76	; 0x4c
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3354      	adds	r3, #84	; 0x54
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	3301      	adds	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d3af      	bcc.n	8002a4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e044      	b.n	8002b7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	3301      	adds	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d3b5      	bcc.n	8002af0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	687e      	ldr	r6, [r7, #4]
 8002b8c:	466d      	mov	r5, sp
 8002b8e:	f106 0410 	add.w	r4, r6, #16
 8002b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ba2:	1d33      	adds	r3, r6, #4
 8002ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba6:	6838      	ldr	r0, [r7, #0]
 8002ba8:	f003 fb42 	bl	8006230 <USB_DevInit>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00d      	b.n	8002bda <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 fc91 	bl	80074fa <USB_DevDisconnect>

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_PCD_Start+0x1c>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e020      	b.n	8002c40 <HAL_PCD_Start+0x5e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d109      	bne.n	8002c22 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d005      	beq.n	8002c22 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fa94 	bl	8006154 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 fc41 	bl	80074b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b08d      	sub	sp, #52	; 0x34
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fcff 	bl	8007662 <USB_GetMode>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 848a 	bne.w	8003580 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f004 fc63 	bl	800753c <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8480 	beq.w	800357e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 fc50 	bl	800753c <USB_ReadInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f002 0202 	and.w	r2, r2, #2
 8002cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f004 fc3e 	bl	800753c <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d161      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0210 	bic.w	r2, r2, #16
 8002cd8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	0c5b      	lsrs	r3, r3, #17
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d124      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d035      	beq.n	8002d7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	6a38      	ldr	r0, [r7, #32]
 8002d26:	f004 fa75 	bl	8007214 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d36:	441a      	add	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	6a1a      	ldr	r2, [r3, #32]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d48:	441a      	add	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	621a      	str	r2, [r3, #32]
 8002d4e:	e016      	b.n	8002d7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	0c5b      	lsrs	r3, r3, #17
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d110      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d62:	2208      	movs	r2, #8
 8002d64:	4619      	mov	r1, r3
 8002d66:	6a38      	ldr	r0, [r7, #32]
 8002d68:	f004 fa54 	bl	8007214 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d78:	441a      	add	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0210 	orr.w	r2, r2, #16
 8002d8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 fbd2 	bl	800753c <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002da2:	f040 80a7 	bne.w	8002ef4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 fbd7 	bl	8007562 <USB_ReadDevAllOutEpInterrupt>
 8002db4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002db6:	e099      	b.n	8002eec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 808e 	beq.w	8002ee0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fbfb 	bl	80075ca <USB_ReadDevOutEPInterrupt>
 8002dd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00c      	beq.n	8002dfa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dec:	461a      	mov	r2, r3
 8002dee:	2301      	movs	r3, #1
 8002df0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fec3 	bl	8003b80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00c      	beq.n	8002e1e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e10:	461a      	mov	r2, r3
 8002e12:	2308      	movs	r3, #8
 8002e14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 ff99 	bl	8003d50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	2310      	movs	r3, #16
 8002e38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d030      	beq.n	8002ea6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d109      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e62:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	3304      	adds	r3, #4
 8002e78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	78db      	ldrb	r3, [r3, #3]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d108      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f008 fa10 	bl	800b2b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ede:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f47f af62 	bne.w	8002db8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fb1f 	bl	800753c <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f08:	f040 80db 	bne.w	80030c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 fb40 	bl	8007596 <USB_ReadDevAllInEpInterrupt>
 8002f16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f1c:	e0cd      	b.n	80030ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80c2 	beq.w	80030ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 fb66 	bl	8007606 <USB_ReadDevInEPInterrupt>
 8002f3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d057      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69f9      	ldr	r1, [r7, #28]
 8002f62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f66:	4013      	ands	r3, r2
 8002f68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	2301      	movs	r3, #1
 8002f7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d132      	bne.n	8002fea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	334c      	adds	r3, #76	; 0x4c
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4403      	add	r3, r0
 8002fa4:	3348      	adds	r3, #72	; 0x48
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4419      	add	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4403      	add	r3, r0
 8002fb8:	334c      	adds	r3, #76	; 0x4c
 8002fba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d113      	bne.n	8002fea <HAL_PCD_IRQHandler+0x3a2>
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3354      	adds	r3, #84	; 0x54
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d108      	bne.n	8002fea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	f004 fb6d 	bl	80076c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f008 f8da 	bl	800b1aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300c:	461a      	mov	r2, r3
 800300e:	2308      	movs	r3, #8
 8003010:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003028:	461a      	mov	r2, r3
 800302a:	2310      	movs	r3, #16
 800302c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003044:	461a      	mov	r2, r3
 8003046:	2340      	movs	r3, #64	; 0x40
 8003048:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003056:	6a38      	ldr	r0, [r7, #32]
 8003058:	f003 fa4e 	bl	80064f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	3338      	adds	r3, #56	; 0x38
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	78db      	ldrb	r3, [r3, #3]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d108      	bne.n	800308a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f008 f927 	bl	800b2d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003096:	461a      	mov	r2, r3
 8003098:	2302      	movs	r3, #2
 800309a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fcdb 	bl	8003a64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	3301      	adds	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f47f af2e 	bne.w	8002f1e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f004 fa38 	bl	800753c <USB_ReadInterrupts>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d6:	d122      	bne.n	800311e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d108      	bne.n	8003108 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030fe:	2100      	movs	r1, #0
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fec3 	bl	8003e8c <HAL_PCDEx_LPM_Callback>
 8003106:	e002      	b.n	800310e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f008 f8c5 	bl	800b298 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800311c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f004 fa0a 	bl	800753c <USB_ReadInterrupts>
 8003128:	4603      	mov	r3, r0
 800312a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003132:	d112      	bne.n	800315a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d102      	bne.n	800314a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f008 f881 	bl	800b24c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003158:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f004 f9ec 	bl	800753c <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316e:	f040 80b7 	bne.w	80032e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2110      	movs	r1, #16
 800318c:	4618      	mov	r0, r3
 800318e:	f003 f9b3 	bl	80064f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003192:	2300      	movs	r3, #0
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003196:	e046      	b.n	8003226 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a4:	461a      	mov	r2, r3
 80031a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031bc:	0151      	lsls	r1, r2, #5
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	440a      	add	r2, r1
 80031c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d8:	461a      	mov	r2, r3
 80031da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f0:	0151      	lsls	r1, r2, #5
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	440a      	add	r2, r1
 80031f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	440a      	add	r2, r1
 8003216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800321a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800321e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	3301      	adds	r3, #1
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800322c:	429a      	cmp	r2, r3
 800322e:	d3b3      	bcc.n	8003198 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003242:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	d016      	beq.n	800327a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800325c:	f043 030b 	orr.w	r3, r3, #11
 8003260:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003272:	f043 030b 	orr.w	r3, r3, #11
 8003276:	6453      	str	r3, [r2, #68]	; 0x44
 8003278:	e015      	b.n	80032a6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800328c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003290:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a0:	f043 030b 	orr.w	r3, r3, #11
 80032a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ca:	461a      	mov	r2, r3
 80032cc:	f004 f9fa 	bl	80076c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f004 f929 	bl	800753c <USB_ReadInterrupts>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f4:	d124      	bne.n	8003340 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 f9bf 	bl	800767e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 f974 	bl	80065f2 <USB_GetDevSpeed>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681c      	ldr	r4, [r3, #0]
 8003316:	f001 fa29 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800331a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	4620      	mov	r0, r4
 8003326:	f002 fe73 	bl	8006010 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f007 ff65 	bl	800b1fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800333e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f004 f8f9 	bl	800753c <USB_ReadInterrupts>
 800334a:	4603      	mov	r3, r0
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b08      	cmp	r3, #8
 8003352:	d10a      	bne.n	800336a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f007 ff42 	bl	800b1de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f002 0208 	and.w	r2, r2, #8
 8003368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f004 f8e4 	bl	800753c <USB_ReadInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	2b80      	cmp	r3, #128	; 0x80
 800337c:	d122      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800338a:	2301      	movs	r3, #1
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	e014      	b.n	80033ba <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4619      	mov	r1, r3
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fb27 	bl	8003a02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	3301      	adds	r3, #1
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d3e5      	bcc.n	8003390 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f004 f8b7 	bl	800753c <USB_ReadInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d8:	d13b      	bne.n	8003452 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033da:	2301      	movs	r3, #1
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	e02b      	b.n	8003438 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	3340      	adds	r3, #64	; 0x40
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d115      	bne.n	8003432 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003406:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003408:	2b00      	cmp	r3, #0
 800340a:	da12      	bge.n	8003432 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	333f      	adds	r3, #63	; 0x3f
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003428:	b2db      	uxtb	r3, r3
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fae8 	bl	8003a02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	3301      	adds	r3, #1
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343e:	429a      	cmp	r2, r3
 8003440:	d3ce      	bcc.n	80033e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003450:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f004 f870 	bl	800753c <USB_ReadInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003466:	d155      	bne.n	8003514 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003468:	2301      	movs	r3, #1
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
 800346c:	e045      	b.n	80034fa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d12e      	bne.n	80034f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003496:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003498:	2b00      	cmp	r3, #0
 800349a:	da2b      	bge.n	80034f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80034a8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d121      	bne.n	80034f4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f0:	6053      	str	r3, [r2, #4]
            break;
 80034f2:	e007      	b.n	8003504 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	3301      	adds	r3, #1
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	429a      	cmp	r2, r3
 8003502:	d3b4      	bcc.n	800346e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f004 f80f 	bl	800753c <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d10a      	bne.n	8003540 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f007 fee6 	bl	800b2fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800353e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f003 fff9 	bl	800753c <USB_ReadInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b04      	cmp	r3, #4
 8003552:	d115      	bne.n	8003580 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f007 fed6 	bl	800b318 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	e000      	b.n	8003580 <HAL_PCD_IRQHandler+0x938>
      return;
 800357e:	bf00      	nop
    }
  }
}
 8003580:	3734      	adds	r7, #52	; 0x34
 8003582:	46bd      	mov	sp, r7
 8003584:	bd90      	pop	{r4, r7, pc}

08003586 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_PCD_SetAddress+0x1a>
 800359c:	2302      	movs	r3, #2
 800359e:	e013      	b.n	80035c8 <HAL_PCD_SetAddress+0x42>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 ff57 	bl	800746c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	70fb      	strb	r3, [r7, #3]
 80035e2:	460b      	mov	r3, r1
 80035e4:	803b      	strh	r3, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da0f      	bge.n	8003616 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	f003 020f 	and.w	r2, r3, #15
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	3338      	adds	r3, #56	; 0x38
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	3304      	adds	r3, #4
 800360c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	705a      	strb	r2, [r3, #1]
 8003614:	e00f      	b.n	8003636 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	f003 020f 	and.w	r2, r3, #15
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	3304      	adds	r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003642:	883a      	ldrh	r2, [r7, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	78ba      	ldrb	r2, [r7, #2]
 800364c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	785b      	ldrb	r3, [r3, #1]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d004      	beq.n	8003660 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003660:	78bb      	ldrb	r3, [r7, #2]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d102      	bne.n	800366c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_PCD_EP_Open+0xaa>
 8003676:	2302      	movs	r3, #2
 8003678:	e00e      	b.n	8003698 <HAL_PCD_EP_Open+0xc8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	4618      	mov	r0, r3
 800368a:	f002 ffd7 	bl	800663c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003696:	7afb      	ldrb	r3, [r7, #11]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	da0f      	bge.n	80036d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	f003 020f 	and.w	r2, r3, #15
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	3338      	adds	r3, #56	; 0x38
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	705a      	strb	r2, [r3, #1]
 80036d2:	e00f      	b.n	80036f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	f003 020f 	and.w	r2, r3, #15
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	3304      	adds	r3, #4
 80036ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_PCD_EP_Close+0x6e>
 800370a:	2302      	movs	r3, #2
 800370c:	e00e      	b.n	800372c <HAL_PCD_EP_Close+0x8c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	4618      	mov	r0, r3
 800371e:	f003 f815 	bl	800674c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	460b      	mov	r3, r1
 8003742:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003744:	7afb      	ldrb	r3, [r7, #11]
 8003746:	f003 020f 	and.w	r2, r3, #15
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	3304      	adds	r3, #4
 800375c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003776:	7afb      	ldrb	r3, [r7, #11]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	b2da      	uxtb	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d102      	bne.n	8003790 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	6979      	ldr	r1, [r7, #20]
 80037a8:	f003 faf4 	bl	8006d94 <USB_EP0StartXfer>
 80037ac:	e008      	b.n	80037c0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	6979      	ldr	r1, [r7, #20]
 80037bc:	f003 f8a2 	bl	8006904 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 020f 	and.w	r2, r3, #15
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80037ec:	681b      	ldr	r3, [r3, #0]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	460b      	mov	r3, r1
 8003808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800380a:	7afb      	ldrb	r3, [r7, #11]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3338      	adds	r3, #56	; 0x38
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2201      	movs	r2, #1
 8003838:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	b2da      	uxtb	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003854:	7afb      	ldrb	r3, [r7, #11]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	f003 fa92 	bl	8006d94 <USB_EP0StartXfer>
 8003870:	e008      	b.n	8003884 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	6979      	ldr	r1, [r7, #20]
 8003880:	f003 f840 	bl	8006904 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d901      	bls.n	80038ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e050      	b.n	800394e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	da0f      	bge.n	80038d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 020f 	and.w	r2, r3, #15
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	3338      	adds	r3, #56	; 0x38
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	3304      	adds	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	705a      	strb	r2, [r3, #1]
 80038d2:	e00d      	b.n	80038f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	3304      	adds	r3, #4
 80038e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_PCD_EP_SetStall+0x82>
 800390c:	2302      	movs	r3, #2
 800390e:	e01e      	b.n	800394e <HAL_PCD_EP_SetStall+0xc0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68f9      	ldr	r1, [r7, #12]
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fcd0 	bl	80072c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	b2d9      	uxtb	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800393e:	461a      	mov	r2, r3
 8003940:	f003 fec0 	bl	80076c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 020f 	and.w	r2, r3, #15
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	d901      	bls.n	8003974 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e042      	b.n	80039fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da0f      	bge.n	800399c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	3338      	adds	r3, #56	; 0x38
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	3304      	adds	r3, #4
 8003992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	705a      	strb	r2, [r3, #1]
 800399a:	e00f      	b.n	80039bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	f003 020f 	and.w	r2, r3, #15
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	3304      	adds	r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_PCD_EP_ClrStall+0x86>
 80039d8:	2302      	movs	r3, #2
 80039da:	e00e      	b.n	80039fa <HAL_PCD_EP_ClrStall+0xa4>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68f9      	ldr	r1, [r7, #12]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 fcd8 	bl	80073a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	da0c      	bge.n	8003a30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	3338      	adds	r3, #56	; 0x38
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	e00c      	b.n	8003a4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	3304      	adds	r3, #4
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68f9      	ldr	r1, [r7, #12]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f003 faf7 	bl	8007044 <USB_EPStopXfer>
 8003a56:	4603      	mov	r3, r0
 8003a58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	3338      	adds	r3, #56	; 0x38
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	3304      	adds	r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a1a      	ldr	r2, [r3, #32]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d901      	bls.n	8003a9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e06c      	b.n	8003b76 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d902      	bls.n	8003ab8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	3303      	adds	r3, #3
 8003abc:	089b      	lsrs	r3, r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ac0:	e02b      	b.n	8003b1a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d902      	bls.n	8003ade <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3303      	adds	r3, #3
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6919      	ldr	r1, [r3, #16]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4603      	mov	r3, r0
 8003afc:	6978      	ldr	r0, [r7, #20]
 8003afe:	f003 fb4b 	bl	8007198 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	441a      	add	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1a      	ldr	r2, [r3, #32]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	441a      	add	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d809      	bhi.n	8003b44 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d203      	bcs.n	8003b44 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1be      	bne.n	8003ac2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d811      	bhi.n	8003b74 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	2201      	movs	r2, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	6939      	ldr	r1, [r7, #16]
 8003b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b70:	4013      	ands	r3, r2
 8003b72:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	333c      	adds	r3, #60	; 0x3c
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d17b      	bne.n	8003cae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4a61      	ldr	r2, [pc, #388]	; (8003d48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	f240 80b9 	bls.w	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80b3 	beq.w	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003be8:	6093      	str	r3, [r2, #8]
 8003bea:	e0a7      	b.n	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	461a      	mov	r2, r3
 8003c04:	2320      	movs	r3, #32
 8003c06:	6093      	str	r3, [r2, #8]
 8003c08:	e098      	b.n	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 8093 	bne.w	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	4a4b      	ldr	r2, [pc, #300]	; (8003d48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d90f      	bls.n	8003c3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	461a      	mov	r2, r3
 8003c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c3a:	6093      	str	r3, [r2, #8]
 8003c3c:	e07e      	b.n	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3304      	adds	r3, #4
 8003c52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	0159      	lsls	r1, r3, #5
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	440b      	add	r3, r1
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6a:	1ad2      	subs	r2, r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d114      	bne.n	8003ca0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	f003 fd1a 	bl	80076c4 <USB_EP0_OutStart>
 8003c90:	e006      	b.n	8003ca0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	441a      	add	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f007 fa64 	bl	800b174 <HAL_PCD_DataOutStageCallback>
 8003cac:	e046      	b.n	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d124      	bne.n	8003d00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd2:	6093      	str	r3, [r2, #8]
 8003cd4:	e032      	b.n	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cec:	461a      	mov	r2, r3
 8003cee:	2320      	movs	r3, #32
 8003cf0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f007 fa3b 	bl	800b174 <HAL_PCD_DataOutStageCallback>
 8003cfe:	e01d      	b.n	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d114      	bne.n	8003d30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	f003 fcca 	bl	80076c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f007 fa1c 	bl	800b174 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	4f54300a 	.word	0x4f54300a
 8003d4c:	4f54310a 	.word	0x4f54310a

08003d50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	333c      	adds	r3, #60	; 0x3c
 8003d68:	3304      	adds	r3, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d90e      	bls.n	8003da4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f007 f9d3 	bl	800b150 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d90c      	bls.n	8003dcc <PCD_EP_OutSetupPacket_int+0x7c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	f003 fc7c 	bl	80076c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	4f54300a 	.word	0x4f54300a

08003ddc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
 8003de8:	4613      	mov	r3, r2
 8003dea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dfa:	883b      	ldrh	r3, [r7, #0]
 8003dfc:	0419      	lsls	r1, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
 8003e08:	e028      	b.n	8003e5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	4413      	add	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	e00d      	b.n	8003e3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	3340      	adds	r3, #64	; 0x40
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	4413      	add	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	3301      	adds	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d3ec      	bcc.n	8003e1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e44:	883b      	ldrh	r3, [r7, #0]
 8003e46:	0418      	lsls	r0, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6819      	ldr	r1, [r3, #0]
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	4302      	orrs	r2, r0
 8003e54:	3340      	adds	r3, #64	; 0x40
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	460b      	mov	r3, r1
 8003e74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e267      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d075      	beq.n	8003fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ec2:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ece:	4b85      	ldr	r3, [pc, #532]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d112      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eda:	4b82      	ldr	r3, [pc, #520]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee6:	d10b      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	4b7e      	ldr	r3, [pc, #504]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d05b      	beq.n	8003fac <HAL_RCC_OscConfig+0x108>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d157      	bne.n	8003fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e242      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f08:	d106      	bne.n	8003f18 <HAL_RCC_OscConfig+0x74>
 8003f0a:	4b76      	ldr	r3, [pc, #472]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a75      	ldr	r2, [pc, #468]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e01d      	b.n	8003f54 <HAL_RCC_OscConfig+0xb0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x98>
 8003f22:	4b70      	ldr	r3, [pc, #448]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6f      	ldr	r2, [pc, #444]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b6d      	ldr	r3, [pc, #436]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6c      	ldr	r2, [pc, #432]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0xb0>
 8003f3c:	4b69      	ldr	r3, [pc, #420]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a68      	ldr	r2, [pc, #416]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b66      	ldr	r3, [pc, #408]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a65      	ldr	r2, [pc, #404]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d013      	beq.n	8003f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fd f8e2 	bl	8001124 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fd f8de 	bl	8001124 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	; 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e207      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b5b      	ldr	r3, [pc, #364]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0xc0>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fd f8ce 	bl	8001124 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fd f8ca 	bl	8001124 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1f3      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	4b51      	ldr	r3, [pc, #324]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0xe8>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d063      	beq.n	8004082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fba:	4b4a      	ldr	r3, [pc, #296]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d11c      	bne.n	800400c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd2:	4b44      	ldr	r3, [pc, #272]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d116      	bne.n	800400c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fde:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x152>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e1c7      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff6:	4b3b      	ldr	r3, [pc, #236]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4937      	ldr	r1, [pc, #220]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	e03a      	b.n	8004082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004014:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_RCC_OscConfig+0x244>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fd f883 	bl	8001124 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004022:	f7fd f87f 	bl	8001124 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e1a8      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004034:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004040:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4925      	ldr	r1, [pc, #148]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]
 8004054:	e015      	b.n	8004082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCC_OscConfig+0x244>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd f862 	bl	8001124 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004064:	f7fd f85e 	bl	8001124 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e187      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d036      	beq.n	80040fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <HAL_RCC_OscConfig+0x248>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fd f842 	bl	8001124 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a4:	f7fd f83e 	bl	8001124 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e167      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x200>
 80040c2:	e01b      	b.n	80040fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_OscConfig+0x248>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ca:	f7fd f82b 	bl	8001124 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d0:	e00e      	b.n	80040f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d2:	f7fd f827 	bl	8001124 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d907      	bls.n	80040f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e150      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	42470000 	.word	0x42470000
 80040ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	4b88      	ldr	r3, [pc, #544]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80040f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ea      	bne.n	80040d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8097 	beq.w	8004238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410e:	4b81      	ldr	r3, [pc, #516]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	4b7d      	ldr	r3, [pc, #500]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	4a7c      	ldr	r2, [pc, #496]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 8004124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004128:	6413      	str	r3, [r2, #64]	; 0x40
 800412a:	4b7a      	ldr	r3, [pc, #488]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413a:	4b77      	ldr	r3, [pc, #476]	; (8004318 <HAL_RCC_OscConfig+0x474>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d118      	bne.n	8004178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004146:	4b74      	ldr	r3, [pc, #464]	; (8004318 <HAL_RCC_OscConfig+0x474>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a73      	ldr	r2, [pc, #460]	; (8004318 <HAL_RCC_OscConfig+0x474>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004152:	f7fc ffe7 	bl	8001124 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fc ffe3 	bl	8001124 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e10c      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	4b6a      	ldr	r3, [pc, #424]	; (8004318 <HAL_RCC_OscConfig+0x474>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d106      	bne.n	800418e <HAL_RCC_OscConfig+0x2ea>
 8004180:	4b64      	ldr	r3, [pc, #400]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a63      	ldr	r2, [pc, #396]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
 800418c:	e01c      	b.n	80041c8 <HAL_RCC_OscConfig+0x324>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x30c>
 8004196:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a5e      	ldr	r2, [pc, #376]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	4b5c      	ldr	r3, [pc, #368]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a5b      	ldr	r2, [pc, #364]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0x324>
 80041b0:	4b58      	ldr	r3, [pc, #352]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a57      	ldr	r2, [pc, #348]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	4b55      	ldr	r3, [pc, #340]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a54      	ldr	r2, [pc, #336]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80041c2:	f023 0304 	bic.w	r3, r3, #4
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fc ffa8 	bl	8001124 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fc ffa4 	bl	8001124 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0cb      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ee:	4b49      	ldr	r3, [pc, #292]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ee      	beq.n	80041d8 <HAL_RCC_OscConfig+0x334>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fc:	f7fc ff92 	bl	8001124 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fc ff8e 	bl	8001124 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0b5      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421a:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ee      	bne.n	8004204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422c:	4b39      	ldr	r3, [pc, #228]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	4a38      	ldr	r2, [pc, #224]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 8004232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004236:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80a1 	beq.w	8004384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004242:	4b34      	ldr	r3, [pc, #208]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b08      	cmp	r3, #8
 800424c:	d05c      	beq.n	8004308 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d141      	bne.n	80042da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCC_OscConfig+0x478>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425c:	f7fc ff62 	bl	8001124 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004264:	f7fc ff5e 	bl	8001124 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e087      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	4b27      	ldr	r3, [pc, #156]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	491b      	ldr	r1, [pc, #108]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ac:	4b1b      	ldr	r3, [pc, #108]	; (800431c <HAL_RCC_OscConfig+0x478>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fc ff37 	bl	8001124 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fc ff33 	bl	8001124 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e05c      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042cc:	4b11      	ldr	r3, [pc, #68]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x416>
 80042d8:	e054      	b.n	8004384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <HAL_RCC_OscConfig+0x478>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fc ff20 	bl	8001124 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fc ff1c 	bl	8001124 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e045      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCC_OscConfig+0x470>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x444>
 8004306:	e03d      	b.n	8004384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e038      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
 8004314:	40023800 	.word	0x40023800
 8004318:	40007000 	.word	0x40007000
 800431c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_RCC_OscConfig+0x4ec>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d028      	beq.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d121      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d11a      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004350:	4013      	ands	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004358:	4293      	cmp	r3, r2
 800435a:	d111      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	3b01      	subs	r3, #1
 800436a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d107      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0cc      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043a8:	4b68      	ldr	r3, [pc, #416]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d90c      	bls.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b65      	ldr	r3, [pc, #404]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b63      	ldr	r3, [pc, #396]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0b8      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d020      	beq.n	800441e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e8:	4b59      	ldr	r3, [pc, #356]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a58      	ldr	r2, [pc, #352]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004400:	4b53      	ldr	r3, [pc, #332]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a52      	ldr	r2, [pc, #328]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800440a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800440c:	4b50      	ldr	r3, [pc, #320]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	494d      	ldr	r1, [pc, #308]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d044      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d107      	bne.n	8004442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	4b47      	ldr	r3, [pc, #284]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d119      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d003      	beq.n	8004452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444e:	2b03      	cmp	r3, #3
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004452:	4b3f      	ldr	r3, [pc, #252]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e06f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004462:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e067      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004472:	4b37      	ldr	r3, [pc, #220]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 0203 	bic.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4934      	ldr	r1, [pc, #208]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004484:	f7fc fe4e 	bl	8001124 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448c:	f7fc fe4a 	bl	8001124 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	; 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e04f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 020c 	and.w	r2, r3, #12
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d1eb      	bne.n	800448c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d20c      	bcs.n	80044dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b22      	ldr	r3, [pc, #136]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e032      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4916      	ldr	r1, [pc, #88]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	490e      	ldr	r1, [pc, #56]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800451a:	f000 f821 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 800451e:	4602      	mov	r2, r0
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	490a      	ldr	r1, [pc, #40]	; (8004554 <HAL_RCC_ClockConfig+0x1c0>)
 800452c:	5ccb      	ldrb	r3, [r1, r3]
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc fcc4 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40023c00 	.word	0x40023c00
 8004550:	40023800 	.word	0x40023800
 8004554:	0800b9a4 	.word	0x0800b9a4
 8004558:	20000008 	.word	0x20000008
 800455c:	2000000c 	.word	0x2000000c

08004560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b094      	sub	sp, #80	; 0x50
 8004566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	647b      	str	r3, [r7, #68]	; 0x44
 800456c:	2300      	movs	r3, #0
 800456e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004570:	2300      	movs	r3, #0
 8004572:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004578:	4b79      	ldr	r3, [pc, #484]	; (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d00d      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004584:	2b08      	cmp	r3, #8
 8004586:	f200 80e1 	bhi.w	800474c <HAL_RCC_GetSysClockFreq+0x1ec>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x34>
 800458e:	2b04      	cmp	r3, #4
 8004590:	d003      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0x3a>
 8004592:	e0db      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b73      	ldr	r3, [pc, #460]	; (8004764 <HAL_RCC_GetSysClockFreq+0x204>)
 8004596:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004598:	e0db      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800459a:	4b73      	ldr	r3, [pc, #460]	; (8004768 <HAL_RCC_GetSysClockFreq+0x208>)
 800459c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800459e:	e0d8      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a0:	4b6f      	ldr	r3, [pc, #444]	; (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045aa:	4b6d      	ldr	r3, [pc, #436]	; (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d063      	beq.n	800467e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b6:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	099b      	lsrs	r3, r3, #6
 80045bc:	2200      	movs	r2, #0
 80045be:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ca:	2300      	movs	r3, #0
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
 80045ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045d2:	4622      	mov	r2, r4
 80045d4:	462b      	mov	r3, r5
 80045d6:	f04f 0000 	mov.w	r0, #0
 80045da:	f04f 0100 	mov.w	r1, #0
 80045de:	0159      	lsls	r1, r3, #5
 80045e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e4:	0150      	lsls	r0, r2, #5
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4621      	mov	r1, r4
 80045ec:	1a51      	subs	r1, r2, r1
 80045ee:	6139      	str	r1, [r7, #16]
 80045f0:	4629      	mov	r1, r5
 80045f2:	eb63 0301 	sbc.w	r3, r3, r1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004604:	4659      	mov	r1, fp
 8004606:	018b      	lsls	r3, r1, #6
 8004608:	4651      	mov	r1, sl
 800460a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800460e:	4651      	mov	r1, sl
 8004610:	018a      	lsls	r2, r1, #6
 8004612:	4651      	mov	r1, sl
 8004614:	ebb2 0801 	subs.w	r8, r2, r1
 8004618:	4659      	mov	r1, fp
 800461a:	eb63 0901 	sbc.w	r9, r3, r1
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004632:	4690      	mov	r8, r2
 8004634:	4699      	mov	r9, r3
 8004636:	4623      	mov	r3, r4
 8004638:	eb18 0303 	adds.w	r3, r8, r3
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	462b      	mov	r3, r5
 8004640:	eb49 0303 	adc.w	r3, r9, r3
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004652:	4629      	mov	r1, r5
 8004654:	024b      	lsls	r3, r1, #9
 8004656:	4621      	mov	r1, r4
 8004658:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800465c:	4621      	mov	r1, r4
 800465e:	024a      	lsls	r2, r1, #9
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004666:	2200      	movs	r2, #0
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
 800466a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800466c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004670:	f7fb fdb6 	bl	80001e0 <__aeabi_uldivmod>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4613      	mov	r3, r2
 800467a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800467c:	e058      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467e:	4b38      	ldr	r3, [pc, #224]	; (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	099b      	lsrs	r3, r3, #6
 8004684:	2200      	movs	r2, #0
 8004686:	4618      	mov	r0, r3
 8004688:	4611      	mov	r1, r2
 800468a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	2300      	movs	r3, #0
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
 8004694:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004698:	4642      	mov	r2, r8
 800469a:	464b      	mov	r3, r9
 800469c:	f04f 0000 	mov.w	r0, #0
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	0159      	lsls	r1, r3, #5
 80046a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046aa:	0150      	lsls	r0, r2, #5
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4641      	mov	r1, r8
 80046b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80046b6:	4649      	mov	r1, r9
 80046b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046d0:	ebb2 040a 	subs.w	r4, r2, sl
 80046d4:	eb63 050b 	sbc.w	r5, r3, fp
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	00eb      	lsls	r3, r5, #3
 80046e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e6:	00e2      	lsls	r2, r4, #3
 80046e8:	4614      	mov	r4, r2
 80046ea:	461d      	mov	r5, r3
 80046ec:	4643      	mov	r3, r8
 80046ee:	18e3      	adds	r3, r4, r3
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	464b      	mov	r3, r9
 80046f4:	eb45 0303 	adc.w	r3, r5, r3
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004706:	4629      	mov	r1, r5
 8004708:	028b      	lsls	r3, r1, #10
 800470a:	4621      	mov	r1, r4
 800470c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004710:	4621      	mov	r1, r4
 8004712:	028a      	lsls	r2, r1, #10
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471a:	2200      	movs	r2, #0
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	61fa      	str	r2, [r7, #28]
 8004720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004724:	f7fb fd5c 	bl	80001e0 <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4613      	mov	r3, r2
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004740:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800474a:	e002      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetSysClockFreq+0x204>)
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004754:	4618      	mov	r0, r3
 8004756:	3750      	adds	r7, #80	; 0x50
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800
 8004764:	00f42400 	.word	0x00f42400
 8004768:	007a1200 	.word	0x007a1200

0800476c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000008 	.word	0x20000008

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004788:	f7ff fff0 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0a9b      	lsrs	r3, r3, #10
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4903      	ldr	r1, [pc, #12]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40023800 	.word	0x40023800
 80047a8:	0800b9b4 	.word	0x0800b9b4

080047ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047b0:	f7ff ffdc 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0b5b      	lsrs	r3, r3, #13
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4903      	ldr	r1, [pc, #12]	; (80047d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40023800 	.word	0x40023800
 80047d0:	0800b9b4 	.word	0x0800b9b4

080047d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	220f      	movs	r2, #15
 80047e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047e4:	4b12      	ldr	r3, [pc, #72]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0203 	and.w	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004808:	4b09      	ldr	r3, [pc, #36]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	08db      	lsrs	r3, r3, #3
 800480e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004816:	4b07      	ldr	r3, [pc, #28]	; (8004834 <HAL_RCC_GetClockConfig+0x60>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0207 	and.w	r2, r3, #7
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	601a      	str	r2, [r3, #0]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	40023c00 	.word	0x40023c00

08004838 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800485c:	2b00      	cmp	r3, #0
 800485e:	d035      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004860:	4b62      	ldr	r3, [pc, #392]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004866:	f7fc fc5d 	bl	8001124 <HAL_GetTick>
 800486a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800486e:	f7fc fc59 	bl	8001124 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e0b0      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004880:	4b5b      	ldr	r3, [pc, #364]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	019a      	lsls	r2, r3, #6
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	071b      	lsls	r3, r3, #28
 8004898:	4955      	ldr	r1, [pc, #340]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048a0:	4b52      	ldr	r3, [pc, #328]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048a6:	f7fc fc3d 	bl	8001124 <HAL_GetTick>
 80048aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ae:	f7fc fc39 	bl	8001124 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e090      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048c0:	4b4b      	ldr	r3, [pc, #300]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8083 	beq.w	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	4b44      	ldr	r3, [pc, #272]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	4a43      	ldr	r2, [pc, #268]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ea:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048f6:	4b3f      	ldr	r3, [pc, #252]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a3e      	ldr	r2, [pc, #248]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004900:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004902:	f7fc fc0f 	bl	8001124 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004908:	e008      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800490a:	f7fc fc0b 	bl	8001124 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e062      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800491c:	4b35      	ldr	r3, [pc, #212]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004928:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004930:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02f      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	429a      	cmp	r2, r3
 8004944:	d028      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004946:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004950:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004952:	2201      	movs	r2, #1
 8004954:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004956:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800495c:	4a24      	ldr	r2, [pc, #144]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004962:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b01      	cmp	r3, #1
 800496c:	d114      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800496e:	f7fc fbd9 	bl	8001124 <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004974:	e00a      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004976:	f7fc fbd5 	bl	8001124 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f241 3288 	movw	r2, #5000	; 0x1388
 8004984:	4293      	cmp	r3, r2
 8004986:	d901      	bls.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e02a      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498c:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0ee      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a4:	d10d      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ba:	490d      	ldr	r1, [pc, #52]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]
 80049c0:	e005      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049cc:	6093      	str	r3, [r2, #8]
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049da:	4905      	ldr	r1, [pc, #20]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	42470068 	.word	0x42470068
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40007000 	.word	0x40007000
 80049f8:	42470e40 	.word	0x42470e40

080049fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d13e      	bne.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a1a:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d12f      	bne.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a30:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a32:	617b      	str	r3, [r7, #20]
          break;
 8004a34:	e02f      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a36:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a42:	d108      	bne.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a44:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a4c:	4a18      	ldr	r2, [pc, #96]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	e007      	b.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a5e:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6c:	099b      	lsrs	r3, r3, #6
 8004a6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a80:	0f1b      	lsrs	r3, r3, #28
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]
          break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
          break;
 8004a94:	bf00      	nop
        }
      }
      break;
 8004a96:	bf00      	nop
    }
  }
  return frequency;
 8004a98:	697b      	ldr	r3, [r7, #20]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	00bb8000 	.word	0x00bb8000
 8004ab0:	007a1200 	.word	0x007a1200
 8004ab4:	00f42400 	.word	0x00f42400

08004ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07b      	b.n	8004bc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d108      	bne.n	8004ae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ada:	d009      	beq.n	8004af0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
 8004ae2:	e005      	b.n	8004af0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc f8e0 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	ea42 0103 	orr.w	r1, r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	f003 0104 	and.w	r1, r3, #4
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0210 	and.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e041      	b.n	8004c60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f839 	bl	8004c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 f9d7 	bl	8004fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d001      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e04e      	b.n	8004d32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d022      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x80>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d01d      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x80>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d018      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x80>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x80>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x80>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x80>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x80>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d111      	bne.n	8004d20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d010      	beq.n	8004d30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	e007      	b.n	8004d30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40001800 	.word	0x40001800

08004d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d122      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d11b      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0202 	mvn.w	r2, #2
 8004d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f8ee 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8e0 	bl	8004f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f8f1 	bl	8004f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0204 	mvn.w	r2, #4
 8004ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8c4 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8b6 	bl	8004f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f8c7 	bl	8004f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0208 	mvn.w	r2, #8
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2204      	movs	r2, #4
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f89a 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f88c 	bl	8004f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f89d 	bl	8004f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0210 	mvn.w	r2, #16
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f870 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f862 	bl	8004f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f873 	bl	8004f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10e      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d107      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0201 	mvn.w	r2, #1
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fb fdec 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b80      	cmp	r3, #128	; 0x80
 8004eec:	d10e      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d107      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f902 	bl	8005110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d10e      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d107      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f838 	bl	8004fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d10e      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d107      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0220 	mvn.w	r2, #32
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f8cc 	bl	80050fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a40      	ldr	r2, [pc, #256]	; (80050d0 <TIM_Base_SetConfig+0x114>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fda:	d00f      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a3d      	ldr	r2, [pc, #244]	; (80050d4 <TIM_Base_SetConfig+0x118>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <TIM_Base_SetConfig+0x11c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3b      	ldr	r2, [pc, #236]	; (80050dc <TIM_Base_SetConfig+0x120>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3a      	ldr	r2, [pc, #232]	; (80050e0 <TIM_Base_SetConfig+0x124>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2f      	ldr	r2, [pc, #188]	; (80050d0 <TIM_Base_SetConfig+0x114>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d02b      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d027      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <TIM_Base_SetConfig+0x118>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d023      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2b      	ldr	r2, [pc, #172]	; (80050d8 <TIM_Base_SetConfig+0x11c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01f      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <TIM_Base_SetConfig+0x120>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01b      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a29      	ldr	r2, [pc, #164]	; (80050e0 <TIM_Base_SetConfig+0x124>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d017      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a28      	ldr	r2, [pc, #160]	; (80050e4 <TIM_Base_SetConfig+0x128>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a27      	ldr	r2, [pc, #156]	; (80050e8 <TIM_Base_SetConfig+0x12c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a26      	ldr	r2, [pc, #152]	; (80050ec <TIM_Base_SetConfig+0x130>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a25      	ldr	r2, [pc, #148]	; (80050f0 <TIM_Base_SetConfig+0x134>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a24      	ldr	r2, [pc, #144]	; (80050f4 <TIM_Base_SetConfig+0x138>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a23      	ldr	r2, [pc, #140]	; (80050f8 <TIM_Base_SetConfig+0x13c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d108      	bne.n	8005080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <TIM_Base_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_Base_SetConfig+0xf8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0c      	ldr	r2, [pc, #48]	; (80050e0 <TIM_Base_SetConfig+0x124>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d103      	bne.n	80050bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	615a      	str	r2, [r3, #20]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800
 80050f0:	40001800 	.word	0x40001800
 80050f4:	40001c00 	.word	0x40001c00
 80050f8:	40002000 	.word	0x40002000

080050fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e03f      	b.n	80051b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fb fe08 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2224      	movs	r2, #36	; 0x24
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fc7b 	bl	8005a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800517c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800518c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800519c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b0ba      	sub	sp, #232	; 0xe8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_UART_IRQHandler+0x66>
 8005212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fb65 	bl	80058ee <UART_Receive_IT>
      return;
 8005224:	e256      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 80de 	beq.w	80053ec <HAL_UART_IRQHandler+0x22c>
 8005230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005240:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80d1 	beq.w	80053ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_UART_IRQHandler+0xae>
 8005256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0201 	orr.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_UART_IRQHandler+0xd2>
 800527a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0202 	orr.w	r2, r3, #2
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <HAL_UART_IRQHandler+0xf6>
 800529e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f043 0204 	orr.w	r2, r3, #4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d011      	beq.n	80052e6 <HAL_UART_IRQHandler+0x126>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f043 0208 	orr.w	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 81ed 	beq.w	80056ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_UART_IRQHandler+0x14e>
 80052fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 faf0 	bl	80058ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d103      	bne.n	800533a <HAL_UART_IRQHandler+0x17a>
 8005332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d04f      	beq.n	80053da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9f8 	bl	8005730 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d141      	bne.n	80053d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3314      	adds	r3, #20
 8005376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800537a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800537e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1d9      	bne.n	800534e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	4a7d      	ldr	r2, [pc, #500]	; (800559c <HAL_UART_IRQHandler+0x3dc>)
 80053a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fc f8e8 	bl	8001584 <HAL_DMA_Abort_IT>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d016      	beq.n	80053e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053c4:	4610      	mov	r0, r2
 80053c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c8:	e00e      	b.n	80053e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f99a 	bl	8005704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d0:	e00a      	b.n	80053e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f996 	bl	8005704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	e006      	b.n	80053e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f992 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053e6:	e170      	b.n	80056ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	bf00      	nop
    return;
 80053ea:	e16e      	b.n	80056ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	f040 814a 	bne.w	800568a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8143 	beq.w	800568a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 813c 	beq.w	800568a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b40      	cmp	r3, #64	; 0x40
 8005434:	f040 80b4 	bne.w	80055a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8140 	beq.w	80056ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005456:	429a      	cmp	r2, r3
 8005458:	f080 8139 	bcs.w	80056ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005462:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546e:	f000 8088 	beq.w	8005582 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800548c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800549e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1d9      	bne.n	8005472 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3314      	adds	r3, #20
 80054c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e1      	bne.n	80054be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3314      	adds	r3, #20
 8005500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800550a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3314      	adds	r3, #20
 800551a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800551e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800552c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e3      	bne.n	80054fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005552:	f023 0310 	bic.w	r3, r3, #16
 8005556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005564:	65ba      	str	r2, [r7, #88]	; 0x58
 8005566:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800556a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e3      	bne.n	8005540 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	4618      	mov	r0, r3
 800557e:	f7fb ff91 	bl	80014a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800558a:	b29b      	uxth	r3, r3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	b29b      	uxth	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8c0 	bl	8005718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005598:	e099      	b.n	80056ce <HAL_UART_IRQHandler+0x50e>
 800559a:	bf00      	nop
 800559c:	080057f7 	.word	0x080057f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 808b 	beq.w	80056d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80055bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8086 	beq.w	80056d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055ea:	647a      	str	r2, [r7, #68]	; 0x44
 80055ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e3      	bne.n	80055c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3314      	adds	r3, #20
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	623b      	str	r3, [r7, #32]
   return(result);
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005622:	633a      	str	r2, [r7, #48]	; 0x30
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e3      	bne.n	80055fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	60fb      	str	r3, [r7, #12]
   return(result);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0310 	bic.w	r3, r3, #16
 800565a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005668:	61fa      	str	r2, [r7, #28]
 800566a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	69b9      	ldr	r1, [r7, #24]
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	617b      	str	r3, [r7, #20]
   return(result);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e3      	bne.n	8005644 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800567c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f848 	bl	8005718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005688:	e023      	b.n	80056d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_UART_IRQHandler+0x4ea>
 8005696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8bb 	bl	800581e <UART_Transmit_IT>
    return;
 80056a8:	e014      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <HAL_UART_IRQHandler+0x514>
 80056b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8fb 	bl	80058be <UART_EndTransmit_IT>
    return;
 80056c8:	e004      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
    return;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
      return;
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
      return;
 80056d2:	bf00      	nop
  }
}
 80056d4:	37e8      	adds	r7, #232	; 0xe8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop

080056dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b095      	sub	sp, #84	; 0x54
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005758:	643a      	str	r2, [r7, #64]	; 0x40
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800575e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3314      	adds	r3, #20
 8005772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	61fb      	str	r3, [r7, #28]
   return(result);
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	64bb      	str	r3, [r7, #72]	; 0x48
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800578c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e5      	bne.n	800576c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d119      	bne.n	80057dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f023 0310 	bic.w	r3, r3, #16
 80057be:	647b      	str	r3, [r7, #68]	; 0x44
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057c8:	61ba      	str	r2, [r7, #24]
 80057ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6979      	ldr	r1, [r7, #20]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	613b      	str	r3, [r7, #16]
   return(result);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057ea:	bf00      	nop
 80057ec:	3754      	adds	r7, #84	; 0x54
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff ff77 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b21      	cmp	r3, #33	; 0x21
 8005830:	d13e      	bne.n	80058b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583a:	d114      	bne.n	8005866 <UART_Transmit_IT+0x48>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d110      	bne.n	8005866 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005858:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	1c9a      	adds	r2, r3, #2
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	621a      	str	r2, [r3, #32]
 8005864:	e008      	b.n	8005878 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6211      	str	r1, [r2, #32]
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29b      	uxth	r3, r3
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4619      	mov	r1, r3
 8005886:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10f      	bne.n	80058ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800589a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e000      	b.n	80058b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fefc 	bl	80056dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b08c      	sub	sp, #48	; 0x30
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b22      	cmp	r3, #34	; 0x22
 8005900:	f040 80ab 	bne.w	8005a5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590c:	d117      	bne.n	800593e <UART_Receive_IT+0x50>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d113      	bne.n	800593e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592c:	b29a      	uxth	r2, r3
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	; 0x28
 800593c:	e026      	b.n	800598c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005950:	d007      	beq.n	8005962 <UART_Receive_IT+0x74>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <UART_Receive_IT+0x82>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	b2da      	uxtb	r2, r3
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	e008      	b.n	8005982 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597c:	b2da      	uxtb	r2, r3
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29b      	uxth	r3, r3
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	4619      	mov	r1, r3
 800599a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800599c:	2b00      	cmp	r3, #0
 800599e:	d15a      	bne.n	8005a56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0220 	bic.w	r2, r2, #32
 80059ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0201 	bic.w	r2, r2, #1
 80059ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d135      	bne.n	8005a4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	613b      	str	r3, [r7, #16]
   return(result);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f023 0310 	bic.w	r3, r3, #16
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	623a      	str	r2, [r7, #32]
 8005a08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	69f9      	ldr	r1, [r7, #28]
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e5      	bne.n	80059e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d10a      	bne.n	8005a3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff fe67 	bl	8005718 <HAL_UARTEx_RxEventCallback>
 8005a4a:	e002      	b.n	8005a52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fe4f 	bl	80056f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e002      	b.n	8005a5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e000      	b.n	8005a5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a5a:	2302      	movs	r3, #2
  }
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3730      	adds	r7, #48	; 0x30
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a68:	b0c0      	sub	sp, #256	; 0x100
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	68d9      	ldr	r1, [r3, #12]
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	ea40 0301 	orr.w	r3, r0, r1
 8005a8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005abc:	f021 010c 	bic.w	r1, r1, #12
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aca:	430b      	orrs	r3, r1
 8005acc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ade:	6999      	ldr	r1, [r3, #24]
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	ea40 0301 	orr.w	r3, r0, r1
 8005aea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b8f      	ldr	r3, [pc, #572]	; (8005d30 <UART_SetConfig+0x2cc>)
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d005      	beq.n	8005b04 <UART_SetConfig+0xa0>
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b8d      	ldr	r3, [pc, #564]	; (8005d34 <UART_SetConfig+0x2d0>)
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d104      	bne.n	8005b0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b04:	f7fe fe52 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8005b08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b0c:	e003      	b.n	8005b16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b0e:	f7fe fe39 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8005b12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b20:	f040 810c 	bne.w	8005d3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b36:	4622      	mov	r2, r4
 8005b38:	462b      	mov	r3, r5
 8005b3a:	1891      	adds	r1, r2, r2
 8005b3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b3e:	415b      	adcs	r3, r3
 8005b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b46:	4621      	mov	r1, r4
 8005b48:	eb12 0801 	adds.w	r8, r2, r1
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	eb43 0901 	adc.w	r9, r3, r1
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b66:	4690      	mov	r8, r2
 8005b68:	4699      	mov	r9, r3
 8005b6a:	4623      	mov	r3, r4
 8005b6c:	eb18 0303 	adds.w	r3, r8, r3
 8005b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b74:	462b      	mov	r3, r5
 8005b76:	eb49 0303 	adc.w	r3, r9, r3
 8005b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b92:	460b      	mov	r3, r1
 8005b94:	18db      	adds	r3, r3, r3
 8005b96:	653b      	str	r3, [r7, #80]	; 0x50
 8005b98:	4613      	mov	r3, r2
 8005b9a:	eb42 0303 	adc.w	r3, r2, r3
 8005b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8005ba0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ba4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ba8:	f7fa fb1a 	bl	80001e0 <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4b61      	ldr	r3, [pc, #388]	; (8005d38 <UART_SetConfig+0x2d4>)
 8005bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	011c      	lsls	r4, r3, #4
 8005bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bcc:	4642      	mov	r2, r8
 8005bce:	464b      	mov	r3, r9
 8005bd0:	1891      	adds	r1, r2, r2
 8005bd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bd4:	415b      	adcs	r3, r3
 8005bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bdc:	4641      	mov	r1, r8
 8005bde:	eb12 0a01 	adds.w	sl, r2, r1
 8005be2:	4649      	mov	r1, r9
 8005be4:	eb43 0b01 	adc.w	fp, r3, r1
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bfc:	4692      	mov	sl, r2
 8005bfe:	469b      	mov	fp, r3
 8005c00:	4643      	mov	r3, r8
 8005c02:	eb1a 0303 	adds.w	r3, sl, r3
 8005c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	18db      	adds	r3, r3, r3
 8005c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c2e:	4613      	mov	r3, r2
 8005c30:	eb42 0303 	adc.w	r3, r2, r3
 8005c34:	647b      	str	r3, [r7, #68]	; 0x44
 8005c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c3e:	f7fa facf 	bl	80001e0 <__aeabi_uldivmod>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <UART_SetConfig+0x2d4>)
 8005c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	2264      	movs	r2, #100	; 0x64
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	1acb      	subs	r3, r1, r3
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <UART_SetConfig+0x2d4>)
 8005c60:	fba3 2302 	umull	r2, r3, r3, r2
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c6c:	441c      	add	r4, r3
 8005c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	1891      	adds	r1, r2, r2
 8005c86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c88:	415b      	adcs	r3, r3
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c90:	4641      	mov	r1, r8
 8005c92:	1851      	adds	r1, r2, r1
 8005c94:	6339      	str	r1, [r7, #48]	; 0x30
 8005c96:	4649      	mov	r1, r9
 8005c98:	414b      	adcs	r3, r1
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ca8:	4659      	mov	r1, fp
 8005caa:	00cb      	lsls	r3, r1, #3
 8005cac:	4651      	mov	r1, sl
 8005cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	00ca      	lsls	r2, r1, #3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	189b      	adds	r3, r3, r2
 8005cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	460a      	mov	r2, r1
 8005cc8:	eb42 0303 	adc.w	r3, r2, r3
 8005ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ce0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	18db      	adds	r3, r3, r3
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cea:	4613      	mov	r3, r2
 8005cec:	eb42 0303 	adc.w	r3, r2, r3
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cfa:	f7fa fa71 	bl	80001e0 <__aeabi_uldivmod>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <UART_SetConfig+0x2d4>)
 8005d04:	fba3 1302 	umull	r1, r3, r3, r2
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	2164      	movs	r1, #100	; 0x64
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	3332      	adds	r3, #50	; 0x32
 8005d16:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <UART_SetConfig+0x2d4>)
 8005d18:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	f003 0207 	and.w	r2, r3, #7
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4422      	add	r2, r4
 8005d2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d2c:	e105      	b.n	8005f3a <UART_SetConfig+0x4d6>
 8005d2e:	bf00      	nop
 8005d30:	40011000 	.word	0x40011000
 8005d34:	40011400 	.word	0x40011400
 8005d38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d4e:	4642      	mov	r2, r8
 8005d50:	464b      	mov	r3, r9
 8005d52:	1891      	adds	r1, r2, r2
 8005d54:	6239      	str	r1, [r7, #32]
 8005d56:	415b      	adcs	r3, r3
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d5e:	4641      	mov	r1, r8
 8005d60:	1854      	adds	r4, r2, r1
 8005d62:	4649      	mov	r1, r9
 8005d64:	eb43 0501 	adc.w	r5, r3, r1
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	00eb      	lsls	r3, r5, #3
 8005d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d76:	00e2      	lsls	r2, r4, #3
 8005d78:	4614      	mov	r4, r2
 8005d7a:	461d      	mov	r5, r3
 8005d7c:	4643      	mov	r3, r8
 8005d7e:	18e3      	adds	r3, r4, r3
 8005d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d84:	464b      	mov	r3, r9
 8005d86:	eb45 0303 	adc.w	r3, r5, r3
 8005d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005daa:	4629      	mov	r1, r5
 8005dac:	008b      	lsls	r3, r1, #2
 8005dae:	4621      	mov	r1, r4
 8005db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db4:	4621      	mov	r1, r4
 8005db6:	008a      	lsls	r2, r1, #2
 8005db8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005dbc:	f7fa fa10 	bl	80001e0 <__aeabi_uldivmod>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4b60      	ldr	r3, [pc, #384]	; (8005f48 <UART_SetConfig+0x4e4>)
 8005dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	011c      	lsls	r4, r3, #4
 8005dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ddc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005de0:	4642      	mov	r2, r8
 8005de2:	464b      	mov	r3, r9
 8005de4:	1891      	adds	r1, r2, r2
 8005de6:	61b9      	str	r1, [r7, #24]
 8005de8:	415b      	adcs	r3, r3
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005df0:	4641      	mov	r1, r8
 8005df2:	1851      	adds	r1, r2, r1
 8005df4:	6139      	str	r1, [r7, #16]
 8005df6:	4649      	mov	r1, r9
 8005df8:	414b      	adcs	r3, r1
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e08:	4659      	mov	r1, fp
 8005e0a:	00cb      	lsls	r3, r1, #3
 8005e0c:	4651      	mov	r1, sl
 8005e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e12:	4651      	mov	r1, sl
 8005e14:	00ca      	lsls	r2, r1, #3
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e24:	464b      	mov	r3, r9
 8005e26:	460a      	mov	r2, r1
 8005e28:	eb42 0303 	adc.w	r3, r2, r3
 8005e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e48:	4649      	mov	r1, r9
 8005e4a:	008b      	lsls	r3, r1, #2
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e52:	4641      	mov	r1, r8
 8005e54:	008a      	lsls	r2, r1, #2
 8005e56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e5a:	f7fa f9c1 	bl	80001e0 <__aeabi_uldivmod>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4b39      	ldr	r3, [pc, #228]	; (8005f48 <UART_SetConfig+0x4e4>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	2164      	movs	r1, #100	; 0x64
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	3332      	adds	r3, #50	; 0x32
 8005e76:	4a34      	ldr	r2, [pc, #208]	; (8005f48 <UART_SetConfig+0x4e4>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e82:	441c      	add	r4, r3
 8005e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e88:	2200      	movs	r2, #0
 8005e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e8c:	677a      	str	r2, [r7, #116]	; 0x74
 8005e8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e92:	4642      	mov	r2, r8
 8005e94:	464b      	mov	r3, r9
 8005e96:	1891      	adds	r1, r2, r2
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	415b      	adcs	r3, r3
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ea2:	4641      	mov	r1, r8
 8005ea4:	1851      	adds	r1, r2, r1
 8005ea6:	6039      	str	r1, [r7, #0]
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	414b      	adcs	r3, r1
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005eba:	4659      	mov	r1, fp
 8005ebc:	00cb      	lsls	r3, r1, #3
 8005ebe:	4651      	mov	r1, sl
 8005ec0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ec4:	4651      	mov	r1, sl
 8005ec6:	00ca      	lsls	r2, r1, #3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4603      	mov	r3, r0
 8005ece:	4642      	mov	r2, r8
 8005ed0:	189b      	adds	r3, r3, r2
 8005ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ed4:	464b      	mov	r3, r9
 8005ed6:	460a      	mov	r2, r1
 8005ed8:	eb42 0303 	adc.w	r3, r2, r3
 8005edc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ee8:	667a      	str	r2, [r7, #100]	; 0x64
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	008b      	lsls	r3, r1, #2
 8005efa:	4641      	mov	r1, r8
 8005efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f00:	4641      	mov	r1, r8
 8005f02:	008a      	lsls	r2, r1, #2
 8005f04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f08:	f7fa f96a 	bl	80001e0 <__aeabi_uldivmod>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <UART_SetConfig+0x4e4>)
 8005f12:	fba3 1302 	umull	r1, r3, r3, r2
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	2164      	movs	r1, #100	; 0x64
 8005f1a:	fb01 f303 	mul.w	r3, r1, r3
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	3332      	adds	r3, #50	; 0x32
 8005f24:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <UART_SetConfig+0x4e4>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	f003 020f 	and.w	r2, r3, #15
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4422      	add	r2, r4
 8005f38:	609a      	str	r2, [r3, #8]
}
 8005f3a:	bf00      	nop
 8005f3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f40:	46bd      	mov	sp, r7
 8005f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f46:	bf00      	nop
 8005f48:	51eb851f 	.word	0x51eb851f

08005f4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	f107 001c 	add.w	r0, r7, #28
 8005f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d122      	bne.n	8005faa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d105      	bne.n	8005f9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 fbee 	bl	8007780 <USB_CoreReset>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]
 8005fa8:	e01a      	b.n	8005fe0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fbe2 	bl	8007780 <USB_CoreReset>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
 8005fd2:	e005      	b.n	8005fe0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d10b      	bne.n	8005ffe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f043 0206 	orr.w	r2, r3, #6
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800600a:	b004      	add	sp, #16
 800600c:	4770      	bx	lr
	...

08006010 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d165      	bne.n	80060f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4a41      	ldr	r2, [pc, #260]	; (800612c <USB_SetTurnaroundTime+0x11c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d906      	bls.n	800603a <USB_SetTurnaroundTime+0x2a>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4a40      	ldr	r2, [pc, #256]	; (8006130 <USB_SetTurnaroundTime+0x120>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d202      	bcs.n	800603a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006034:	230f      	movs	r3, #15
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e062      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4a3c      	ldr	r2, [pc, #240]	; (8006130 <USB_SetTurnaroundTime+0x120>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d306      	bcc.n	8006050 <USB_SetTurnaroundTime+0x40>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4a3b      	ldr	r2, [pc, #236]	; (8006134 <USB_SetTurnaroundTime+0x124>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d202      	bcs.n	8006050 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800604a:	230e      	movs	r3, #14
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e057      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a38      	ldr	r2, [pc, #224]	; (8006134 <USB_SetTurnaroundTime+0x124>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d306      	bcc.n	8006066 <USB_SetTurnaroundTime+0x56>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4a37      	ldr	r2, [pc, #220]	; (8006138 <USB_SetTurnaroundTime+0x128>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d202      	bcs.n	8006066 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006060:	230d      	movs	r3, #13
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	e04c      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4a33      	ldr	r2, [pc, #204]	; (8006138 <USB_SetTurnaroundTime+0x128>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d306      	bcc.n	800607c <USB_SetTurnaroundTime+0x6c>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4a32      	ldr	r2, [pc, #200]	; (800613c <USB_SetTurnaroundTime+0x12c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d802      	bhi.n	800607c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006076:	230c      	movs	r3, #12
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e041      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4a2f      	ldr	r2, [pc, #188]	; (800613c <USB_SetTurnaroundTime+0x12c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d906      	bls.n	8006092 <USB_SetTurnaroundTime+0x82>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4a2e      	ldr	r2, [pc, #184]	; (8006140 <USB_SetTurnaroundTime+0x130>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d802      	bhi.n	8006092 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800608c:	230b      	movs	r3, #11
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	e036      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <USB_SetTurnaroundTime+0x130>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d906      	bls.n	80060a8 <USB_SetTurnaroundTime+0x98>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4a29      	ldr	r2, [pc, #164]	; (8006144 <USB_SetTurnaroundTime+0x134>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d802      	bhi.n	80060a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80060a2:	230a      	movs	r3, #10
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	e02b      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4a26      	ldr	r2, [pc, #152]	; (8006144 <USB_SetTurnaroundTime+0x134>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d906      	bls.n	80060be <USB_SetTurnaroundTime+0xae>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4a25      	ldr	r2, [pc, #148]	; (8006148 <USB_SetTurnaroundTime+0x138>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d202      	bcs.n	80060be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060b8:	2309      	movs	r3, #9
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e020      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4a21      	ldr	r2, [pc, #132]	; (8006148 <USB_SetTurnaroundTime+0x138>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d306      	bcc.n	80060d4 <USB_SetTurnaroundTime+0xc4>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4a20      	ldr	r2, [pc, #128]	; (800614c <USB_SetTurnaroundTime+0x13c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d802      	bhi.n	80060d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060ce:	2308      	movs	r3, #8
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e015      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4a1d      	ldr	r2, [pc, #116]	; (800614c <USB_SetTurnaroundTime+0x13c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d906      	bls.n	80060ea <USB_SetTurnaroundTime+0xda>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <USB_SetTurnaroundTime+0x140>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d202      	bcs.n	80060ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80060e4:	2307      	movs	r3, #7
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e00a      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80060ea:	2306      	movs	r3, #6
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e007      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80060f0:	79fb      	ldrb	r3, [r7, #7]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80060f6:	2309      	movs	r3, #9
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	e001      	b.n	8006100 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80060fc:	2309      	movs	r3, #9
 80060fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	029b      	lsls	r3, r3, #10
 8006114:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006118:	431a      	orrs	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	371c      	adds	r7, #28
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	00d8acbf 	.word	0x00d8acbf
 8006130:	00e4e1c0 	.word	0x00e4e1c0
 8006134:	00f42400 	.word	0x00f42400
 8006138:	01067380 	.word	0x01067380
 800613c:	011a499f 	.word	0x011a499f
 8006140:	01312cff 	.word	0x01312cff
 8006144:	014ca43f 	.word	0x014ca43f
 8006148:	016e3600 	.word	0x016e3600
 800614c:	01a6ab1f 	.word	0x01a6ab1f
 8006150:	01e84800 	.word	0x01e84800

08006154 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f043 0201 	orr.w	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f023 0201 	bic.w	r2, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d115      	bne.n	80061e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061c6:	2001      	movs	r0, #1
 80061c8:	f7fa ffb8 	bl	800113c <HAL_Delay>
      ms++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fa45 	bl	8007662 <USB_GetMode>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d01e      	beq.n	800621c <USB_SetCurrentMode+0x84>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b31      	cmp	r3, #49	; 0x31
 80061e2:	d9f0      	bls.n	80061c6 <USB_SetCurrentMode+0x2e>
 80061e4:	e01a      	b.n	800621c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d115      	bne.n	8006218 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061f8:	2001      	movs	r0, #1
 80061fa:	f7fa ff9f 	bl	800113c <HAL_Delay>
      ms++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 fa2c 	bl	8007662 <USB_GetMode>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <USB_SetCurrentMode+0x84>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b31      	cmp	r3, #49	; 0x31
 8006214:	d9f0      	bls.n	80061f8 <USB_SetCurrentMode+0x60>
 8006216:	e001      	b.n	800621c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e005      	b.n	8006228 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b32      	cmp	r3, #50	; 0x32
 8006220:	d101      	bne.n	8006226 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006230:	b084      	sub	sp, #16
 8006232:	b580      	push	{r7, lr}
 8006234:	b086      	sub	sp, #24
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800623e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	e009      	b.n	8006264 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	3340      	adds	r3, #64	; 0x40
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	2200      	movs	r2, #0
 800625c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	3301      	adds	r3, #1
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b0e      	cmp	r3, #14
 8006268:	d9f2      	bls.n	8006250 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800626a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11c      	bne.n	80062aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627e:	f043 0302 	orr.w	r3, r3, #2
 8006282:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38
 80062a8:	e00b      	b.n	80062c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062c8:	461a      	mov	r2, r3
 80062ca:	2300      	movs	r3, #0
 80062cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	4619      	mov	r1, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062dc:	461a      	mov	r2, r3
 80062de:	680b      	ldr	r3, [r1, #0]
 80062e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d10c      	bne.n	8006302 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062ee:	2100      	movs	r1, #0
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f965 	bl	80065c0 <USB_SetDevSpeed>
 80062f6:	e008      	b.n	800630a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062f8:	2101      	movs	r1, #1
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f960 	bl	80065c0 <USB_SetDevSpeed>
 8006300:	e003      	b.n	800630a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006302:	2103      	movs	r1, #3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f95b 	bl	80065c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800630a:	2110      	movs	r1, #16
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8f3 	bl	80064f8 <USB_FlushTxFifo>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f91f 	bl	8006560 <USB_FlushRxFifo>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	461a      	mov	r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633e:	461a      	mov	r2, r3
 8006340:	2300      	movs	r3, #0
 8006342:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634a:	461a      	mov	r2, r3
 800634c:	2300      	movs	r3, #0
 800634e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006350:	2300      	movs	r3, #0
 8006352:	613b      	str	r3, [r7, #16]
 8006354:	e043      	b.n	80063de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800636c:	d118      	bne.n	80063a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	461a      	mov	r2, r3
 8006382:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e013      	b.n	80063b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006396:	461a      	mov	r2, r3
 8006398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	e008      	b.n	80063b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ac:	461a      	mov	r2, r3
 80063ae:	2300      	movs	r3, #0
 80063b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	461a      	mov	r2, r3
 80063c0:	2300      	movs	r3, #0
 80063c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d0:	461a      	mov	r2, r3
 80063d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	3301      	adds	r3, #1
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d3b7      	bcc.n	8006356 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	e043      	b.n	8006474 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006402:	d118      	bne.n	8006436 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	461a      	mov	r2, r3
 8006418:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	e013      	b.n	8006448 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642c:	461a      	mov	r2, r3
 800642e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	e008      	b.n	8006448 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	461a      	mov	r2, r3
 8006444:	2300      	movs	r3, #0
 8006446:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006454:	461a      	mov	r2, r3
 8006456:	2300      	movs	r3, #0
 8006458:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	461a      	mov	r2, r3
 8006468:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800646c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	3301      	adds	r3, #1
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	429a      	cmp	r2, r3
 800647a:	d3b7      	bcc.n	80063ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800648a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800648e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800649c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	f043 0210 	orr.w	r2, r3, #16
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <USB_DevInit+0x2c4>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	f043 0208 	orr.w	r2, r3, #8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d107      	bne.n	80064e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064dc:	f043 0304 	orr.w	r3, r3, #4
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f0:	b004      	add	sp, #16
 80064f2:	4770      	bx	lr
 80064f4:	803c3800 	.word	0x803c3800

080064f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3301      	adds	r3, #1
 800650a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <USB_FlushTxFifo+0x64>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d901      	bls.n	8006518 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e01b      	b.n	8006550 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	daf2      	bge.n	8006506 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	019b      	lsls	r3, r3, #6
 8006528:	f043 0220 	orr.w	r2, r3, #32
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3301      	adds	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a08      	ldr	r2, [pc, #32]	; (800655c <USB_FlushTxFifo+0x64>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e006      	b.n	8006550 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b20      	cmp	r3, #32
 800654c:	d0f0      	beq.n	8006530 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	00030d40 	.word	0x00030d40

08006560 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3301      	adds	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a11      	ldr	r2, [pc, #68]	; (80065bc <USB_FlushRxFifo+0x5c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e018      	b.n	80065b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	daf2      	bge.n	800656c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2210      	movs	r2, #16
 800658e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4a08      	ldr	r2, [pc, #32]	; (80065bc <USB_FlushRxFifo+0x5c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e006      	b.n	80065b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0310 	and.w	r3, r3, #16
 80065aa:	2b10      	cmp	r3, #16
 80065ac:	d0f0      	beq.n	8006590 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	00030d40 	.word	0x00030d40

080065c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	68f9      	ldr	r1, [r7, #12]
 80065dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065e0:	4313      	orrs	r3, r2
 80065e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b087      	sub	sp, #28
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 0306 	and.w	r3, r3, #6
 800660a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d102      	bne.n	8006618 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006612:	2300      	movs	r3, #0
 8006614:	75fb      	strb	r3, [r7, #23]
 8006616:	e00a      	b.n	800662e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d002      	beq.n	8006624 <USB_GetDevSpeed+0x32>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b06      	cmp	r3, #6
 8006622:	d102      	bne.n	800662a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006624:	2302      	movs	r3, #2
 8006626:	75fb      	strb	r3, [r7, #23]
 8006628:	e001      	b.n	800662e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800662a:	230f      	movs	r3, #15
 800662c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006630:	4618      	mov	r0, r3
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d13a      	bne.n	80066ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	2101      	movs	r1, #1
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	b29b      	uxth	r3, r3
 8006670:	68f9      	ldr	r1, [r7, #12]
 8006672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006676:	4313      	orrs	r3, r2
 8006678:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d155      	bne.n	800673c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	791b      	ldrb	r3, [r3, #4]
 80066aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	059b      	lsls	r3, r3, #22
 80066b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066b4:	4313      	orrs	r3, r2
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	e036      	b.n	800673c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	2101      	movs	r1, #1
 80066e0:	fa01 f303 	lsl.w	r3, r1, r3
 80066e4:	041b      	lsls	r3, r3, #16
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d11a      	bne.n	800673c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	791b      	ldrb	r3, [r3, #4]
 8006720:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006722:	430b      	orrs	r3, r1
 8006724:	4313      	orrs	r3, r2
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	440a      	add	r2, r1
 800672e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800673a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d161      	bne.n	800682c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800677e:	d11f      	bne.n	80067c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800679e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	2101      	movs	r1, #1
 80067d2:	fa01 f303 	lsl.w	r3, r1, r3
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	43db      	mvns	r3, r3
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067e0:	4013      	ands	r3, r2
 80067e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	2101      	movs	r1, #1
 80067f6:	fa01 f303 	lsl.w	r3, r1, r3
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	43db      	mvns	r3, r3
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006804:	4013      	ands	r3, r2
 8006806:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	0159      	lsls	r1, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	440b      	add	r3, r1
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	4619      	mov	r1, r3
 8006824:	4b35      	ldr	r3, [pc, #212]	; (80068fc <USB_DeactivateEndpoint+0x1b0>)
 8006826:	4013      	ands	r3, r2
 8006828:	600b      	str	r3, [r1, #0]
 800682a:	e060      	b.n	80068ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800683e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006842:	d11f      	bne.n	8006884 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800685e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006862:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006882:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	2101      	movs	r1, #1
 8006896:	fa01 f303 	lsl.w	r3, r1, r3
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	43db      	mvns	r3, r3
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a4:	4013      	ands	r3, r2
 80068a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ae:	69da      	ldr	r2, [r3, #28]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	2101      	movs	r1, #1
 80068ba:	fa01 f303 	lsl.w	r3, r1, r3
 80068be:	041b      	lsls	r3, r3, #16
 80068c0:	43db      	mvns	r3, r3
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c8:	4013      	ands	r3, r2
 80068ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	0159      	lsls	r1, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	440b      	add	r3, r1
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	4619      	mov	r1, r3
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <USB_DeactivateEndpoint+0x1b4>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	ec337800 	.word	0xec337800
 8006900:	eff37800 	.word	0xeff37800

08006904 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	4613      	mov	r3, r2
 8006910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b01      	cmp	r3, #1
 8006922:	f040 815c 	bne.w	8006bde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d132      	bne.n	8006994 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006948:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800694c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698c:	0cdb      	lsrs	r3, r3, #19
 800698e:	04db      	lsls	r3, r3, #19
 8006990:	6113      	str	r3, [r2, #16]
 8006992:	e074      	b.n	8006a7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ae:	0cdb      	lsrs	r3, r3, #19
 80069b0:	04db      	lsls	r3, r3, #19
 80069b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	0151      	lsls	r1, r2, #5
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	440a      	add	r2, r1
 80069ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6999      	ldr	r1, [r3, #24]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	440b      	add	r3, r1
 80069f0:	1e59      	subs	r1, r3, #1
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80069fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80069fc:	4b9d      	ldr	r3, [pc, #628]	; (8006c74 <USB_EPStartXfer+0x370>)
 80069fe:	400b      	ands	r3, r1
 8006a00:	69b9      	ldr	r1, [r7, #24]
 8006a02:	0148      	lsls	r0, r1, #5
 8006a04:	69f9      	ldr	r1, [r7, #28]
 8006a06:	4401      	add	r1, r0
 8006a08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a26:	69b9      	ldr	r1, [r7, #24]
 8006a28:	0148      	lsls	r0, r1, #5
 8006a2a:	69f9      	ldr	r1, [r7, #28]
 8006a2c:	4401      	add	r1, r0
 8006a2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a32:	4313      	orrs	r3, r2
 8006a34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	791b      	ldrb	r3, [r3, #4]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d11f      	bne.n	8006a7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006a5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d14b      	bne.n	8006b1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d009      	beq.n	8006aa0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a98:	461a      	mov	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	791b      	ldrb	r3, [r3, #4]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d128      	bne.n	8006afa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d110      	bne.n	8006ada <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	e00f      	b.n	8006afa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e133      	b.n	8006d84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	791b      	ldrb	r3, [r3, #4]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d015      	beq.n	8006b70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 811b 	beq.w	8006d84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	2101      	movs	r1, #1
 8006b60:	fa01 f303 	lsl.w	r3, r1, r3
 8006b64:	69f9      	ldr	r1, [r7, #28]
 8006b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	634b      	str	r3, [r1, #52]	; 0x34
 8006b6e:	e109      	b.n	8006d84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d110      	bne.n	8006ba2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	e00f      	b.n	8006bc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	6919      	ldr	r1, [r3, #16]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	b298      	uxth	r0, r3
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 fade 	bl	8007198 <USB_WritePacket>
 8006bdc:	e0d2      	b.n	8006d84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf8:	0cdb      	lsrs	r3, r3, #19
 8006bfa:	04db      	lsls	r3, r3, #19
 8006bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d126      	bne.n	8006c78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c40:	69b9      	ldr	r1, [r7, #24]
 8006c42:	0148      	lsls	r0, r1, #5
 8006c44:	69f9      	ldr	r1, [r7, #28]
 8006c46:	4401      	add	r1, r0
 8006c48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c6e:	6113      	str	r3, [r2, #16]
 8006c70:	e03a      	b.n	8006ce8 <USB_EPStartXfer+0x3e4>
 8006c72:	bf00      	nop
 8006c74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	4413      	add	r3, r2
 8006c82:	1e5a      	subs	r2, r3, #1
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	8afa      	ldrh	r2, [r7, #22]
 8006c94:	fb03 f202 	mul.w	r2, r3, r2
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	8afb      	ldrh	r3, [r7, #22]
 8006cac:	04d9      	lsls	r1, r3, #19
 8006cae:	4b38      	ldr	r3, [pc, #224]	; (8006d90 <USB_EPStartXfer+0x48c>)
 8006cb0:	400b      	ands	r3, r1
 8006cb2:	69b9      	ldr	r1, [r7, #24]
 8006cb4:	0148      	lsls	r0, r1, #5
 8006cb6:	69f9      	ldr	r1, [r7, #28]
 8006cb8:	4401      	add	r1, r0
 8006cba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd8:	69b9      	ldr	r1, [r7, #24]
 8006cda:	0148      	lsls	r0, r1, #5
 8006cdc:	69f9      	ldr	r1, [r7, #28]
 8006cde:	4401      	add	r1, r0
 8006ce0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d10d      	bne.n	8006d0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6919      	ldr	r1, [r3, #16]
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	460a      	mov	r2, r1
 8006d08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	791b      	ldrb	r3, [r3, #4]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d128      	bne.n	8006d64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d110      	bne.n	8006d44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e00f      	b.n	8006d64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	1ff80000 	.word	0x1ff80000

08006d94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f040 80ce 	bne.w	8006f52 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d132      	bne.n	8006e24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e1c:	0cdb      	lsrs	r3, r3, #19
 8006e1e:	04db      	lsls	r3, r3, #19
 8006e20:	6113      	str	r3, [r2, #16]
 8006e22:	e04e      	b.n	8006ec2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3e:	0cdb      	lsrs	r3, r3, #19
 8006e40:	04db      	lsls	r3, r3, #19
 8006e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	0151      	lsls	r1, r2, #5
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	440a      	add	r2, r1
 8006e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d903      	bls.n	8006e7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb2:	6939      	ldr	r1, [r7, #16]
 8006eb4:	0148      	lsls	r0, r1, #5
 8006eb6:	6979      	ldr	r1, [r7, #20]
 8006eb8:	4401      	add	r1, r0
 8006eba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d11e      	bne.n	8006f06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d009      	beq.n	8006ee4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	461a      	mov	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	e097      	b.n	8007036 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 8083 	beq.w	8007036 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	2101      	movs	r1, #1
 8006f42:	fa01 f303 	lsl.w	r3, r1, r3
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	634b      	str	r3, [r1, #52]	; 0x34
 8006f50:	e071      	b.n	8007036 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	0151      	lsls	r1, r2, #5
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	440a      	add	r2, r1
 8006f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f6c:	0cdb      	lsrs	r3, r3, #19
 8006f6e:	04db      	lsls	r3, r3, #19
 8006f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	0151      	lsls	r1, r2, #5
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	440a      	add	r2, r1
 8006f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe4:	6939      	ldr	r1, [r7, #16]
 8006fe6:	0148      	lsls	r0, r1, #5
 8006fe8:	6979      	ldr	r1, [r7, #20]
 8006fea:	4401      	add	r1, r0
 8006fec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d10d      	bne.n	8007016 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6919      	ldr	r1, [r3, #16]
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	460a      	mov	r2, r1
 8007014:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007030:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007034:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d14a      	bne.n	80070f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800707a:	f040 8086 	bne.w	800718a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	7812      	ldrb	r2, [r2, #0]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d902      	bls.n	80070dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	75fb      	strb	r3, [r7, #23]
          break;
 80070da:	e056      	b.n	800718a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f4:	d0e7      	beq.n	80070c6 <USB_EPStopXfer+0x82>
 80070f6:	e048      	b.n	800718a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800710c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007110:	d13b      	bne.n	800718a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007130:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007134:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	7812      	ldrb	r2, [r2, #0]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	440a      	add	r2, r1
 8007150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007158:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3301      	adds	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f242 7210 	movw	r2, #10000	; 0x2710
 8007166:	4293      	cmp	r3, r2
 8007168:	d902      	bls.n	8007170 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]
          break;
 800716e:	e00c      	b.n	800718a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007188:	d0e7      	beq.n	800715a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800718a:	7dfb      	ldrb	r3, [r7, #23]
}
 800718c:	4618      	mov	r0, r3
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007198:	b480      	push	{r7}
 800719a:	b089      	sub	sp, #36	; 0x24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	460b      	mov	r3, r1
 80071a8:	71fb      	strb	r3, [r7, #7]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d123      	bne.n	8007206 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071be:	88bb      	ldrh	r3, [r7, #4]
 80071c0:	3303      	adds	r3, #3
 80071c2:	089b      	lsrs	r3, r3, #2
 80071c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071c6:	2300      	movs	r3, #0
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	e018      	b.n	80071fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	031a      	lsls	r2, r3, #12
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d8:	461a      	mov	r2, r3
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	3301      	adds	r3, #1
 80071e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	3301      	adds	r3, #1
 80071ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	3301      	adds	r3, #1
 80071f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	3301      	adds	r3, #1
 80071f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	3301      	adds	r3, #1
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	429a      	cmp	r2, r3
 8007204:	d3e2      	bcc.n	80071cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3724      	adds	r7, #36	; 0x24
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007214:	b480      	push	{r7}
 8007216:	b08b      	sub	sp, #44	; 0x2c
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	089b      	lsrs	r3, r3, #2
 800722e:	b29b      	uxth	r3, r3
 8007230:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800723a:	2300      	movs	r3, #0
 800723c:	623b      	str	r3, [r7, #32]
 800723e:	e014      	b.n	800726a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	601a      	str	r2, [r3, #0]
    pDest++;
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	3301      	adds	r3, #1
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	3301      	adds	r3, #1
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	3301      	adds	r3, #1
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	3301      	adds	r3, #1
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	3301      	adds	r3, #1
 8007268:	623b      	str	r3, [r7, #32]
 800726a:	6a3a      	ldr	r2, [r7, #32]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	429a      	cmp	r2, r3
 8007270:	d3e6      	bcc.n	8007240 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007272:	8bfb      	ldrh	r3, [r7, #30]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01e      	beq.n	80072b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007282:	461a      	mov	r2, r3
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	b2da      	uxtb	r2, r3
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	701a      	strb	r2, [r3, #0]
      i++;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	3301      	adds	r3, #1
 80072a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	3301      	adds	r3, #1
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80072aa:	8bfb      	ldrh	r3, [r7, #30]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072b0:	8bfb      	ldrh	r3, [r7, #30]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1ea      	bne.n	800728c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	372c      	adds	r7, #44	; 0x2c
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d12c      	bne.n	800733a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	db12      	blt.n	8007318 <USB_EPSetStall+0x54>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00f      	beq.n	8007318 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	440a      	add	r2, r1
 800730e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007312:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007316:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	e02b      	b.n	8007392 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	db12      	blt.n	8007372 <USB_EPSetStall+0xae>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00f      	beq.n	8007372 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007370:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007390:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d128      	bne.n	800740e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	791b      	ldrb	r3, [r3, #4]
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d003      	beq.n	80073ec <USB_EPClearStall+0x4c>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	791b      	ldrb	r3, [r3, #4]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d138      	bne.n	800745e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	0151      	lsls	r1, r2, #5
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	440a      	add	r2, r1
 8007402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	e027      	b.n	800745e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007428:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800742c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	791b      	ldrb	r3, [r3, #4]
 8007432:	2b03      	cmp	r3, #3
 8007434:	d003      	beq.n	800743e <USB_EPClearStall+0x9e>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	791b      	ldrb	r3, [r3, #4]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d10f      	bne.n	800745e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800745c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800748a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800748e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80074a0:	68f9      	ldr	r1, [r7, #12]
 80074a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074a6:	4313      	orrs	r3, r2
 80074a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e6:	f023 0302 	bic.w	r3, r3, #2
 80074ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007514:	f023 0303 	bic.w	r3, r3, #3
 8007518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007528:	f043 0302 	orr.w	r3, r3, #2
 800752c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4013      	ands	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007554:	68fb      	ldr	r3, [r7, #12]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	4013      	ands	r3, r2
 8007584:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	0c1b      	lsrs	r3, r3, #16
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	4013      	ands	r3, r2
 80075b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	b29b      	uxth	r3, r3
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b085      	sub	sp, #20
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	4013      	ands	r3, r2
 80075f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075f8:	68bb      	ldr	r3, [r7, #8]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007606:	b480      	push	{r7}
 8007608:	b087      	sub	sp, #28
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007628:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	fa22 f303 	lsr.w	r3, r2, r3
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	b2db      	uxtb	r3, r3
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4013      	ands	r3, r2
 8007652:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007654:	68bb      	ldr	r3, [r7, #8]
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0301 	and.w	r3, r3, #1
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007698:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800769c:	f023 0307 	bic.w	r3, r3, #7
 80076a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	460b      	mov	r3, r1
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	333c      	adds	r3, #60	; 0x3c
 80076da:	3304      	adds	r3, #4
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	4a26      	ldr	r2, [pc, #152]	; (800777c <USB_EP0_OutStart+0xb8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d90a      	bls.n	80076fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076f8:	d101      	bne.n	80076fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e037      	b.n	800776e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007704:	461a      	mov	r2, r3
 8007706:	2300      	movs	r3, #0
 8007708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800771c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800772c:	f043 0318 	orr.w	r3, r3, #24
 8007730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007740:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007744:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d10f      	bne.n	800776c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007766:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800776a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	4f54300a 	.word	0x4f54300a

08007780 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3301      	adds	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4a13      	ldr	r2, [pc, #76]	; (80077e4 <USB_CoreReset+0x64>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d901      	bls.n	800779e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e01b      	b.n	80077d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	daf2      	bge.n	800778c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f043 0201 	orr.w	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4a09      	ldr	r2, [pc, #36]	; (80077e4 <USB_CoreReset+0x64>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d901      	bls.n	80077c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e006      	b.n	80077d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d0f0      	beq.n	80077b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	00030d40 	.word	0x00030d40

080077e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077f8:	f003 ff26 	bl	800b648 <USBD_static_malloc>
 80077fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32b0      	adds	r2, #176	; 0xb0
 800780e:	2100      	movs	r1, #0
 8007810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007814:	2302      	movs	r3, #2
 8007816:	e0d4      	b.n	80079c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007818:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800781c:	2100      	movs	r1, #0
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f003 ff8a 	bl	800b738 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	32b0      	adds	r2, #176	; 0xb0
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	32b0      	adds	r2, #176	; 0xb0
 800783e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7c1b      	ldrb	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d138      	bne.n	80078c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007850:	4b5e      	ldr	r3, [pc, #376]	; (80079cc <USBD_CDC_Init+0x1e4>)
 8007852:	7819      	ldrb	r1, [r3, #0]
 8007854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007858:	2202      	movs	r2, #2
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f003 fdd1 	bl	800b402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007860:	4b5a      	ldr	r3, [pc, #360]	; (80079cc <USBD_CDC_Init+0x1e4>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f003 020f 	and.w	r2, r3, #15
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3324      	adds	r3, #36	; 0x24
 8007876:	2201      	movs	r2, #1
 8007878:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800787a:	4b55      	ldr	r3, [pc, #340]	; (80079d0 <USBD_CDC_Init+0x1e8>)
 800787c:	7819      	ldrb	r1, [r3, #0]
 800787e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007882:	2202      	movs	r2, #2
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f003 fdbc 	bl	800b402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800788a:	4b51      	ldr	r3, [pc, #324]	; (80079d0 <USBD_CDC_Init+0x1e8>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f003 020f 	and.w	r2, r3, #15
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078a2:	2201      	movs	r2, #1
 80078a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078a6:	4b4b      	ldr	r3, [pc, #300]	; (80079d4 <USBD_CDC_Init+0x1ec>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f003 020f 	and.w	r2, r3, #15
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	3326      	adds	r3, #38	; 0x26
 80078bc:	2210      	movs	r2, #16
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	e035      	b.n	800792e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078c2:	4b42      	ldr	r3, [pc, #264]	; (80079cc <USBD_CDC_Init+0x1e4>)
 80078c4:	7819      	ldrb	r1, [r3, #0]
 80078c6:	2340      	movs	r3, #64	; 0x40
 80078c8:	2202      	movs	r2, #2
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f003 fd99 	bl	800b402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078d0:	4b3e      	ldr	r3, [pc, #248]	; (80079cc <USBD_CDC_Init+0x1e4>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	f003 020f 	and.w	r2, r3, #15
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	440b      	add	r3, r1
 80078e4:	3324      	adds	r3, #36	; 0x24
 80078e6:	2201      	movs	r2, #1
 80078e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078ea:	4b39      	ldr	r3, [pc, #228]	; (80079d0 <USBD_CDC_Init+0x1e8>)
 80078ec:	7819      	ldrb	r1, [r3, #0]
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	2202      	movs	r2, #2
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f003 fd85 	bl	800b402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078f8:	4b35      	ldr	r3, [pc, #212]	; (80079d0 <USBD_CDC_Init+0x1e8>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f003 020f 	and.w	r2, r3, #15
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007910:	2201      	movs	r2, #1
 8007912:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007914:	4b2f      	ldr	r3, [pc, #188]	; (80079d4 <USBD_CDC_Init+0x1ec>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 020f 	and.w	r2, r3, #15
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	3326      	adds	r3, #38	; 0x26
 800792a:	2210      	movs	r2, #16
 800792c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800792e:	4b29      	ldr	r3, [pc, #164]	; (80079d4 <USBD_CDC_Init+0x1ec>)
 8007930:	7819      	ldrb	r1, [r3, #0]
 8007932:	2308      	movs	r3, #8
 8007934:	2203      	movs	r2, #3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f003 fd63 	bl	800b402 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800793c:	4b25      	ldr	r3, [pc, #148]	; (80079d4 <USBD_CDC_Init+0x1ec>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	f003 020f 	and.w	r2, r3, #15
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	3324      	adds	r3, #36	; 0x24
 8007952:	2201      	movs	r2, #1
 8007954:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	33b0      	adds	r3, #176	; 0xb0
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800798c:	2302      	movs	r3, #2
 800798e:	e018      	b.n	80079c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	7c1b      	ldrb	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007998:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <USBD_CDC_Init+0x1e8>)
 800799a:	7819      	ldrb	r1, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f003 fe1a 	bl	800b5e0 <USBD_LL_PrepareReceive>
 80079ac:	e008      	b.n	80079c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <USBD_CDC_Init+0x1e8>)
 80079b0:	7819      	ldrb	r1, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079b8:	2340      	movs	r3, #64	; 0x40
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f003 fe10 	bl	800b5e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	2000009b 	.word	0x2000009b
 80079d0:	2000009c 	.word	0x2000009c
 80079d4:	2000009d 	.word	0x2000009d

080079d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80079e4:	4b3a      	ldr	r3, [pc, #232]	; (8007ad0 <USBD_CDC_DeInit+0xf8>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f003 fd2f 	bl	800b44e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80079f0:	4b37      	ldr	r3, [pc, #220]	; (8007ad0 <USBD_CDC_DeInit+0xf8>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 020f 	and.w	r2, r3, #15
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	3324      	adds	r3, #36	; 0x24
 8007a06:	2200      	movs	r2, #0
 8007a08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007a0a:	4b32      	ldr	r3, [pc, #200]	; (8007ad4 <USBD_CDC_DeInit+0xfc>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f003 fd1c 	bl	800b44e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a16:	4b2f      	ldr	r3, [pc, #188]	; (8007ad4 <USBD_CDC_DeInit+0xfc>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	f003 020f 	and.w	r2, r3, #15
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a2e:	2200      	movs	r2, #0
 8007a30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a32:	4b29      	ldr	r3, [pc, #164]	; (8007ad8 <USBD_CDC_DeInit+0x100>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f003 fd08 	bl	800b44e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a3e:	4b26      	ldr	r3, [pc, #152]	; (8007ad8 <USBD_CDC_DeInit+0x100>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	f003 020f 	and.w	r2, r3, #15
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	440b      	add	r3, r1
 8007a52:	3324      	adds	r3, #36	; 0x24
 8007a54:	2200      	movs	r2, #0
 8007a56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a58:	4b1f      	ldr	r3, [pc, #124]	; (8007ad8 <USBD_CDC_DeInit+0x100>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	f003 020f 	and.w	r2, r3, #15
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	440b      	add	r3, r1
 8007a6c:	3326      	adds	r3, #38	; 0x26
 8007a6e:	2200      	movs	r2, #0
 8007a70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	32b0      	adds	r2, #176	; 0xb0
 8007a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01f      	beq.n	8007ac4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	33b0      	adds	r3, #176	; 0xb0
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32b0      	adds	r2, #176	; 0xb0
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f003 fddc 	bl	800b664 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	32b0      	adds	r2, #176	; 0xb0
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	2000009b 	.word	0x2000009b
 8007ad4:	2000009c 	.word	0x2000009c
 8007ad8:	2000009d 	.word	0x2000009d

08007adc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	32b0      	adds	r2, #176	; 0xb0
 8007af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e0bf      	b.n	8007c8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d050      	beq.n	8007bba <USBD_CDC_Setup+0xde>
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	f040 80af 	bne.w	8007c7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	88db      	ldrh	r3, [r3, #6]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d03a      	beq.n	8007b9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b25b      	sxtb	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	da1b      	bge.n	8007b68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	33b0      	adds	r3, #176	; 0xb0
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	88d2      	ldrh	r2, [r2, #6]
 8007b4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	88db      	ldrh	r3, [r3, #6]
 8007b52:	2b07      	cmp	r3, #7
 8007b54:	bf28      	it	cs
 8007b56:	2307      	movcs	r3, #7
 8007b58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	89fa      	ldrh	r2, [r7, #14]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 fd89 	bl	8009678 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b66:	e090      	b.n	8007c8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	785a      	ldrb	r2, [r3, #1]
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	88db      	ldrh	r3, [r3, #6]
 8007b76:	2b3f      	cmp	r3, #63	; 0x3f
 8007b78:	d803      	bhi.n	8007b82 <USBD_CDC_Setup+0xa6>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	88db      	ldrh	r3, [r3, #6]
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	e000      	b.n	8007b84 <USBD_CDC_Setup+0xa8>
 8007b82:	2240      	movs	r2, #64	; 0x40
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b8a:	6939      	ldr	r1, [r7, #16]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007b92:	461a      	mov	r2, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 fd9b 	bl	80096d0 <USBD_CtlPrepareRx>
      break;
 8007b9a:	e076      	b.n	8007c8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	33b0      	adds	r3, #176	; 0xb0
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	7850      	ldrb	r0, [r2, #1]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	4798      	blx	r3
      break;
 8007bb8:	e067      	b.n	8007c8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	2b0b      	cmp	r3, #11
 8007bc0:	d851      	bhi.n	8007c66 <USBD_CDC_Setup+0x18a>
 8007bc2:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <USBD_CDC_Setup+0xec>)
 8007bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc8:	08007bf9 	.word	0x08007bf9
 8007bcc:	08007c75 	.word	0x08007c75
 8007bd0:	08007c67 	.word	0x08007c67
 8007bd4:	08007c67 	.word	0x08007c67
 8007bd8:	08007c67 	.word	0x08007c67
 8007bdc:	08007c67 	.word	0x08007c67
 8007be0:	08007c67 	.word	0x08007c67
 8007be4:	08007c67 	.word	0x08007c67
 8007be8:	08007c67 	.word	0x08007c67
 8007bec:	08007c67 	.word	0x08007c67
 8007bf0:	08007c23 	.word	0x08007c23
 8007bf4:	08007c4d 	.word	0x08007c4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d107      	bne.n	8007c14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c04:	f107 030a 	add.w	r3, r7, #10
 8007c08:	2202      	movs	r2, #2
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 fd33 	bl	8009678 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c12:	e032      	b.n	8007c7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fcbd 	bl	8009596 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	75fb      	strb	r3, [r7, #23]
          break;
 8007c20:	e02b      	b.n	8007c7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d107      	bne.n	8007c3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c2e:	f107 030d 	add.w	r3, r7, #13
 8007c32:	2201      	movs	r2, #1
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 fd1e 	bl	8009678 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c3c:	e01d      	b.n	8007c7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 fca8 	bl	8009596 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c46:	2303      	movs	r3, #3
 8007c48:	75fb      	strb	r3, [r7, #23]
          break;
 8007c4a:	e016      	b.n	8007c7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d00f      	beq.n	8007c78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 fc9b 	bl	8009596 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c60:	2303      	movs	r3, #3
 8007c62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c64:	e008      	b.n	8007c78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fc94 	bl	8009596 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	75fb      	strb	r3, [r7, #23]
          break;
 8007c72:	e002      	b.n	8007c7a <USBD_CDC_Setup+0x19e>
          break;
 8007c74:	bf00      	nop
 8007c76:	e008      	b.n	8007c8a <USBD_CDC_Setup+0x1ae>
          break;
 8007c78:	bf00      	nop
      }
      break;
 8007c7a:	e006      	b.n	8007c8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 fc89 	bl	8009596 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c84:	2303      	movs	r3, #3
 8007c86:	75fb      	strb	r3, [r7, #23]
      break;
 8007c88:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ca6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	32b0      	adds	r2, #176	; 0xb0
 8007cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e065      	b.n	8007d8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	32b0      	adds	r2, #176	; 0xb0
 8007cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ccc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	f003 020f 	and.w	r2, r3, #15
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	3318      	adds	r3, #24
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d02f      	beq.n	8007d48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 020f 	and.w	r2, r3, #15
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	3318      	adds	r3, #24
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	f003 010f 	and.w	r1, r3, #15
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	460b      	mov	r3, r1
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	440b      	add	r3, r1
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4403      	add	r3, r0
 8007d10:	3348      	adds	r3, #72	; 0x48
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d18:	fb01 f303 	mul.w	r3, r1, r3
 8007d1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d112      	bne.n	8007d48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	f003 020f 	and.w	r2, r3, #15
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	440b      	add	r3, r1
 8007d34:	3318      	adds	r3, #24
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d3a:	78f9      	ldrb	r1, [r7, #3]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f003 fc2c 	bl	800b59e <USBD_LL_Transmit>
 8007d46:	e01f      	b.n	8007d88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	33b0      	adds	r3, #176	; 0xb0
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d010      	beq.n	8007d88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	33b0      	adds	r3, #176	; 0xb0
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d84:	78fa      	ldrb	r2, [r7, #3]
 8007d86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	32b0      	adds	r2, #176	; 0xb0
 8007da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	32b0      	adds	r2, #176	; 0xb0
 8007db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e01a      	b.n	8007dfa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f003 fc2a 	bl	800b622 <USBD_LL_GetRxDataSize>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	33b0      	adds	r3, #176	; 0xb0
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007df4:	4611      	mov	r1, r2
 8007df6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	32b0      	adds	r2, #176	; 0xb0
 8007e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e025      	b.n	8007e70 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	33b0      	adds	r3, #176	; 0xb0
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01a      	beq.n	8007e6e <USBD_CDC_EP0_RxReady+0x6c>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e3e:	2bff      	cmp	r3, #255	; 0xff
 8007e40:	d015      	beq.n	8007e6e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	33b0      	adds	r3, #176	; 0xb0
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e62:	b292      	uxth	r2, r2
 8007e64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	22ff      	movs	r2, #255	; 0xff
 8007e6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e80:	2182      	movs	r1, #130	; 0x82
 8007e82:	4818      	ldr	r0, [pc, #96]	; (8007ee4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e84:	f000 fd4f 	bl	8008926 <USBD_GetEpDesc>
 8007e88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	4815      	ldr	r0, [pc, #84]	; (8007ee4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e8e:	f000 fd4a 	bl	8008926 <USBD_GetEpDesc>
 8007e92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e94:	2181      	movs	r1, #129	; 0x81
 8007e96:	4813      	ldr	r0, [pc, #76]	; (8007ee4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e98:	f000 fd45 	bl	8008926 <USBD_GetEpDesc>
 8007e9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2210      	movs	r2, #16
 8007ea8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d006      	beq.n	8007ebe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eb8:	711a      	strb	r2, [r3, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d006      	beq.n	8007ed2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ecc:	711a      	strb	r2, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2243      	movs	r2, #67	; 0x43
 8007ed6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000058 	.word	0x20000058

08007ee8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ef0:	2182      	movs	r1, #130	; 0x82
 8007ef2:	4818      	ldr	r0, [pc, #96]	; (8007f54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ef4:	f000 fd17 	bl	8008926 <USBD_GetEpDesc>
 8007ef8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007efa:	2101      	movs	r1, #1
 8007efc:	4815      	ldr	r0, [pc, #84]	; (8007f54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007efe:	f000 fd12 	bl	8008926 <USBD_GetEpDesc>
 8007f02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f04:	2181      	movs	r1, #129	; 0x81
 8007f06:	4813      	ldr	r0, [pc, #76]	; (8007f54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f08:	f000 fd0d 	bl	8008926 <USBD_GetEpDesc>
 8007f0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2210      	movs	r2, #16
 8007f18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d006      	beq.n	8007f2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	2200      	movs	r2, #0
 8007f24:	711a      	strb	r2, [r3, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f042 0202 	orr.w	r2, r2, #2
 8007f2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d006      	beq.n	8007f42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	711a      	strb	r2, [r3, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f042 0202 	orr.w	r2, r2, #2
 8007f40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2243      	movs	r2, #67	; 0x43
 8007f46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f48:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000058 	.word	0x20000058

08007f58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f60:	2182      	movs	r1, #130	; 0x82
 8007f62:	4818      	ldr	r0, [pc, #96]	; (8007fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f64:	f000 fcdf 	bl	8008926 <USBD_GetEpDesc>
 8007f68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	4815      	ldr	r0, [pc, #84]	; (8007fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f6e:	f000 fcda 	bl	8008926 <USBD_GetEpDesc>
 8007f72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f74:	2181      	movs	r1, #129	; 0x81
 8007f76:	4813      	ldr	r0, [pc, #76]	; (8007fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f78:	f000 fcd5 	bl	8008926 <USBD_GetEpDesc>
 8007f7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2210      	movs	r2, #16
 8007f88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d006      	beq.n	8007f9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f98:	711a      	strb	r2, [r3, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d006      	beq.n	8007fb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fac:	711a      	strb	r2, [r3, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2243      	movs	r2, #67	; 0x43
 8007fb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000058 	.word	0x20000058

08007fc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	220a      	movs	r2, #10
 8007fd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007fd6:	4b03      	ldr	r3, [pc, #12]	; (8007fe4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	20000014 	.word	0x20000014

08007fe8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e009      	b.n	8008010 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	33b0      	adds	r3, #176	; 0xb0
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	32b0      	adds	r2, #176	; 0xb0
 8008032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008036:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800803e:	2303      	movs	r3, #3
 8008040:	e008      	b.n	8008054 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	32b0      	adds	r2, #176	; 0xb0
 8008074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008078:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	e004      	b.n	800808e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
	...

0800809c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	32b0      	adds	r2, #176	; 0xb0
 80080ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	32b0      	adds	r2, #176	; 0xb0
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e025      	b.n	800811a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d11f      	bne.n	8008118 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2201      	movs	r2, #1
 80080dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80080e0:	4b10      	ldr	r3, [pc, #64]	; (8008124 <USBD_CDC_TransmitPacket+0x88>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f003 020f 	and.w	r2, r3, #15
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4403      	add	r3, r0
 80080fa:	3318      	adds	r3, #24
 80080fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <USBD_CDC_TransmitPacket+0x88>)
 8008100:	7819      	ldrb	r1, [r3, #0]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f003 fa45 	bl	800b59e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	2000009b 	.word	0x2000009b

08008128 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32b0      	adds	r2, #176	; 0xb0
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	32b0      	adds	r2, #176	; 0xb0
 800814a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	e018      	b.n	8008188 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	7c1b      	ldrb	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800815e:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <USBD_CDC_ReceivePacket+0x68>)
 8008160:	7819      	ldrb	r1, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f003 fa37 	bl	800b5e0 <USBD_LL_PrepareReceive>
 8008172:	e008      	b.n	8008186 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008174:	4b06      	ldr	r3, [pc, #24]	; (8008190 <USBD_CDC_ReceivePacket+0x68>)
 8008176:	7819      	ldrb	r1, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800817e:	2340      	movs	r3, #64	; 0x40
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f003 fa2d 	bl	800b5e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	2000009c 	.word	0x2000009c

08008194 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e01f      	b.n	80081ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	79fa      	ldrb	r2, [r7, #7]
 80081de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f003 f8a7 	bl	800b334 <USBD_LL_Init>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008208:	2303      	movs	r3, #3
 800820a:	e025      	b.n	8008258 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	32ae      	adds	r2, #174	; 0xae
 800821e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00f      	beq.n	8008248 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	32ae      	adds	r2, #174	; 0xae
 8008232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	f107 020e 	add.w	r2, r7, #14
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	4602      	mov	r2, r0
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f003 f8af 	bl	800b3cc <USBD_LL_Start>
 800826e:	4603      	mov	r3, r0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d009      	beq.n	80082bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	78fa      	ldrb	r2, [r7, #3]
 80082b2:	4611      	mov	r1, r2
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	4798      	blx	r3
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	4611      	mov	r1, r2
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80082ec:	2303      	movs	r3, #3
 80082ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	4618      	mov	r0, r3
 800830e:	f001 f908 	bl	8009522 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008320:	461a      	mov	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800832e:	f003 031f 	and.w	r3, r3, #31
 8008332:	2b02      	cmp	r3, #2
 8008334:	d01a      	beq.n	800836c <USBD_LL_SetupStage+0x72>
 8008336:	2b02      	cmp	r3, #2
 8008338:	d822      	bhi.n	8008380 <USBD_LL_SetupStage+0x86>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <USBD_LL_SetupStage+0x4a>
 800833e:	2b01      	cmp	r3, #1
 8008340:	d00a      	beq.n	8008358 <USBD_LL_SetupStage+0x5e>
 8008342:	e01d      	b.n	8008380 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fb5f 	bl	8008a10 <USBD_StdDevReq>
 8008352:	4603      	mov	r3, r0
 8008354:	73fb      	strb	r3, [r7, #15]
      break;
 8008356:	e020      	b.n	800839a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fbc7 	bl	8008af4 <USBD_StdItfReq>
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]
      break;
 800836a:	e016      	b.n	800839a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fc29 	bl	8008bcc <USBD_StdEPReq>
 800837a:	4603      	mov	r3, r0
 800837c:	73fb      	strb	r3, [r7, #15]
      break;
 800837e:	e00c      	b.n	800839a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008386:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800838a:	b2db      	uxtb	r3, r3
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f003 f87c 	bl	800b48c <USBD_LL_StallEP>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]
      break;
 8008398:	bf00      	nop
  }

  return ret;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	460b      	mov	r3, r1
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80083b6:	7afb      	ldrb	r3, [r7, #11]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d16e      	bne.n	800849a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	f040 8098 	bne.w	8008500 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d913      	bls.n	8008404 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	4293      	cmp	r3, r2
 80083f4:	bf28      	it	cs
 80083f6:	4613      	movcs	r3, r2
 80083f8:	461a      	mov	r2, r3
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f001 f984 	bl	800970a <USBD_CtlContinueRx>
 8008402:	e07d      	b.n	8008500 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800840a:	f003 031f 	and.w	r3, r3, #31
 800840e:	2b02      	cmp	r3, #2
 8008410:	d014      	beq.n	800843c <USBD_LL_DataOutStage+0x98>
 8008412:	2b02      	cmp	r3, #2
 8008414:	d81d      	bhi.n	8008452 <USBD_LL_DataOutStage+0xae>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <USBD_LL_DataOutStage+0x7c>
 800841a:	2b01      	cmp	r3, #1
 800841c:	d003      	beq.n	8008426 <USBD_LL_DataOutStage+0x82>
 800841e:	e018      	b.n	8008452 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	75bb      	strb	r3, [r7, #22]
            break;
 8008424:	e018      	b.n	8008458 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800842c:	b2db      	uxtb	r3, r3
 800842e:	4619      	mov	r1, r3
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 fa5e 	bl	80088f2 <USBD_CoreFindIF>
 8008436:	4603      	mov	r3, r0
 8008438:	75bb      	strb	r3, [r7, #22]
            break;
 800843a:	e00d      	b.n	8008458 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008442:	b2db      	uxtb	r3, r3
 8008444:	4619      	mov	r1, r3
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 fa60 	bl	800890c <USBD_CoreFindEP>
 800844c:	4603      	mov	r3, r0
 800844e:	75bb      	strb	r3, [r7, #22]
            break;
 8008450:	e002      	b.n	8008458 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	75bb      	strb	r3, [r7, #22]
            break;
 8008456:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008458:	7dbb      	ldrb	r3, [r7, #22]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d119      	bne.n	8008492 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b03      	cmp	r3, #3
 8008468:	d113      	bne.n	8008492 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800846a:	7dba      	ldrb	r2, [r7, #22]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	32ae      	adds	r2, #174	; 0xae
 8008470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800847a:	7dba      	ldrb	r2, [r7, #22]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008482:	7dba      	ldrb	r2, [r7, #22]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	32ae      	adds	r2, #174	; 0xae
 8008488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f001 f94a 	bl	800972c <USBD_CtlSendStatus>
 8008498:	e032      	b.n	8008500 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800849a:	7afb      	ldrb	r3, [r7, #11]
 800849c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	4619      	mov	r1, r3
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fa31 	bl	800890c <USBD_CoreFindEP>
 80084aa:	4603      	mov	r3, r0
 80084ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ae:	7dbb      	ldrb	r3, [r7, #22]
 80084b0:	2bff      	cmp	r3, #255	; 0xff
 80084b2:	d025      	beq.n	8008500 <USBD_LL_DataOutStage+0x15c>
 80084b4:	7dbb      	ldrb	r3, [r7, #22]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d122      	bne.n	8008500 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d117      	bne.n	80084f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80084c6:	7dba      	ldrb	r2, [r7, #22]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	32ae      	adds	r2, #174	; 0xae
 80084cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00f      	beq.n	80084f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80084d6:	7dba      	ldrb	r2, [r7, #22]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80084de:	7dba      	ldrb	r2, [r7, #22]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	32ae      	adds	r2, #174	; 0xae
 80084e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	7afa      	ldrb	r2, [r7, #11]
 80084ec:	4611      	mov	r1, r2
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	4798      	blx	r3
 80084f2:	4603      	mov	r3, r0
 80084f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	e000      	b.n	8008502 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	460b      	mov	r3, r1
 8008514:	607a      	str	r2, [r7, #4]
 8008516:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d16f      	bne.n	80085fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3314      	adds	r3, #20
 8008522:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800852a:	2b02      	cmp	r3, #2
 800852c:	d15a      	bne.n	80085e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	429a      	cmp	r2, r3
 8008538:	d914      	bls.n	8008564 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	461a      	mov	r2, r3
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f001 f8ac 	bl	80096ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008556:	2300      	movs	r3, #0
 8008558:	2200      	movs	r2, #0
 800855a:	2100      	movs	r1, #0
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f003 f83f 	bl	800b5e0 <USBD_LL_PrepareReceive>
 8008562:	e03f      	b.n	80085e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	429a      	cmp	r2, r3
 800856e:	d11c      	bne.n	80085aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008578:	429a      	cmp	r2, r3
 800857a:	d316      	bcc.n	80085aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008586:	429a      	cmp	r2, r3
 8008588:	d20f      	bcs.n	80085aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800858a:	2200      	movs	r2, #0
 800858c:	2100      	movs	r1, #0
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f001 f88d 	bl	80096ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800859c:	2300      	movs	r3, #0
 800859e:	2200      	movs	r2, #0
 80085a0:	2100      	movs	r1, #0
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f003 f81c 	bl	800b5e0 <USBD_LL_PrepareReceive>
 80085a8:	e01c      	b.n	80085e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d10f      	bne.n	80085d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d009      	beq.n	80085d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085d6:	2180      	movs	r1, #128	; 0x80
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f002 ff57 	bl	800b48c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f001 f8b7 	bl	8009752 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d03a      	beq.n	8008664 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f7ff fe42 	bl	8008278 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085fc:	e032      	b.n	8008664 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80085fe:	7afb      	ldrb	r3, [r7, #11]
 8008600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008604:	b2db      	uxtb	r3, r3
 8008606:	4619      	mov	r1, r3
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f97f 	bl	800890c <USBD_CoreFindEP>
 800860e:	4603      	mov	r3, r0
 8008610:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	2bff      	cmp	r3, #255	; 0xff
 8008616:	d025      	beq.n	8008664 <USBD_LL_DataInStage+0x15a>
 8008618:	7dfb      	ldrb	r3, [r7, #23]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d122      	bne.n	8008664 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b03      	cmp	r3, #3
 8008628:	d11c      	bne.n	8008664 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800862a:	7dfa      	ldrb	r2, [r7, #23]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	32ae      	adds	r2, #174	; 0xae
 8008630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d014      	beq.n	8008664 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800863a:	7dfa      	ldrb	r2, [r7, #23]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008642:	7dfa      	ldrb	r2, [r7, #23]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	32ae      	adds	r2, #174	; 0xae
 8008648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	7afa      	ldrb	r2, [r7, #11]
 8008650:	4611      	mov	r1, r2
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	4798      	blx	r3
 8008656:	4603      	mov	r3, r0
 8008658:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800865a:	7dbb      	ldrb	r3, [r7, #22]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008660:	7dbb      	ldrb	r3, [r7, #22]
 8008662:	e000      	b.n	8008666 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d014      	beq.n	80086d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00e      	beq.n	80086d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	6852      	ldr	r2, [r2, #4]
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	4611      	mov	r1, r2
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80086d0:	2303      	movs	r3, #3
 80086d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086d4:	2340      	movs	r3, #64	; 0x40
 80086d6:	2200      	movs	r2, #0
 80086d8:	2100      	movs	r1, #0
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f002 fe91 	bl	800b402 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2240      	movs	r2, #64	; 0x40
 80086ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086f0:	2340      	movs	r3, #64	; 0x40
 80086f2:	2200      	movs	r2, #0
 80086f4:	2180      	movs	r1, #128	; 0x80
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f002 fe83 	bl	800b402 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2240      	movs	r2, #64	; 0x40
 8008706:	621a      	str	r2, [r3, #32]

  return ret;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	460b      	mov	r3, r1
 800871c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	78fa      	ldrb	r2, [r7, #3]
 8008722:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008740:	b2da      	uxtb	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2204      	movs	r2, #4
 800874c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b04      	cmp	r3, #4
 8008770:	d106      	bne.n	8008780 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008778:	b2da      	uxtb	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	370c      	adds	r7, #12
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d110      	bne.n	80087c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d005      	beq.n	80087c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	460b      	mov	r3, r1
 80087d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	32ae      	adds	r2, #174	; 0xae
 80087e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e01c      	b.n	800882a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d115      	bne.n	8008828 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	32ae      	adds	r2, #174	; 0xae
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00b      	beq.n	8008828 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	32ae      	adds	r2, #174	; 0xae
 800881a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	78fa      	ldrb	r2, [r7, #3]
 8008822:	4611      	mov	r1, r2
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	32ae      	adds	r2, #174	; 0xae
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008850:	2303      	movs	r3, #3
 8008852:	e01c      	b.n	800888e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b03      	cmp	r3, #3
 800885e:	d115      	bne.n	800888c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	32ae      	adds	r2, #174	; 0xae
 800886a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	32ae      	adds	r2, #174	; 0xae
 800887e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	4611      	mov	r1, r2
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00e      	beq.n	80088e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6852      	ldr	r2, [r2, #4]
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	4611      	mov	r1, r2
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80088e4:	2303      	movs	r3, #3
 80088e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008918:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800891a:	4618      	mov	r0, r3
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b086      	sub	sp, #24
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	885b      	ldrh	r3, [r3, #2]
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	429a      	cmp	r2, r3
 800894c:	d920      	bls.n	8008990 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008956:	e013      	b.n	8008980 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008958:	f107 030a 	add.w	r3, r7, #10
 800895c:	4619      	mov	r1, r3
 800895e:	6978      	ldr	r0, [r7, #20]
 8008960:	f000 f81b 	bl	800899a <USBD_GetNextDesc>
 8008964:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	785b      	ldrb	r3, [r3, #1]
 800896a:	2b05      	cmp	r3, #5
 800896c:	d108      	bne.n	8008980 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	789b      	ldrb	r3, [r3, #2]
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	429a      	cmp	r2, r3
 800897a:	d008      	beq.n	800898e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	885b      	ldrh	r3, [r3, #2]
 8008984:	b29a      	uxth	r2, r3
 8008986:	897b      	ldrh	r3, [r7, #10]
 8008988:	429a      	cmp	r2, r3
 800898a:	d8e5      	bhi.n	8008958 <USBD_GetEpDesc+0x32>
 800898c:	e000      	b.n	8008990 <USBD_GetEpDesc+0x6a>
          break;
 800898e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008990:	693b      	ldr	r3, [r7, #16]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800899a:	b480      	push	{r7}
 800899c:	b085      	sub	sp, #20
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	881a      	ldrh	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	4413      	add	r3, r2
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4413      	add	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80089c6:	68fb      	ldr	r3, [r7, #12]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	3301      	adds	r3, #1
 80089ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089f2:	8a3b      	ldrh	r3, [r7, #16]
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	b21a      	sxth	r2, r3
 80089f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	b21b      	sxth	r3, r3
 8008a00:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a02:	89fb      	ldrh	r3, [r7, #14]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d005      	beq.n	8008a36 <USBD_StdDevReq+0x26>
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	d857      	bhi.n	8008ade <USBD_StdDevReq+0xce>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00f      	beq.n	8008a52 <USBD_StdDevReq+0x42>
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d153      	bne.n	8008ade <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	32ae      	adds	r2, #174	; 0xae
 8008a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	4798      	blx	r3
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a50:	e04a      	b.n	8008ae8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	785b      	ldrb	r3, [r3, #1]
 8008a56:	2b09      	cmp	r3, #9
 8008a58:	d83b      	bhi.n	8008ad2 <USBD_StdDevReq+0xc2>
 8008a5a:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <USBD_StdDevReq+0x50>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008ab5 	.word	0x08008ab5
 8008a64:	08008ac9 	.word	0x08008ac9
 8008a68:	08008ad3 	.word	0x08008ad3
 8008a6c:	08008abf 	.word	0x08008abf
 8008a70:	08008ad3 	.word	0x08008ad3
 8008a74:	08008a93 	.word	0x08008a93
 8008a78:	08008a89 	.word	0x08008a89
 8008a7c:	08008ad3 	.word	0x08008ad3
 8008a80:	08008aab 	.word	0x08008aab
 8008a84:	08008a9d 	.word	0x08008a9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa3c 	bl	8008f08 <USBD_GetDescriptor>
          break;
 8008a90:	e024      	b.n	8008adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fba1 	bl	80091dc <USBD_SetAddress>
          break;
 8008a9a:	e01f      	b.n	8008adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fbe0 	bl	8009264 <USBD_SetConfig>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]
          break;
 8008aa8:	e018      	b.n	8008adc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fc83 	bl	80093b8 <USBD_GetConfig>
          break;
 8008ab2:	e013      	b.n	8008adc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fcb4 	bl	8009424 <USBD_GetStatus>
          break;
 8008abc:	e00e      	b.n	8008adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fce3 	bl	800948c <USBD_SetFeature>
          break;
 8008ac6:	e009      	b.n	8008adc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fd07 	bl	80094de <USBD_ClrFeature>
          break;
 8008ad0:	e004      	b.n	8008adc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fd5e 	bl	8009596 <USBD_CtlError>
          break;
 8008ada:	bf00      	nop
      }
      break;
 8008adc:	e004      	b.n	8008ae8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fd58 	bl	8009596 <USBD_CtlError>
      break;
 8008ae6:	bf00      	nop
  }

  return ret;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop

08008af4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b0a:	2b40      	cmp	r3, #64	; 0x40
 8008b0c:	d005      	beq.n	8008b1a <USBD_StdItfReq+0x26>
 8008b0e:	2b40      	cmp	r3, #64	; 0x40
 8008b10:	d852      	bhi.n	8008bb8 <USBD_StdItfReq+0xc4>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <USBD_StdItfReq+0x26>
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d14e      	bne.n	8008bb8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d840      	bhi.n	8008baa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	889b      	ldrh	r3, [r3, #4]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d836      	bhi.n	8008ba0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	889b      	ldrh	r3, [r3, #4]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff fed9 	bl	80088f2 <USBD_CoreFindIF>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2bff      	cmp	r3, #255	; 0xff
 8008b48:	d01d      	beq.n	8008b86 <USBD_StdItfReq+0x92>
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d11a      	bne.n	8008b86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b50:	7bba      	ldrb	r2, [r7, #14]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	32ae      	adds	r2, #174	; 0xae
 8008b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00f      	beq.n	8008b80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b60:	7bba      	ldrb	r2, [r7, #14]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b68:	7bba      	ldrb	r2, [r7, #14]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	32ae      	adds	r2, #174	; 0xae
 8008b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b7e:	e004      	b.n	8008b8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b80:	2303      	movs	r3, #3
 8008b82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b84:	e001      	b.n	8008b8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b86:	2303      	movs	r3, #3
 8008b88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	88db      	ldrh	r3, [r3, #6]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d110      	bne.n	8008bb4 <USBD_StdItfReq+0xc0>
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10d      	bne.n	8008bb4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fdc7 	bl	800972c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b9e:	e009      	b.n	8008bb4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fcf7 	bl	8009596 <USBD_CtlError>
          break;
 8008ba8:	e004      	b.n	8008bb4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fcf2 	bl	8009596 <USBD_CtlError>
          break;
 8008bb2:	e000      	b.n	8008bb6 <USBD_StdItfReq+0xc2>
          break;
 8008bb4:	bf00      	nop
      }
      break;
 8008bb6:	e004      	b.n	8008bc2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fceb 	bl	8009596 <USBD_CtlError>
      break;
 8008bc0:	bf00      	nop
  }

  return ret;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	889b      	ldrh	r3, [r3, #4]
 8008bde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008be8:	2b40      	cmp	r3, #64	; 0x40
 8008bea:	d007      	beq.n	8008bfc <USBD_StdEPReq+0x30>
 8008bec:	2b40      	cmp	r3, #64	; 0x40
 8008bee:	f200 817f 	bhi.w	8008ef0 <USBD_StdEPReq+0x324>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d02a      	beq.n	8008c4c <USBD_StdEPReq+0x80>
 8008bf6:	2b20      	cmp	r3, #32
 8008bf8:	f040 817a 	bne.w	8008ef0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff fe83 	bl	800890c <USBD_CoreFindEP>
 8008c06:	4603      	mov	r3, r0
 8008c08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c0a:	7b7b      	ldrb	r3, [r7, #13]
 8008c0c:	2bff      	cmp	r3, #255	; 0xff
 8008c0e:	f000 8174 	beq.w	8008efa <USBD_StdEPReq+0x32e>
 8008c12:	7b7b      	ldrb	r3, [r7, #13]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f040 8170 	bne.w	8008efa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008c1a:	7b7a      	ldrb	r2, [r7, #13]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c22:	7b7a      	ldrb	r2, [r7, #13]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	32ae      	adds	r2, #174	; 0xae
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 8163 	beq.w	8008efa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c34:	7b7a      	ldrb	r2, [r7, #13]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	32ae      	adds	r2, #174	; 0xae
 8008c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4798      	blx	r3
 8008c46:	4603      	mov	r3, r0
 8008c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c4a:	e156      	b.n	8008efa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	785b      	ldrb	r3, [r3, #1]
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d008      	beq.n	8008c66 <USBD_StdEPReq+0x9a>
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	f300 8145 	bgt.w	8008ee4 <USBD_StdEPReq+0x318>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 809b 	beq.w	8008d96 <USBD_StdEPReq+0x1ca>
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d03c      	beq.n	8008cde <USBD_StdEPReq+0x112>
 8008c64:	e13e      	b.n	8008ee4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d002      	beq.n	8008c78 <USBD_StdEPReq+0xac>
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d016      	beq.n	8008ca4 <USBD_StdEPReq+0xd8>
 8008c76:	e02c      	b.n	8008cd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00d      	beq.n	8008c9a <USBD_StdEPReq+0xce>
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	2b80      	cmp	r3, #128	; 0x80
 8008c82:	d00a      	beq.n	8008c9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f002 fbff 	bl	800b48c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c8e:	2180      	movs	r1, #128	; 0x80
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f002 fbfb 	bl	800b48c <USBD_LL_StallEP>
 8008c96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c98:	e020      	b.n	8008cdc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fc7a 	bl	8009596 <USBD_CtlError>
              break;
 8008ca2:	e01b      	b.n	8008cdc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	885b      	ldrh	r3, [r3, #2]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10e      	bne.n	8008cca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <USBD_StdEPReq+0xfe>
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	2b80      	cmp	r3, #128	; 0x80
 8008cb6:	d008      	beq.n	8008cca <USBD_StdEPReq+0xfe>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	88db      	ldrh	r3, [r3, #6]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f002 fbe1 	bl	800b48c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fd2e 	bl	800972c <USBD_CtlSendStatus>

              break;
 8008cd0:	e004      	b.n	8008cdc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fc5e 	bl	8009596 <USBD_CtlError>
              break;
 8008cda:	bf00      	nop
          }
          break;
 8008cdc:	e107      	b.n	8008eee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d002      	beq.n	8008cf0 <USBD_StdEPReq+0x124>
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d016      	beq.n	8008d1c <USBD_StdEPReq+0x150>
 8008cee:	e04b      	b.n	8008d88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00d      	beq.n	8008d12 <USBD_StdEPReq+0x146>
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b80      	cmp	r3, #128	; 0x80
 8008cfa:	d00a      	beq.n	8008d12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f002 fbc3 	bl	800b48c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d06:	2180      	movs	r1, #128	; 0x80
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f002 fbbf 	bl	800b48c <USBD_LL_StallEP>
 8008d0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d10:	e040      	b.n	8008d94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fc3e 	bl	8009596 <USBD_CtlError>
              break;
 8008d1a:	e03b      	b.n	8008d94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	885b      	ldrh	r3, [r3, #2]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d136      	bne.n	8008d92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d004      	beq.n	8008d38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f002 fbc9 	bl	800b4ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fcf7 	bl	800972c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff fde2 	bl	800890c <USBD_CoreFindEP>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d4c:	7b7b      	ldrb	r3, [r7, #13]
 8008d4e:	2bff      	cmp	r3, #255	; 0xff
 8008d50:	d01f      	beq.n	8008d92 <USBD_StdEPReq+0x1c6>
 8008d52:	7b7b      	ldrb	r3, [r7, #13]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d11c      	bne.n	8008d92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d58:	7b7a      	ldrb	r2, [r7, #13]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d60:	7b7a      	ldrb	r2, [r7, #13]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	32ae      	adds	r2, #174	; 0xae
 8008d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d010      	beq.n	8008d92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d70:	7b7a      	ldrb	r2, [r7, #13]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	32ae      	adds	r2, #174	; 0xae
 8008d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	4798      	blx	r3
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d86:	e004      	b.n	8008d92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fc03 	bl	8009596 <USBD_CtlError>
              break;
 8008d90:	e000      	b.n	8008d94 <USBD_StdEPReq+0x1c8>
              break;
 8008d92:	bf00      	nop
          }
          break;
 8008d94:	e0ab      	b.n	8008eee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d002      	beq.n	8008da8 <USBD_StdEPReq+0x1dc>
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d032      	beq.n	8008e0c <USBD_StdEPReq+0x240>
 8008da6:	e097      	b.n	8008ed8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d007      	beq.n	8008dbe <USBD_StdEPReq+0x1f2>
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b80      	cmp	r3, #128	; 0x80
 8008db2:	d004      	beq.n	8008dbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fbed 	bl	8009596 <USBD_CtlError>
                break;
 8008dbc:	e091      	b.n	8008ee2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	da0b      	bge.n	8008dde <USBD_StdEPReq+0x212>
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dcc:	4613      	mov	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	3310      	adds	r3, #16
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	4413      	add	r3, r2
 8008dda:	3304      	adds	r3, #4
 8008ddc:	e00b      	b.n	8008df6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	3304      	adds	r3, #4
 8008df6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2202      	movs	r2, #2
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fc37 	bl	8009678 <USBD_CtlSendData>
              break;
 8008e0a:	e06a      	b.n	8008ee2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	da11      	bge.n	8008e38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	f003 020f 	and.w	r2, r3, #15
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	440b      	add	r3, r1
 8008e26:	3324      	adds	r3, #36	; 0x24
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d117      	bne.n	8008e5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fbb0 	bl	8009596 <USBD_CtlError>
                  break;
 8008e36:	e054      	b.n	8008ee2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	f003 020f 	and.w	r2, r3, #15
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fb9d 	bl	8009596 <USBD_CtlError>
                  break;
 8008e5c:	e041      	b.n	8008ee2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da0b      	bge.n	8008e7e <USBD_StdEPReq+0x2b2>
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
 8008e68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	3310      	adds	r3, #16
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	4413      	add	r3, r2
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	e00b      	b.n	8008e96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e84:	4613      	mov	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	4413      	add	r3, r2
 8008e94:	3304      	adds	r3, #4
 8008e96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <USBD_StdEPReq+0x2d8>
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	2b80      	cmp	r3, #128	; 0x80
 8008ea2:	d103      	bne.n	8008eac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	e00e      	b.n	8008eca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f002 fb29 	bl	800b508 <USBD_LL_IsStallEP>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	601a      	str	r2, [r3, #0]
 8008ec2:	e002      	b.n	8008eca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fbd1 	bl	8009678 <USBD_CtlSendData>
              break;
 8008ed6:	e004      	b.n	8008ee2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fb5b 	bl	8009596 <USBD_CtlError>
              break;
 8008ee0:	bf00      	nop
          }
          break;
 8008ee2:	e004      	b.n	8008eee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fb55 	bl	8009596 <USBD_CtlError>
          break;
 8008eec:	bf00      	nop
      }
      break;
 8008eee:	e005      	b.n	8008efc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fb4f 	bl	8009596 <USBD_CtlError>
      break;
 8008ef8:	e000      	b.n	8008efc <USBD_StdEPReq+0x330>
      break;
 8008efa:	bf00      	nop
  }

  return ret;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	885b      	ldrh	r3, [r3, #2]
 8008f22:	0a1b      	lsrs	r3, r3, #8
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	3b01      	subs	r3, #1
 8008f28:	2b06      	cmp	r3, #6
 8008f2a:	f200 8128 	bhi.w	800917e <USBD_GetDescriptor+0x276>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <USBD_GetDescriptor+0x2c>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f51 	.word	0x08008f51
 8008f38:	08008f69 	.word	0x08008f69
 8008f3c:	08008fa9 	.word	0x08008fa9
 8008f40:	0800917f 	.word	0x0800917f
 8008f44:	0800917f 	.word	0x0800917f
 8008f48:	0800911f 	.word	0x0800911f
 8008f4c:	0800914b 	.word	0x0800914b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	7c12      	ldrb	r2, [r2, #16]
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
      break;
 8008f66:	e112      	b.n	800918e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7c1b      	ldrb	r3, [r3, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10d      	bne.n	8008f8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f78:	f107 0208 	add.w	r2, r7, #8
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
 8008f80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	2202      	movs	r2, #2
 8008f88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f8a:	e100      	b.n	800918e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	f107 0208 	add.w	r2, r7, #8
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4798      	blx	r3
 8008f9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	701a      	strb	r2, [r3, #0]
      break;
 8008fa6:	e0f2      	b.n	800918e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	885b      	ldrh	r3, [r3, #2]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b05      	cmp	r3, #5
 8008fb0:	f200 80ac 	bhi.w	800910c <USBD_GetDescriptor+0x204>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <USBD_GetDescriptor+0xb4>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08008fd5 	.word	0x08008fd5
 8008fc0:	08009009 	.word	0x08009009
 8008fc4:	0800903d 	.word	0x0800903d
 8008fc8:	08009071 	.word	0x08009071
 8008fcc:	080090a5 	.word	0x080090a5
 8008fd0:	080090d9 	.word	0x080090d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7c12      	ldrb	r2, [r2, #16]
 8008fec:	f107 0108 	add.w	r1, r7, #8
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4798      	blx	r3
 8008ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff6:	e091      	b.n	800911c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 facb 	bl	8009596 <USBD_CtlError>
            err++;
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	3301      	adds	r3, #1
 8009004:	72fb      	strb	r3, [r7, #11]
          break;
 8009006:	e089      	b.n	800911c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00b      	beq.n	800902c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	7c12      	ldrb	r2, [r2, #16]
 8009020:	f107 0108 	add.w	r1, r7, #8
 8009024:	4610      	mov	r0, r2
 8009026:	4798      	blx	r3
 8009028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800902a:	e077      	b.n	800911c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fab1 	bl	8009596 <USBD_CtlError>
            err++;
 8009034:	7afb      	ldrb	r3, [r7, #11]
 8009036:	3301      	adds	r3, #1
 8009038:	72fb      	strb	r3, [r7, #11]
          break;
 800903a:	e06f      	b.n	800911c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	7c12      	ldrb	r2, [r2, #16]
 8009054:	f107 0108 	add.w	r1, r7, #8
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
 800905c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800905e:	e05d      	b.n	800911c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa97 	bl	8009596 <USBD_CtlError>
            err++;
 8009068:	7afb      	ldrb	r3, [r7, #11]
 800906a:	3301      	adds	r3, #1
 800906c:	72fb      	strb	r3, [r7, #11]
          break;
 800906e:	e055      	b.n	800911c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00b      	beq.n	8009094 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	7c12      	ldrb	r2, [r2, #16]
 8009088:	f107 0108 	add.w	r1, r7, #8
 800908c:	4610      	mov	r0, r2
 800908e:	4798      	blx	r3
 8009090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009092:	e043      	b.n	800911c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa7d 	bl	8009596 <USBD_CtlError>
            err++;
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	3301      	adds	r3, #1
 80090a0:	72fb      	strb	r3, [r7, #11]
          break;
 80090a2:	e03b      	b.n	800911c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	7c12      	ldrb	r2, [r2, #16]
 80090bc:	f107 0108 	add.w	r1, r7, #8
 80090c0:	4610      	mov	r0, r2
 80090c2:	4798      	blx	r3
 80090c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090c6:	e029      	b.n	800911c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa63 	bl	8009596 <USBD_CtlError>
            err++;
 80090d0:	7afb      	ldrb	r3, [r7, #11]
 80090d2:	3301      	adds	r3, #1
 80090d4:	72fb      	strb	r3, [r7, #11]
          break;
 80090d6:	e021      	b.n	800911c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00b      	beq.n	80090fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	7c12      	ldrb	r2, [r2, #16]
 80090f0:	f107 0108 	add.w	r1, r7, #8
 80090f4:	4610      	mov	r0, r2
 80090f6:	4798      	blx	r3
 80090f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090fa:	e00f      	b.n	800911c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fa49 	bl	8009596 <USBD_CtlError>
            err++;
 8009104:	7afb      	ldrb	r3, [r7, #11]
 8009106:	3301      	adds	r3, #1
 8009108:	72fb      	strb	r3, [r7, #11]
          break;
 800910a:	e007      	b.n	800911c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fa41 	bl	8009596 <USBD_CtlError>
          err++;
 8009114:	7afb      	ldrb	r3, [r7, #11]
 8009116:	3301      	adds	r3, #1
 8009118:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800911a:	bf00      	nop
      }
      break;
 800911c:	e037      	b.n	800918e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	7c1b      	ldrb	r3, [r3, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912e:	f107 0208 	add.w	r2, r7, #8
 8009132:	4610      	mov	r0, r2
 8009134:	4798      	blx	r3
 8009136:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009138:	e029      	b.n	800918e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fa2a 	bl	8009596 <USBD_CtlError>
        err++;
 8009142:	7afb      	ldrb	r3, [r7, #11]
 8009144:	3301      	adds	r3, #1
 8009146:	72fb      	strb	r3, [r7, #11]
      break;
 8009148:	e021      	b.n	800918e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7c1b      	ldrb	r3, [r3, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10d      	bne.n	800916e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915a:	f107 0208 	add.w	r2, r7, #8
 800915e:	4610      	mov	r0, r2
 8009160:	4798      	blx	r3
 8009162:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3301      	adds	r3, #1
 8009168:	2207      	movs	r2, #7
 800916a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800916c:	e00f      	b.n	800918e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fa10 	bl	8009596 <USBD_CtlError>
        err++;
 8009176:	7afb      	ldrb	r3, [r7, #11]
 8009178:	3301      	adds	r3, #1
 800917a:	72fb      	strb	r3, [r7, #11]
      break;
 800917c:	e007      	b.n	800918e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fa08 	bl	8009596 <USBD_CtlError>
      err++;
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	3301      	adds	r3, #1
 800918a:	72fb      	strb	r3, [r7, #11]
      break;
 800918c:	bf00      	nop
  }

  if (err != 0U)
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d11e      	bne.n	80091d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	88db      	ldrh	r3, [r3, #6]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d016      	beq.n	80091ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800919c:	893b      	ldrh	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00e      	beq.n	80091c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	88da      	ldrh	r2, [r3, #6]
 80091a6:	893b      	ldrh	r3, [r7, #8]
 80091a8:	4293      	cmp	r3, r2
 80091aa:	bf28      	it	cs
 80091ac:	4613      	movcs	r3, r2
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091b2:	893b      	ldrh	r3, [r7, #8]
 80091b4:	461a      	mov	r2, r3
 80091b6:	68f9      	ldr	r1, [r7, #12]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fa5d 	bl	8009678 <USBD_CtlSendData>
 80091be:	e009      	b.n	80091d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f9e7 	bl	8009596 <USBD_CtlError>
 80091c8:	e004      	b.n	80091d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 faae 	bl	800972c <USBD_CtlSendStatus>
 80091d0:	e000      	b.n	80091d4 <USBD_GetDescriptor+0x2cc>
    return;
 80091d2:	bf00      	nop
  }
}
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop

080091dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	889b      	ldrh	r3, [r3, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d131      	bne.n	8009252 <USBD_SetAddress+0x76>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	88db      	ldrh	r3, [r3, #6]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d12d      	bne.n	8009252 <USBD_SetAddress+0x76>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	885b      	ldrh	r3, [r3, #2]
 80091fa:	2b7f      	cmp	r3, #127	; 0x7f
 80091fc:	d829      	bhi.n	8009252 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	885b      	ldrh	r3, [r3, #2]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009208:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b03      	cmp	r3, #3
 8009214:	d104      	bne.n	8009220 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f9bc 	bl	8009596 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921e:	e01d      	b.n	800925c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	7bfa      	ldrb	r2, [r7, #15]
 8009224:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f002 f997 	bl	800b560 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa7a 	bl	800972c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2202      	movs	r2, #2
 8009242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009246:	e009      	b.n	800925c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009250:	e004      	b.n	800925c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f99e 	bl	8009596 <USBD_CtlError>
  }
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	885b      	ldrh	r3, [r3, #2]
 8009276:	b2da      	uxtb	r2, r3
 8009278:	4b4e      	ldr	r3, [pc, #312]	; (80093b4 <USBD_SetConfig+0x150>)
 800927a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800927c:	4b4d      	ldr	r3, [pc, #308]	; (80093b4 <USBD_SetConfig+0x150>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d905      	bls.n	8009290 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f985 	bl	8009596 <USBD_CtlError>
    return USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	e08c      	b.n	80093aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b02      	cmp	r3, #2
 800929a:	d002      	beq.n	80092a2 <USBD_SetConfig+0x3e>
 800929c:	2b03      	cmp	r3, #3
 800929e:	d029      	beq.n	80092f4 <USBD_SetConfig+0x90>
 80092a0:	e075      	b.n	800938e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092a2:	4b44      	ldr	r3, [pc, #272]	; (80093b4 <USBD_SetConfig+0x150>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d020      	beq.n	80092ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80092aa:	4b42      	ldr	r3, [pc, #264]	; (80093b4 <USBD_SetConfig+0x150>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092b4:	4b3f      	ldr	r3, [pc, #252]	; (80093b4 <USBD_SetConfig+0x150>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fe ffe7 	bl	800828e <USBD_SetClassConfig>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d008      	beq.n	80092dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f962 	bl	8009596 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2202      	movs	r2, #2
 80092d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092da:	e065      	b.n	80093a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fa25 	bl	800972c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2203      	movs	r2, #3
 80092e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092ea:	e05d      	b.n	80093a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fa1d 	bl	800972c <USBD_CtlSendStatus>
      break;
 80092f2:	e059      	b.n	80093a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092f4:	4b2f      	ldr	r3, [pc, #188]	; (80093b4 <USBD_SetConfig+0x150>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d112      	bne.n	8009322 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009304:	4b2b      	ldr	r3, [pc, #172]	; (80093b4 <USBD_SetConfig+0x150>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800930e:	4b29      	ldr	r3, [pc, #164]	; (80093b4 <USBD_SetConfig+0x150>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7fe ffd6 	bl	80082c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa06 	bl	800972c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009320:	e042      	b.n	80093a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009322:	4b24      	ldr	r3, [pc, #144]	; (80093b4 <USBD_SetConfig+0x150>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	429a      	cmp	r2, r3
 800932e:	d02a      	beq.n	8009386 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7fe ffc4 	bl	80082c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800933e:	4b1d      	ldr	r3, [pc, #116]	; (80093b4 <USBD_SetConfig+0x150>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009348:	4b1a      	ldr	r3, [pc, #104]	; (80093b4 <USBD_SetConfig+0x150>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7fe ff9d 	bl	800828e <USBD_SetClassConfig>
 8009354:	4603      	mov	r3, r0
 8009356:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00f      	beq.n	800937e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f918 	bl	8009596 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	b2db      	uxtb	r3, r3
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7fe ffa9 	bl	80082c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800937c:	e014      	b.n	80093a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f9d4 	bl	800972c <USBD_CtlSendStatus>
      break;
 8009384:	e010      	b.n	80093a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f9d0 	bl	800972c <USBD_CtlSendStatus>
      break;
 800938c:	e00c      	b.n	80093a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f900 	bl	8009596 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009396:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <USBD_SetConfig+0x150>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7fe ff92 	bl	80082c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093a2:	2303      	movs	r3, #3
 80093a4:	73fb      	strb	r3, [r7, #15]
      break;
 80093a6:	bf00      	nop
  }

  return ret;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	200006c4 	.word	0x200006c4

080093b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	88db      	ldrh	r3, [r3, #6]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d004      	beq.n	80093d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f8e2 	bl	8009596 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093d2:	e023      	b.n	800941c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	dc02      	bgt.n	80093e6 <USBD_GetConfig+0x2e>
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	dc03      	bgt.n	80093ec <USBD_GetConfig+0x34>
 80093e4:	e015      	b.n	8009412 <USBD_GetConfig+0x5a>
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d00b      	beq.n	8009402 <USBD_GetConfig+0x4a>
 80093ea:	e012      	b.n	8009412 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3308      	adds	r3, #8
 80093f6:	2201      	movs	r2, #1
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f93c 	bl	8009678 <USBD_CtlSendData>
        break;
 8009400:	e00c      	b.n	800941c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3304      	adds	r3, #4
 8009406:	2201      	movs	r2, #1
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f934 	bl	8009678 <USBD_CtlSendData>
        break;
 8009410:	e004      	b.n	800941c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f8be 	bl	8009596 <USBD_CtlError>
        break;
 800941a:	bf00      	nop
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009434:	b2db      	uxtb	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	2b02      	cmp	r3, #2
 800943a:	d81e      	bhi.n	800947a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	88db      	ldrh	r3, [r3, #6]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d004      	beq.n	800944e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f8a5 	bl	8009596 <USBD_CtlError>
        break;
 800944c:	e01a      	b.n	8009484 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f043 0202 	orr.w	r2, r3, #2
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	330c      	adds	r3, #12
 800946e:	2202      	movs	r2, #2
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f900 	bl	8009678 <USBD_CtlSendData>
      break;
 8009478:	e004      	b.n	8009484 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f88a 	bl	8009596 <USBD_CtlError>
      break;
 8009482:	bf00      	nop
  }
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	885b      	ldrh	r3, [r3, #2]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d107      	bne.n	80094ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f940 	bl	800972c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80094ac:	e013      	b.n	80094d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	885b      	ldrh	r3, [r3, #2]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d10b      	bne.n	80094ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	889b      	ldrh	r3, [r3, #4]
 80094ba:	0a1b      	lsrs	r3, r3, #8
 80094bc:	b29b      	uxth	r3, r3
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f930 	bl	800972c <USBD_CtlSendStatus>
}
 80094cc:	e003      	b.n	80094d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f860 	bl	8009596 <USBD_CtlError>
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	3b01      	subs	r3, #1
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d80b      	bhi.n	800950e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	885b      	ldrh	r3, [r3, #2]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d10c      	bne.n	8009518 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f910 	bl	800972c <USBD_CtlSendStatus>
      }
      break;
 800950c:	e004      	b.n	8009518 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f840 	bl	8009596 <USBD_CtlError>
      break;
 8009516:	e000      	b.n	800951a <USBD_ClrFeature+0x3c>
      break;
 8009518:	bf00      	nop
  }
}
 800951a:	bf00      	nop
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	781a      	ldrb	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3301      	adds	r3, #1
 800953c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	781a      	ldrb	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3301      	adds	r3, #1
 800954a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f7ff fa41 	bl	80089d4 <SWAPBYTE>
 8009552:	4603      	mov	r3, r0
 8009554:	461a      	mov	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3301      	adds	r3, #1
 800955e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7ff fa34 	bl	80089d4 <SWAPBYTE>
 800956c:	4603      	mov	r3, r0
 800956e:	461a      	mov	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3301      	adds	r3, #1
 8009578:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3301      	adds	r3, #1
 800957e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7ff fa27 	bl	80089d4 <SWAPBYTE>
 8009586:	4603      	mov	r3, r0
 8009588:	461a      	mov	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	80da      	strh	r2, [r3, #6]
}
 800958e:	bf00      	nop
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095a0:	2180      	movs	r1, #128	; 0x80
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 ff72 	bl	800b48c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095a8:	2100      	movs	r1, #0
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 ff6e 	bl	800b48c <USBD_LL_StallEP>
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d036      	beq.n	800963c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095d2:	6938      	ldr	r0, [r7, #16]
 80095d4:	f000 f836 	bl	8009644 <USBD_GetLen>
 80095d8:	4603      	mov	r3, r0
 80095da:	3301      	adds	r3, #1
 80095dc:	b29b      	uxth	r3, r3
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	4413      	add	r3, r2
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	7812      	ldrb	r2, [r2, #0]
 80095f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	3301      	adds	r3, #1
 80095f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	2203      	movs	r2, #3
 8009600:	701a      	strb	r2, [r3, #0]
  idx++;
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	3301      	adds	r3, #1
 8009606:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009608:	e013      	b.n	8009632 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	4413      	add	r3, r2
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	7812      	ldrb	r2, [r2, #0]
 8009614:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	3301      	adds	r3, #1
 800961a:	613b      	str	r3, [r7, #16]
    idx++;
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	3301      	adds	r3, #1
 8009620:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009622:	7dfb      	ldrb	r3, [r7, #23]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	4413      	add	r3, r2
 8009628:	2200      	movs	r2, #0
 800962a:	701a      	strb	r2, [r3, #0]
    idx++;
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	3301      	adds	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e7      	bne.n	800960a <USBD_GetString+0x52>
 800963a:	e000      	b.n	800963e <USBD_GetString+0x86>
    return;
 800963c:	bf00      	nop
  }
}
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009654:	e005      	b.n	8009662 <USBD_GetLen+0x1e>
  {
    len++;
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	3301      	adds	r3, #1
 800965a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	3301      	adds	r3, #1
 8009660:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1f5      	bne.n	8009656 <USBD_GetLen+0x12>
  }

  return len;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2202      	movs	r2, #2
 8009688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	2100      	movs	r1, #0
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f001 ff7d 	bl	800b59e <USBD_LL_Transmit>

  return USBD_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	2100      	movs	r1, #0
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f001 ff6c 	bl	800b59e <USBD_LL_Transmit>

  return USBD_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2203      	movs	r2, #3
 80096e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	2100      	movs	r1, #0
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f001 ff70 	bl	800b5e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	2100      	movs	r1, #0
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f001 ff5f 	bl	800b5e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2204      	movs	r2, #4
 8009738:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800973c:	2300      	movs	r3, #0
 800973e:	2200      	movs	r2, #0
 8009740:	2100      	movs	r1, #0
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 ff2b 	bl	800b59e <USBD_LL_Transmit>

  return USBD_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2205      	movs	r2, #5
 800975e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009762:	2300      	movs	r3, #0
 8009764:	2200      	movs	r2, #0
 8009766:	2100      	movs	r1, #0
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 ff39 	bl	800b5e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800978a:	2b84      	cmp	r3, #132	; 0x84
 800978c:	d005      	beq.n	800979a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800978e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4413      	add	r3, r2
 8009796:	3303      	adds	r3, #3
 8009798:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800979a:	68fb      	ldr	r3, [r7, #12]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80097ac:	f000 faf6 	bl	8009d9c <vTaskStartScheduler>
  
  return osOK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80097b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097b8:	b089      	sub	sp, #36	; 0x24
 80097ba:	af04      	add	r7, sp, #16
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d020      	beq.n	800980a <osThreadCreate+0x54>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01c      	beq.n	800980a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685c      	ldr	r4, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681d      	ldr	r5, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	691e      	ldr	r6, [r3, #16]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff ffc8 	bl	8009778 <makeFreeRtosPriority>
 80097e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097f2:	9202      	str	r2, [sp, #8]
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	9100      	str	r1, [sp, #0]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	4632      	mov	r2, r6
 80097fc:	4629      	mov	r1, r5
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 f8ed 	bl	80099de <xTaskCreateStatic>
 8009804:	4603      	mov	r3, r0
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	e01c      	b.n	8009844 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685c      	ldr	r4, [r3, #4]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009816:	b29e      	uxth	r6, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff ffaa 	bl	8009778 <makeFreeRtosPriority>
 8009824:	4602      	mov	r2, r0
 8009826:	f107 030c 	add.w	r3, r7, #12
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	9200      	str	r2, [sp, #0]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	4632      	mov	r2, r6
 8009832:	4629      	mov	r1, r5
 8009834:	4620      	mov	r0, r4
 8009836:	f000 f92f 	bl	8009a98 <xTaskCreate>
 800983a:	4603      	mov	r3, r0
 800983c:	2b01      	cmp	r3, #1
 800983e:	d001      	beq.n	8009844 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009840:	2300      	movs	r3, #0
 8009842:	e000      	b.n	8009846 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009844:	68fb      	ldr	r3, [r7, #12]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800984e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <osDelay+0x16>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	e000      	b.n	8009866 <osDelay+0x18>
 8009864:	2301      	movs	r3, #1
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fa64 	bl	8009d34 <vTaskDelay>
  
  return osOK;
 800986c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f103 0208 	add.w	r2, r3, #8
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800988e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f103 0208 	add.w	r2, r3, #8
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f103 0208 	add.w	r2, r3, #8
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098aa:	bf00      	nop
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	601a      	str	r2, [r3, #0]
}
 800990c:	bf00      	nop
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800992e:	d103      	bne.n	8009938 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	e00c      	b.n	8009952 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3308      	adds	r3, #8
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	e002      	b.n	8009946 <vListInsert+0x2e>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	429a      	cmp	r2, r3
 8009950:	d2f6      	bcs.n	8009940 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	601a      	str	r2, [r3, #0]
}
 800997e:	bf00      	nop
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800998a:	b480      	push	{r7}
 800998c:	b085      	sub	sp, #20
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	6892      	ldr	r2, [r2, #8]
 80099a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6852      	ldr	r2, [r2, #4]
 80099aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d103      	bne.n	80099be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	1e5a      	subs	r2, r3, #1
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b08e      	sub	sp, #56	; 0x38
 80099e2:	af04      	add	r7, sp, #16
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	607a      	str	r2, [r7, #4]
 80099ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80099ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10a      	bne.n	8009a08 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a04:	bf00      	nop
 8009a06:	e7fe      	b.n	8009a06 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <xTaskCreateStatic+0x46>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	61fb      	str	r3, [r7, #28]
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a24:	23b4      	movs	r3, #180	; 0xb4
 8009a26:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2bb4      	cmp	r3, #180	; 0xb4
 8009a2c:	d00a      	beq.n	8009a44 <xTaskCreateStatic+0x66>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	61bb      	str	r3, [r7, #24]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01e      	beq.n	8009a8a <xTaskCreateStatic+0xac>
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d01b      	beq.n	8009a8a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a64:	2300      	movs	r3, #0
 8009a66:	9303      	str	r3, [sp, #12]
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	9302      	str	r3, [sp, #8]
 8009a6c:	f107 0314 	add.w	r3, r7, #20
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	68b9      	ldr	r1, [r7, #8]
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 f851 	bl	8009b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a84:	f000 f8ec 	bl	8009c60 <prvAddNewTaskToReadyList>
 8009a88:	e001      	b.n	8009a8e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a8e:	697b      	ldr	r3, [r7, #20]
	}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3728      	adds	r7, #40	; 0x28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08c      	sub	sp, #48	; 0x30
 8009a9c:	af04      	add	r7, sp, #16
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	603b      	str	r3, [r7, #0]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009aa8:	88fb      	ldrh	r3, [r7, #6]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 fef3 	bl	800a898 <pvPortMalloc>
 8009ab2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00e      	beq.n	8009ad8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009aba:	20b4      	movs	r0, #180	; 0xb4
 8009abc:	f000 feec 	bl	800a898 <pvPortMalloc>
 8009ac0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	631a      	str	r2, [r3, #48]	; 0x30
 8009ace:	e005      	b.n	8009adc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ad0:	6978      	ldr	r0, [r7, #20]
 8009ad2:	f000 ffad 	bl	800aa30 <vPortFree>
 8009ad6:	e001      	b.n	8009adc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d017      	beq.n	8009b12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009aea:	88fa      	ldrh	r2, [r7, #6]
 8009aec:	2300      	movs	r3, #0
 8009aee:	9303      	str	r3, [sp, #12]
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	9302      	str	r3, [sp, #8]
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	9301      	str	r3, [sp, #4]
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 f80f 	bl	8009b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b06:	69f8      	ldr	r0, [r7, #28]
 8009b08:	f000 f8aa 	bl	8009c60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	61bb      	str	r3, [r7, #24]
 8009b10:	e002      	b.n	8009b18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b18:	69bb      	ldr	r3, [r7, #24]
	}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3720      	adds	r7, #32
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4413      	add	r3, r2
 8009b42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	f023 0307 	bic.w	r3, r3, #7
 8009b4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	f003 0307 	and.w	r3, r3, #7
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <prvInitialiseNewTask+0x48>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	617b      	str	r3, [r7, #20]
}
 8009b68:	bf00      	nop
 8009b6a:	e7fe      	b.n	8009b6a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d01f      	beq.n	8009bb2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b72:	2300      	movs	r3, #0
 8009b74:	61fb      	str	r3, [r7, #28]
 8009b76:	e012      	b.n	8009b9e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	7819      	ldrb	r1, [r3, #0]
 8009b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	4413      	add	r3, r2
 8009b86:	3334      	adds	r3, #52	; 0x34
 8009b88:	460a      	mov	r2, r1
 8009b8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d006      	beq.n	8009ba6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	61fb      	str	r3, [r7, #28]
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	2b0f      	cmp	r3, #15
 8009ba2:	d9e9      	bls.n	8009b78 <prvInitialiseNewTask+0x54>
 8009ba4:	e000      	b.n	8009ba8 <prvInitialiseNewTask+0x84>
			{
				break;
 8009ba6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bb0:	e003      	b.n	8009bba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	2b06      	cmp	r3, #6
 8009bbe:	d901      	bls.n	8009bc4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009bc0:	2306      	movs	r3, #6
 8009bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff fe6b 	bl	80098b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	3318      	adds	r3, #24
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff fe66 	bl	80098b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	f1c3 0207 	rsb	r2, r3, #7
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c12:	334c      	adds	r3, #76	; 0x4c
 8009c14:	2260      	movs	r2, #96	; 0x60
 8009c16:	2100      	movs	r1, #0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f001 fd8d 	bl	800b738 <memset>
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <prvInitialiseNewTask+0x130>)
 8009c22:	651a      	str	r2, [r3, #80]	; 0x50
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	4a0c      	ldr	r2, [pc, #48]	; (8009c58 <prvInitialiseNewTask+0x134>)
 8009c28:	655a      	str	r2, [r3, #84]	; 0x54
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	4a0b      	ldr	r2, [pc, #44]	; (8009c5c <prvInitialiseNewTask+0x138>)
 8009c2e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	68f9      	ldr	r1, [r7, #12]
 8009c34:	69b8      	ldr	r0, [r7, #24]
 8009c36:	f000 fc1f 	bl	800a478 <pxPortInitialiseStack>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c4c:	bf00      	nop
 8009c4e:	3720      	adds	r7, #32
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	0800b9e4 	.word	0x0800b9e4
 8009c58:	0800ba04 	.word	0x0800ba04
 8009c5c:	0800b9c4 	.word	0x0800b9c4

08009c60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c68:	f000 fd34 	bl	800a6d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c6c:	4b2a      	ldr	r3, [pc, #168]	; (8009d18 <prvAddNewTaskToReadyList+0xb8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	4a29      	ldr	r2, [pc, #164]	; (8009d18 <prvAddNewTaskToReadyList+0xb8>)
 8009c74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c76:	4b29      	ldr	r3, [pc, #164]	; (8009d1c <prvAddNewTaskToReadyList+0xbc>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d109      	bne.n	8009c92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c7e:	4a27      	ldr	r2, [pc, #156]	; (8009d1c <prvAddNewTaskToReadyList+0xbc>)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c84:	4b24      	ldr	r3, [pc, #144]	; (8009d18 <prvAddNewTaskToReadyList+0xb8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d110      	bne.n	8009cae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c8c:	f000 facc 	bl	800a228 <prvInitialiseTaskLists>
 8009c90:	e00d      	b.n	8009cae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c92:	4b23      	ldr	r3, [pc, #140]	; (8009d20 <prvAddNewTaskToReadyList+0xc0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d109      	bne.n	8009cae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c9a:	4b20      	ldr	r3, [pc, #128]	; (8009d1c <prvAddNewTaskToReadyList+0xbc>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d802      	bhi.n	8009cae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ca8:	4a1c      	ldr	r2, [pc, #112]	; (8009d1c <prvAddNewTaskToReadyList+0xbc>)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cae:	4b1d      	ldr	r3, [pc, #116]	; (8009d24 <prvAddNewTaskToReadyList+0xc4>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	4a1b      	ldr	r2, [pc, #108]	; (8009d24 <prvAddNewTaskToReadyList+0xc4>)
 8009cb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	409a      	lsls	r2, r3
 8009cc0:	4b19      	ldr	r3, [pc, #100]	; (8009d28 <prvAddNewTaskToReadyList+0xc8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	4a18      	ldr	r2, [pc, #96]	; (8009d28 <prvAddNewTaskToReadyList+0xc8>)
 8009cc8:	6013      	str	r3, [r2, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cce:	4613      	mov	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4a15      	ldr	r2, [pc, #84]	; (8009d2c <prvAddNewTaskToReadyList+0xcc>)
 8009cd8:	441a      	add	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3304      	adds	r3, #4
 8009cde:	4619      	mov	r1, r3
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	f7ff fdf5 	bl	80098d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ce6:	f000 fd25 	bl	800a734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009cea:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <prvAddNewTaskToReadyList+0xc0>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00e      	beq.n	8009d10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cf2:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <prvAddNewTaskToReadyList+0xbc>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d207      	bcs.n	8009d10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d00:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <prvAddNewTaskToReadyList+0xd0>)
 8009d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	200007c8 	.word	0x200007c8
 8009d1c:	200006c8 	.word	0x200006c8
 8009d20:	200007d4 	.word	0x200007d4
 8009d24:	200007e4 	.word	0x200007e4
 8009d28:	200007d0 	.word	0x200007d0
 8009d2c:	200006cc 	.word	0x200006cc
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d017      	beq.n	8009d76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <vTaskDelay+0x60>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00a      	beq.n	8009d64 <vTaskDelay+0x30>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	60bb      	str	r3, [r7, #8]
}
 8009d60:	bf00      	nop
 8009d62:	e7fe      	b.n	8009d62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d64:	f000 f884 	bl	8009e70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d68:	2100      	movs	r1, #0
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fb1e 	bl	800a3ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d70:	f000 f88c 	bl	8009e8c <xTaskResumeAll>
 8009d74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d107      	bne.n	8009d8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d7c:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <vTaskDelay+0x64>)
 8009d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d8c:	bf00      	nop
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	200007f0 	.word	0x200007f0
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08a      	sub	sp, #40	; 0x28
 8009da0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009daa:	463a      	mov	r2, r7
 8009dac:	1d39      	adds	r1, r7, #4
 8009dae:	f107 0308 	add.w	r3, r7, #8
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7f6 fb96 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009db8:	6839      	ldr	r1, [r7, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	9202      	str	r2, [sp, #8]
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	460a      	mov	r2, r1
 8009dca:	4921      	ldr	r1, [pc, #132]	; (8009e50 <vTaskStartScheduler+0xb4>)
 8009dcc:	4821      	ldr	r0, [pc, #132]	; (8009e54 <vTaskStartScheduler+0xb8>)
 8009dce:	f7ff fe06 	bl	80099de <xTaskCreateStatic>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	4a20      	ldr	r2, [pc, #128]	; (8009e58 <vTaskStartScheduler+0xbc>)
 8009dd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009dd8:	4b1f      	ldr	r3, [pc, #124]	; (8009e58 <vTaskStartScheduler+0xbc>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009de0:	2301      	movs	r3, #1
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	e001      	b.n	8009dea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d11b      	bne.n	8009e28 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	613b      	str	r3, [r7, #16]
}
 8009e02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e04:	4b15      	ldr	r3, [pc, #84]	; (8009e5c <vTaskStartScheduler+0xc0>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	334c      	adds	r3, #76	; 0x4c
 8009e0a:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <vTaskStartScheduler+0xc4>)
 8009e0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e0e:	4b15      	ldr	r3, [pc, #84]	; (8009e64 <vTaskStartScheduler+0xc8>)
 8009e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e16:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <vTaskStartScheduler+0xcc>)
 8009e18:	2201      	movs	r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e1c:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <vTaskStartScheduler+0xd0>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e22:	f000 fbb5 	bl	800a590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e26:	e00e      	b.n	8009e46 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e2e:	d10a      	bne.n	8009e46 <vTaskStartScheduler+0xaa>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	60fb      	str	r3, [r7, #12]
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <vTaskStartScheduler+0xa8>
}
 8009e46:	bf00      	nop
 8009e48:	3718      	adds	r7, #24
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	0800b954 	.word	0x0800b954
 8009e54:	0800a1f9 	.word	0x0800a1f9
 8009e58:	200007ec 	.word	0x200007ec
 8009e5c:	200006c8 	.word	0x200006c8
 8009e60:	20000108 	.word	0x20000108
 8009e64:	200007e8 	.word	0x200007e8
 8009e68:	200007d4 	.word	0x200007d4
 8009e6c:	200007cc 	.word	0x200007cc

08009e70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e70:	b480      	push	{r7}
 8009e72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <vTaskSuspendAll+0x18>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	4a03      	ldr	r2, [pc, #12]	; (8009e88 <vTaskSuspendAll+0x18>)
 8009e7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e7e:	bf00      	nop
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	200007f0 	.word	0x200007f0

08009e8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e9a:	4b41      	ldr	r3, [pc, #260]	; (8009fa0 <xTaskResumeAll+0x114>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	603b      	str	r3, [r7, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	e7fe      	b.n	8009eb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009eb8:	f000 fc0c 	bl	800a6d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ebc:	4b38      	ldr	r3, [pc, #224]	; (8009fa0 <xTaskResumeAll+0x114>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	4a37      	ldr	r2, [pc, #220]	; (8009fa0 <xTaskResumeAll+0x114>)
 8009ec4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ec6:	4b36      	ldr	r3, [pc, #216]	; (8009fa0 <xTaskResumeAll+0x114>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d161      	bne.n	8009f92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ece:	4b35      	ldr	r3, [pc, #212]	; (8009fa4 <xTaskResumeAll+0x118>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d05d      	beq.n	8009f92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ed6:	e02e      	b.n	8009f36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed8:	4b33      	ldr	r3, [pc, #204]	; (8009fa8 <xTaskResumeAll+0x11c>)
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3318      	adds	r3, #24
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff fd50 	bl	800998a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3304      	adds	r3, #4
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7ff fd4b 	bl	800998a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	2201      	movs	r2, #1
 8009efa:	409a      	lsls	r2, r3
 8009efc:	4b2b      	ldr	r3, [pc, #172]	; (8009fac <xTaskResumeAll+0x120>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	4a2a      	ldr	r2, [pc, #168]	; (8009fac <xTaskResumeAll+0x120>)
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4a27      	ldr	r2, [pc, #156]	; (8009fb0 <xTaskResumeAll+0x124>)
 8009f14:	441a      	add	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	f7ff fcd7 	bl	80098d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f26:	4b23      	ldr	r3, [pc, #140]	; (8009fb4 <xTaskResumeAll+0x128>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d302      	bcc.n	8009f36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009f30:	4b21      	ldr	r3, [pc, #132]	; (8009fb8 <xTaskResumeAll+0x12c>)
 8009f32:	2201      	movs	r2, #1
 8009f34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f36:	4b1c      	ldr	r3, [pc, #112]	; (8009fa8 <xTaskResumeAll+0x11c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1cc      	bne.n	8009ed8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f44:	f000 fa12 	bl	800a36c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f48:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <xTaskResumeAll+0x130>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d010      	beq.n	8009f76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f54:	f000 f836 	bl	8009fc4 <xTaskIncrementTick>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009f5e:	4b16      	ldr	r3, [pc, #88]	; (8009fb8 <xTaskResumeAll+0x12c>)
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1f1      	bne.n	8009f54 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009f70:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <xTaskResumeAll+0x130>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f76:	4b10      	ldr	r3, [pc, #64]	; (8009fb8 <xTaskResumeAll+0x12c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d009      	beq.n	8009f92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f82:	4b0f      	ldr	r3, [pc, #60]	; (8009fc0 <xTaskResumeAll+0x134>)
 8009f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f92:	f000 fbcf 	bl	800a734 <vPortExitCritical>

	return xAlreadyYielded;
 8009f96:	68bb      	ldr	r3, [r7, #8]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	200007f0 	.word	0x200007f0
 8009fa4:	200007c8 	.word	0x200007c8
 8009fa8:	20000788 	.word	0x20000788
 8009fac:	200007d0 	.word	0x200007d0
 8009fb0:	200006cc 	.word	0x200006cc
 8009fb4:	200006c8 	.word	0x200006c8
 8009fb8:	200007dc 	.word	0x200007dc
 8009fbc:	200007d8 	.word	0x200007d8
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fce:	4b4e      	ldr	r3, [pc, #312]	; (800a108 <xTaskIncrementTick+0x144>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f040 808e 	bne.w	800a0f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009fd8:	4b4c      	ldr	r3, [pc, #304]	; (800a10c <xTaskIncrementTick+0x148>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009fe0:	4a4a      	ldr	r2, [pc, #296]	; (800a10c <xTaskIncrementTick+0x148>)
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d120      	bne.n	800a02e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009fec:	4b48      	ldr	r3, [pc, #288]	; (800a110 <xTaskIncrementTick+0x14c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <xTaskIncrementTick+0x48>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	603b      	str	r3, [r7, #0]
}
 800a008:	bf00      	nop
 800a00a:	e7fe      	b.n	800a00a <xTaskIncrementTick+0x46>
 800a00c:	4b40      	ldr	r3, [pc, #256]	; (800a110 <xTaskIncrementTick+0x14c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	4b40      	ldr	r3, [pc, #256]	; (800a114 <xTaskIncrementTick+0x150>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a3e      	ldr	r2, [pc, #248]	; (800a110 <xTaskIncrementTick+0x14c>)
 800a018:	6013      	str	r3, [r2, #0]
 800a01a:	4a3e      	ldr	r2, [pc, #248]	; (800a114 <xTaskIncrementTick+0x150>)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	4b3d      	ldr	r3, [pc, #244]	; (800a118 <xTaskIncrementTick+0x154>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3301      	adds	r3, #1
 800a026:	4a3c      	ldr	r2, [pc, #240]	; (800a118 <xTaskIncrementTick+0x154>)
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	f000 f99f 	bl	800a36c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a02e:	4b3b      	ldr	r3, [pc, #236]	; (800a11c <xTaskIncrementTick+0x158>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	429a      	cmp	r2, r3
 800a036:	d348      	bcc.n	800a0ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a038:	4b35      	ldr	r3, [pc, #212]	; (800a110 <xTaskIncrementTick+0x14c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d104      	bne.n	800a04c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a042:	4b36      	ldr	r3, [pc, #216]	; (800a11c <xTaskIncrementTick+0x158>)
 800a044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a048:	601a      	str	r2, [r3, #0]
					break;
 800a04a:	e03e      	b.n	800a0ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a04c:	4b30      	ldr	r3, [pc, #192]	; (800a110 <xTaskIncrementTick+0x14c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	429a      	cmp	r2, r3
 800a062:	d203      	bcs.n	800a06c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a064:	4a2d      	ldr	r2, [pc, #180]	; (800a11c <xTaskIncrementTick+0x158>)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a06a:	e02e      	b.n	800a0ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3304      	adds	r3, #4
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff fc8a 	bl	800998a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	3318      	adds	r3, #24
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff fc81 	bl	800998a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	2201      	movs	r2, #1
 800a08e:	409a      	lsls	r2, r3
 800a090:	4b23      	ldr	r3, [pc, #140]	; (800a120 <xTaskIncrementTick+0x15c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4313      	orrs	r3, r2
 800a096:	4a22      	ldr	r2, [pc, #136]	; (800a120 <xTaskIncrementTick+0x15c>)
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09e:	4613      	mov	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4a1f      	ldr	r2, [pc, #124]	; (800a124 <xTaskIncrementTick+0x160>)
 800a0a8:	441a      	add	r2, r3
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7ff fc0d 	bl	80098d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ba:	4b1b      	ldr	r3, [pc, #108]	; (800a128 <xTaskIncrementTick+0x164>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d3b9      	bcc.n	800a038 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0c8:	e7b6      	b.n	800a038 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0ca:	4b17      	ldr	r3, [pc, #92]	; (800a128 <xTaskIncrementTick+0x164>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d0:	4914      	ldr	r1, [pc, #80]	; (800a124 <xTaskIncrementTick+0x160>)
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d901      	bls.n	800a0e6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a0e6:	4b11      	ldr	r3, [pc, #68]	; (800a12c <xTaskIncrementTick+0x168>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d007      	beq.n	800a0fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	e004      	b.n	800a0fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0f4:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <xTaskIncrementTick+0x16c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	4a0d      	ldr	r2, [pc, #52]	; (800a130 <xTaskIncrementTick+0x16c>)
 800a0fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0fe:	697b      	ldr	r3, [r7, #20]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	200007f0 	.word	0x200007f0
 800a10c:	200007cc 	.word	0x200007cc
 800a110:	20000780 	.word	0x20000780
 800a114:	20000784 	.word	0x20000784
 800a118:	200007e0 	.word	0x200007e0
 800a11c:	200007e8 	.word	0x200007e8
 800a120:	200007d0 	.word	0x200007d0
 800a124:	200006cc 	.word	0x200006cc
 800a128:	200006c8 	.word	0x200006c8
 800a12c:	200007dc 	.word	0x200007dc
 800a130:	200007d8 	.word	0x200007d8

0800a134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a13a:	4b29      	ldr	r3, [pc, #164]	; (800a1e0 <vTaskSwitchContext+0xac>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d003      	beq.n	800a14a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a142:	4b28      	ldr	r3, [pc, #160]	; (800a1e4 <vTaskSwitchContext+0xb0>)
 800a144:	2201      	movs	r2, #1
 800a146:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a148:	e044      	b.n	800a1d4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a14a:	4b26      	ldr	r3, [pc, #152]	; (800a1e4 <vTaskSwitchContext+0xb0>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a150:	4b25      	ldr	r3, [pc, #148]	; (800a1e8 <vTaskSwitchContext+0xb4>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	fab3 f383 	clz	r3, r3
 800a15c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a15e:	7afb      	ldrb	r3, [r7, #11]
 800a160:	f1c3 031f 	rsb	r3, r3, #31
 800a164:	617b      	str	r3, [r7, #20]
 800a166:	4921      	ldr	r1, [pc, #132]	; (800a1ec <vTaskSwitchContext+0xb8>)
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	4613      	mov	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	440b      	add	r3, r1
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10a      	bne.n	800a190 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	607b      	str	r3, [r7, #4]
}
 800a18c:	bf00      	nop
 800a18e:	e7fe      	b.n	800a18e <vTaskSwitchContext+0x5a>
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4a14      	ldr	r2, [pc, #80]	; (800a1ec <vTaskSwitchContext+0xb8>)
 800a19c:	4413      	add	r3, r2
 800a19e:	613b      	str	r3, [r7, #16]
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	605a      	str	r2, [r3, #4]
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d104      	bne.n	800a1c0 <vTaskSwitchContext+0x8c>
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	605a      	str	r2, [r3, #4]
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	4a0a      	ldr	r2, [pc, #40]	; (800a1f0 <vTaskSwitchContext+0xbc>)
 800a1c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a1ca:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <vTaskSwitchContext+0xbc>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	334c      	adds	r3, #76	; 0x4c
 800a1d0:	4a08      	ldr	r2, [pc, #32]	; (800a1f4 <vTaskSwitchContext+0xc0>)
 800a1d2:	6013      	str	r3, [r2, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	371c      	adds	r7, #28
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	200007f0 	.word	0x200007f0
 800a1e4:	200007dc 	.word	0x200007dc
 800a1e8:	200007d0 	.word	0x200007d0
 800a1ec:	200006cc 	.word	0x200006cc
 800a1f0:	200006c8 	.word	0x200006c8
 800a1f4:	20000108 	.word	0x20000108

0800a1f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a200:	f000 f852 	bl	800a2a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a204:	4b06      	ldr	r3, [pc, #24]	; (800a220 <prvIdleTask+0x28>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d9f9      	bls.n	800a200 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a20c:	4b05      	ldr	r3, [pc, #20]	; (800a224 <prvIdleTask+0x2c>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a21c:	e7f0      	b.n	800a200 <prvIdleTask+0x8>
 800a21e:	bf00      	nop
 800a220:	200006cc 	.word	0x200006cc
 800a224:	e000ed04 	.word	0xe000ed04

0800a228 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a22e:	2300      	movs	r3, #0
 800a230:	607b      	str	r3, [r7, #4]
 800a232:	e00c      	b.n	800a24e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	4613      	mov	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4a12      	ldr	r2, [pc, #72]	; (800a288 <prvInitialiseTaskLists+0x60>)
 800a240:	4413      	add	r3, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fb17 	bl	8009876 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3301      	adds	r3, #1
 800a24c:	607b      	str	r3, [r7, #4]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b06      	cmp	r3, #6
 800a252:	d9ef      	bls.n	800a234 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a254:	480d      	ldr	r0, [pc, #52]	; (800a28c <prvInitialiseTaskLists+0x64>)
 800a256:	f7ff fb0e 	bl	8009876 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a25a:	480d      	ldr	r0, [pc, #52]	; (800a290 <prvInitialiseTaskLists+0x68>)
 800a25c:	f7ff fb0b 	bl	8009876 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a260:	480c      	ldr	r0, [pc, #48]	; (800a294 <prvInitialiseTaskLists+0x6c>)
 800a262:	f7ff fb08 	bl	8009876 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a266:	480c      	ldr	r0, [pc, #48]	; (800a298 <prvInitialiseTaskLists+0x70>)
 800a268:	f7ff fb05 	bl	8009876 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a26c:	480b      	ldr	r0, [pc, #44]	; (800a29c <prvInitialiseTaskLists+0x74>)
 800a26e:	f7ff fb02 	bl	8009876 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a272:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <prvInitialiseTaskLists+0x78>)
 800a274:	4a05      	ldr	r2, [pc, #20]	; (800a28c <prvInitialiseTaskLists+0x64>)
 800a276:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <prvInitialiseTaskLists+0x7c>)
 800a27a:	4a05      	ldr	r2, [pc, #20]	; (800a290 <prvInitialiseTaskLists+0x68>)
 800a27c:	601a      	str	r2, [r3, #0]
}
 800a27e:	bf00      	nop
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200006cc 	.word	0x200006cc
 800a28c:	20000758 	.word	0x20000758
 800a290:	2000076c 	.word	0x2000076c
 800a294:	20000788 	.word	0x20000788
 800a298:	2000079c 	.word	0x2000079c
 800a29c:	200007b4 	.word	0x200007b4
 800a2a0:	20000780 	.word	0x20000780
 800a2a4:	20000784 	.word	0x20000784

0800a2a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2ae:	e019      	b.n	800a2e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2b0:	f000 fa10 	bl	800a6d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b4:	4b10      	ldr	r3, [pc, #64]	; (800a2f8 <prvCheckTasksWaitingTermination+0x50>)
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff fb62 	bl	800998a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2c6:	4b0d      	ldr	r3, [pc, #52]	; (800a2fc <prvCheckTasksWaitingTermination+0x54>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	4a0b      	ldr	r2, [pc, #44]	; (800a2fc <prvCheckTasksWaitingTermination+0x54>)
 800a2ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2d0:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <prvCheckTasksWaitingTermination+0x58>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	4a0a      	ldr	r2, [pc, #40]	; (800a300 <prvCheckTasksWaitingTermination+0x58>)
 800a2d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2da:	f000 fa2b 	bl	800a734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f810 	bl	800a304 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2e4:	4b06      	ldr	r3, [pc, #24]	; (800a300 <prvCheckTasksWaitingTermination+0x58>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1e1      	bne.n	800a2b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2ec:	bf00      	nop
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	2000079c 	.word	0x2000079c
 800a2fc:	200007c8 	.word	0x200007c8
 800a300:	200007b0 	.word	0x200007b0

0800a304 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	334c      	adds	r3, #76	; 0x4c
 800a310:	4618      	mov	r0, r3
 800a312:	f001 fa27 	bl	800b764 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d108      	bne.n	800a332 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fb83 	bl	800aa30 <vPortFree>
				vPortFree( pxTCB );
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fb80 	bl	800aa30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a330:	e018      	b.n	800a364 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d103      	bne.n	800a344 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fb77 	bl	800aa30 <vPortFree>
	}
 800a342:	e00f      	b.n	800a364 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d00a      	beq.n	800a364 <prvDeleteTCB+0x60>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	60fb      	str	r3, [r7, #12]
}
 800a360:	bf00      	nop
 800a362:	e7fe      	b.n	800a362 <prvDeleteTCB+0x5e>
	}
 800a364:	bf00      	nop
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a372:	4b0c      	ldr	r3, [pc, #48]	; (800a3a4 <prvResetNextTaskUnblockTime+0x38>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d104      	bne.n	800a386 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a37c:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a37e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a382:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a384:	e008      	b.n	800a398 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a386:	4b07      	ldr	r3, [pc, #28]	; (800a3a4 <prvResetNextTaskUnblockTime+0x38>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	4a04      	ldr	r2, [pc, #16]	; (800a3a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a396:	6013      	str	r3, [r2, #0]
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	20000780 	.word	0x20000780
 800a3a8:	200007e8 	.word	0x200007e8

0800a3ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3b6:	4b29      	ldr	r3, [pc, #164]	; (800a45c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3bc:	4b28      	ldr	r3, [pc, #160]	; (800a460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff fae1 	bl	800998a <uxListRemove>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10b      	bne.n	800a3e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a3ce:	4b24      	ldr	r3, [pc, #144]	; (800a460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3da:	43da      	mvns	r2, r3
 800a3dc:	4b21      	ldr	r3, [pc, #132]	; (800a464 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	4a20      	ldr	r2, [pc, #128]	; (800a464 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3ec:	d10a      	bne.n	800a404 <prvAddCurrentTaskToDelayedList+0x58>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d007      	beq.n	800a404 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3f4:	4b1a      	ldr	r3, [pc, #104]	; (800a460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	481a      	ldr	r0, [pc, #104]	; (800a468 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3fe:	f7ff fa67 	bl	80098d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a402:	e026      	b.n	800a452 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4413      	add	r3, r2
 800a40a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a40c:	4b14      	ldr	r3, [pc, #80]	; (800a460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d209      	bcs.n	800a430 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a41c:	4b13      	ldr	r3, [pc, #76]	; (800a46c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3304      	adds	r3, #4
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f7ff fa75 	bl	8009918 <vListInsert>
}
 800a42e:	e010      	b.n	800a452 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a430:	4b0f      	ldr	r3, [pc, #60]	; (800a470 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3304      	adds	r3, #4
 800a43a:	4619      	mov	r1, r3
 800a43c:	4610      	mov	r0, r2
 800a43e:	f7ff fa6b 	bl	8009918 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a442:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d202      	bcs.n	800a452 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a44c:	4a09      	ldr	r2, [pc, #36]	; (800a474 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	6013      	str	r3, [r2, #0]
}
 800a452:	bf00      	nop
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	200007cc 	.word	0x200007cc
 800a460:	200006c8 	.word	0x200006c8
 800a464:	200007d0 	.word	0x200007d0
 800a468:	200007b4 	.word	0x200007b4
 800a46c:	20000784 	.word	0x20000784
 800a470:	20000780 	.word	0x20000780
 800a474:	200007e8 	.word	0x200007e8

0800a478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	3b04      	subs	r3, #4
 800a488:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3b04      	subs	r3, #4
 800a496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f023 0201 	bic.w	r2, r3, #1
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3b04      	subs	r3, #4
 800a4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4a8:	4a0c      	ldr	r2, [pc, #48]	; (800a4dc <pxPortInitialiseStack+0x64>)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3b14      	subs	r3, #20
 800a4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3b04      	subs	r3, #4
 800a4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f06f 0202 	mvn.w	r2, #2
 800a4c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	3b20      	subs	r3, #32
 800a4cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	0800a4e1 	.word	0x0800a4e1

0800a4e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4ea:	4b12      	ldr	r3, [pc, #72]	; (800a534 <prvTaskExitError+0x54>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f2:	d00a      	beq.n	800a50a <prvTaskExitError+0x2a>
	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	60fb      	str	r3, [r7, #12]
}
 800a506:	bf00      	nop
 800a508:	e7fe      	b.n	800a508 <prvTaskExitError+0x28>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	60bb      	str	r3, [r7, #8]
}
 800a51c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a51e:	bf00      	nop
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0fc      	beq.n	800a520 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a526:	bf00      	nop
 800a528:	bf00      	nop
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	200000a0 	.word	0x200000a0
	...

0800a540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a540:	4b07      	ldr	r3, [pc, #28]	; (800a560 <pxCurrentTCBConst2>)
 800a542:	6819      	ldr	r1, [r3, #0]
 800a544:	6808      	ldr	r0, [r1, #0]
 800a546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54a:	f380 8809 	msr	PSP, r0
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f04f 0000 	mov.w	r0, #0
 800a556:	f380 8811 	msr	BASEPRI, r0
 800a55a:	4770      	bx	lr
 800a55c:	f3af 8000 	nop.w

0800a560 <pxCurrentTCBConst2>:
 800a560:	200006c8 	.word	0x200006c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop

0800a568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a568:	4808      	ldr	r0, [pc, #32]	; (800a58c <prvPortStartFirstTask+0x24>)
 800a56a:	6800      	ldr	r0, [r0, #0]
 800a56c:	6800      	ldr	r0, [r0, #0]
 800a56e:	f380 8808 	msr	MSP, r0
 800a572:	f04f 0000 	mov.w	r0, #0
 800a576:	f380 8814 	msr	CONTROL, r0
 800a57a:	b662      	cpsie	i
 800a57c:	b661      	cpsie	f
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	df00      	svc	0
 800a588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a58a:	bf00      	nop
 800a58c:	e000ed08 	.word	0xe000ed08

0800a590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a596:	4b46      	ldr	r3, [pc, #280]	; (800a6b0 <xPortStartScheduler+0x120>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a46      	ldr	r2, [pc, #280]	; (800a6b4 <xPortStartScheduler+0x124>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d10a      	bne.n	800a5b6 <xPortStartScheduler+0x26>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	613b      	str	r3, [r7, #16]
}
 800a5b2:	bf00      	nop
 800a5b4:	e7fe      	b.n	800a5b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5b6:	4b3e      	ldr	r3, [pc, #248]	; (800a6b0 <xPortStartScheduler+0x120>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a3f      	ldr	r2, [pc, #252]	; (800a6b8 <xPortStartScheduler+0x128>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d10a      	bne.n	800a5d6 <xPortStartScheduler+0x46>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	60fb      	str	r3, [r7, #12]
}
 800a5d2:	bf00      	nop
 800a5d4:	e7fe      	b.n	800a5d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5d6:	4b39      	ldr	r3, [pc, #228]	; (800a6bc <xPortStartScheduler+0x12c>)
 800a5d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	22ff      	movs	r2, #255	; 0xff
 800a5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5f0:	78fb      	ldrb	r3, [r7, #3]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	4b31      	ldr	r3, [pc, #196]	; (800a6c0 <xPortStartScheduler+0x130>)
 800a5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5fe:	4b31      	ldr	r3, [pc, #196]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a600:	2207      	movs	r2, #7
 800a602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a604:	e009      	b.n	800a61a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a606:	4b2f      	ldr	r3, [pc, #188]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	4a2d      	ldr	r2, [pc, #180]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	b2db      	uxtb	r3, r3
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	b2db      	uxtb	r3, r3
 800a618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a622:	2b80      	cmp	r3, #128	; 0x80
 800a624:	d0ef      	beq.n	800a606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a626:	4b27      	ldr	r3, [pc, #156]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f1c3 0307 	rsb	r3, r3, #7
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d00a      	beq.n	800a648 <xPortStartScheduler+0xb8>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	60bb      	str	r3, [r7, #8]
}
 800a644:	bf00      	nop
 800a646:	e7fe      	b.n	800a646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a648:	4b1e      	ldr	r3, [pc, #120]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	021b      	lsls	r3, r3, #8
 800a64e:	4a1d      	ldr	r2, [pc, #116]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a652:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a65a:	4a1a      	ldr	r2, [pc, #104]	; (800a6c4 <xPortStartScheduler+0x134>)
 800a65c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	b2da      	uxtb	r2, r3
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a666:	4b18      	ldr	r3, [pc, #96]	; (800a6c8 <xPortStartScheduler+0x138>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a17      	ldr	r2, [pc, #92]	; (800a6c8 <xPortStartScheduler+0x138>)
 800a66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a672:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <xPortStartScheduler+0x138>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a14      	ldr	r2, [pc, #80]	; (800a6c8 <xPortStartScheduler+0x138>)
 800a678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a67c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a67e:	f000 f8dd 	bl	800a83c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a682:	4b12      	ldr	r3, [pc, #72]	; (800a6cc <xPortStartScheduler+0x13c>)
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a688:	f000 f8fc 	bl	800a884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a68c:	4b10      	ldr	r3, [pc, #64]	; (800a6d0 <xPortStartScheduler+0x140>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a0f      	ldr	r2, [pc, #60]	; (800a6d0 <xPortStartScheduler+0x140>)
 800a692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a698:	f7ff ff66 	bl	800a568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a69c:	f7ff fd4a 	bl	800a134 <vTaskSwitchContext>
	prvTaskExitError();
 800a6a0:	f7ff ff1e 	bl	800a4e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	e000ed00 	.word	0xe000ed00
 800a6b4:	410fc271 	.word	0x410fc271
 800a6b8:	410fc270 	.word	0x410fc270
 800a6bc:	e000e400 	.word	0xe000e400
 800a6c0:	200007f4 	.word	0x200007f4
 800a6c4:	200007f8 	.word	0x200007f8
 800a6c8:	e000ed20 	.word	0xe000ed20
 800a6cc:	200000a0 	.word	0x200000a0
 800a6d0:	e000ef34 	.word	0xe000ef34

0800a6d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	607b      	str	r3, [r7, #4]
}
 800a6ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <vPortEnterCritical+0x58>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	4a0d      	ldr	r2, [pc, #52]	; (800a72c <vPortEnterCritical+0x58>)
 800a6f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6f8:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <vPortEnterCritical+0x58>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d10f      	bne.n	800a720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <vPortEnterCritical+0x5c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <vPortEnterCritical+0x4c>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	603b      	str	r3, [r7, #0]
}
 800a71c:	bf00      	nop
 800a71e:	e7fe      	b.n	800a71e <vPortEnterCritical+0x4a>
	}
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	200000a0 	.word	0x200000a0
 800a730:	e000ed04 	.word	0xe000ed04

0800a734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <vPortExitCritical+0x50>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10a      	bne.n	800a758 <vPortExitCritical+0x24>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	607b      	str	r3, [r7, #4]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a758:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <vPortExitCritical+0x50>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	4a09      	ldr	r2, [pc, #36]	; (800a784 <vPortExitCritical+0x50>)
 800a760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <vPortExitCritical+0x50>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d105      	bne.n	800a776 <vPortExitCritical+0x42>
 800a76a:	2300      	movs	r3, #0
 800a76c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	200000a0 	.word	0x200000a0
	...

0800a790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a790:	f3ef 8009 	mrs	r0, PSP
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	4b15      	ldr	r3, [pc, #84]	; (800a7f0 <pxCurrentTCBConst>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	f01e 0f10 	tst.w	lr, #16
 800a7a0:	bf08      	it	eq
 800a7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7aa:	6010      	str	r0, [r2, #0]
 800a7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7b4:	f380 8811 	msr	BASEPRI, r0
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f7ff fcb8 	bl	800a134 <vTaskSwitchContext>
 800a7c4:	f04f 0000 	mov.w	r0, #0
 800a7c8:	f380 8811 	msr	BASEPRI, r0
 800a7cc:	bc09      	pop	{r0, r3}
 800a7ce:	6819      	ldr	r1, [r3, #0]
 800a7d0:	6808      	ldr	r0, [r1, #0]
 800a7d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d6:	f01e 0f10 	tst.w	lr, #16
 800a7da:	bf08      	it	eq
 800a7dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7e0:	f380 8809 	msr	PSP, r0
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	f3af 8000 	nop.w

0800a7f0 <pxCurrentTCBConst>:
 800a7f0:	200006c8 	.word	0x200006c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop

0800a7f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	607b      	str	r3, [r7, #4]
}
 800a810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a812:	f7ff fbd7 	bl	8009fc4 <xTaskIncrementTick>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a81c:	4b06      	ldr	r3, [pc, #24]	; (800a838 <SysTick_Handler+0x40>)
 800a81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	2300      	movs	r3, #0
 800a826:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f383 8811 	msr	BASEPRI, r3
}
 800a82e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	e000ed04 	.word	0xe000ed04

0800a83c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a840:	4b0b      	ldr	r3, [pc, #44]	; (800a870 <vPortSetupTimerInterrupt+0x34>)
 800a842:	2200      	movs	r2, #0
 800a844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a846:	4b0b      	ldr	r3, [pc, #44]	; (800a874 <vPortSetupTimerInterrupt+0x38>)
 800a848:	2200      	movs	r2, #0
 800a84a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a84c:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <vPortSetupTimerInterrupt+0x3c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a0a      	ldr	r2, [pc, #40]	; (800a87c <vPortSetupTimerInterrupt+0x40>)
 800a852:	fba2 2303 	umull	r2, r3, r2, r3
 800a856:	099b      	lsrs	r3, r3, #6
 800a858:	4a09      	ldr	r2, [pc, #36]	; (800a880 <vPortSetupTimerInterrupt+0x44>)
 800a85a:	3b01      	subs	r3, #1
 800a85c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a85e:	4b04      	ldr	r3, [pc, #16]	; (800a870 <vPortSetupTimerInterrupt+0x34>)
 800a860:	2207      	movs	r2, #7
 800a862:	601a      	str	r2, [r3, #0]
}
 800a864:	bf00      	nop
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	e000e010 	.word	0xe000e010
 800a874:	e000e018 	.word	0xe000e018
 800a878:	20000008 	.word	0x20000008
 800a87c:	10624dd3 	.word	0x10624dd3
 800a880:	e000e014 	.word	0xe000e014

0800a884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a894 <vPortEnableVFP+0x10>
 800a888:	6801      	ldr	r1, [r0, #0]
 800a88a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a88e:	6001      	str	r1, [r0, #0]
 800a890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a892:	bf00      	nop
 800a894:	e000ed88 	.word	0xe000ed88

0800a898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08a      	sub	sp, #40	; 0x28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8a4:	f7ff fae4 	bl	8009e70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8a8:	4b5b      	ldr	r3, [pc, #364]	; (800aa18 <pvPortMalloc+0x180>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8b0:	f000 f920 	bl	800aaf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8b4:	4b59      	ldr	r3, [pc, #356]	; (800aa1c <pvPortMalloc+0x184>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f040 8093 	bne.w	800a9e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d01d      	beq.n	800a904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f003 0307 	and.w	r3, r3, #7
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d014      	beq.n	800a904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f023 0307 	bic.w	r3, r3, #7
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00a      	beq.n	800a904 <pvPortMalloc+0x6c>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	617b      	str	r3, [r7, #20]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d06e      	beq.n	800a9e8 <pvPortMalloc+0x150>
 800a90a:	4b45      	ldr	r3, [pc, #276]	; (800aa20 <pvPortMalloc+0x188>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	429a      	cmp	r2, r3
 800a912:	d869      	bhi.n	800a9e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a914:	4b43      	ldr	r3, [pc, #268]	; (800aa24 <pvPortMalloc+0x18c>)
 800a916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a918:	4b42      	ldr	r3, [pc, #264]	; (800aa24 <pvPortMalloc+0x18c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a91e:	e004      	b.n	800a92a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	429a      	cmp	r2, r3
 800a932:	d903      	bls.n	800a93c <pvPortMalloc+0xa4>
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1f1      	bne.n	800a920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a93c:	4b36      	ldr	r3, [pc, #216]	; (800aa18 <pvPortMalloc+0x180>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a942:	429a      	cmp	r2, r3
 800a944:	d050      	beq.n	800a9e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2208      	movs	r2, #8
 800a94c:	4413      	add	r3, r2
 800a94e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	1ad2      	subs	r2, r2, r3
 800a960:	2308      	movs	r3, #8
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	429a      	cmp	r2, r3
 800a966:	d91f      	bls.n	800a9a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4413      	add	r3, r2
 800a96e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	f003 0307 	and.w	r3, r3, #7
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <pvPortMalloc+0xf8>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	613b      	str	r3, [r7, #16]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	1ad2      	subs	r2, r2, r3
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9a2:	69b8      	ldr	r0, [r7, #24]
 800a9a4:	f000 f908 	bl	800abb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9a8:	4b1d      	ldr	r3, [pc, #116]	; (800aa20 <pvPortMalloc+0x188>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	4a1b      	ldr	r2, [pc, #108]	; (800aa20 <pvPortMalloc+0x188>)
 800a9b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9b6:	4b1a      	ldr	r3, [pc, #104]	; (800aa20 <pvPortMalloc+0x188>)
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	4b1b      	ldr	r3, [pc, #108]	; (800aa28 <pvPortMalloc+0x190>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d203      	bcs.n	800a9ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9c2:	4b17      	ldr	r3, [pc, #92]	; (800aa20 <pvPortMalloc+0x188>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a18      	ldr	r2, [pc, #96]	; (800aa28 <pvPortMalloc+0x190>)
 800a9c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <pvPortMalloc+0x184>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	2200      	movs	r2, #0
 800a9dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9de:	4b13      	ldr	r3, [pc, #76]	; (800aa2c <pvPortMalloc+0x194>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	4a11      	ldr	r2, [pc, #68]	; (800aa2c <pvPortMalloc+0x194>)
 800a9e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9e8:	f7ff fa50 	bl	8009e8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <pvPortMalloc+0x174>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	60fb      	str	r3, [r7, #12]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <pvPortMalloc+0x172>
	return pvReturn;
 800aa0c:	69fb      	ldr	r3, [r7, #28]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3728      	adds	r7, #40	; 0x28
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	20004404 	.word	0x20004404
 800aa1c:	20004418 	.word	0x20004418
 800aa20:	20004408 	.word	0x20004408
 800aa24:	200043fc 	.word	0x200043fc
 800aa28:	2000440c 	.word	0x2000440c
 800aa2c:	20004410 	.word	0x20004410

0800aa30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d04d      	beq.n	800aade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa42:	2308      	movs	r3, #8
 800aa44:	425b      	negs	r3, r3
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	4413      	add	r3, r2
 800aa4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	4b24      	ldr	r3, [pc, #144]	; (800aae8 <vPortFree+0xb8>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10a      	bne.n	800aa74 <vPortFree+0x44>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	60fb      	str	r3, [r7, #12]
}
 800aa70:	bf00      	nop
 800aa72:	e7fe      	b.n	800aa72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00a      	beq.n	800aa92 <vPortFree+0x62>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	60bb      	str	r3, [r7, #8]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <vPortFree+0xb8>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01e      	beq.n	800aade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d11a      	bne.n	800aade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	4b0e      	ldr	r3, [pc, #56]	; (800aae8 <vPortFree+0xb8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	43db      	mvns	r3, r3
 800aab2:	401a      	ands	r2, r3
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aab8:	f7ff f9da 	bl	8009e70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	4b0a      	ldr	r3, [pc, #40]	; (800aaec <vPortFree+0xbc>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4413      	add	r3, r2
 800aac6:	4a09      	ldr	r2, [pc, #36]	; (800aaec <vPortFree+0xbc>)
 800aac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aaca:	6938      	ldr	r0, [r7, #16]
 800aacc:	f000 f874 	bl	800abb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aad0:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <vPortFree+0xc0>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3301      	adds	r3, #1
 800aad6:	4a06      	ldr	r2, [pc, #24]	; (800aaf0 <vPortFree+0xc0>)
 800aad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aada:	f7ff f9d7 	bl	8009e8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aade:	bf00      	nop
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20004418 	.word	0x20004418
 800aaec:	20004408 	.word	0x20004408
 800aaf0:	20004414 	.word	0x20004414

0800aaf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aafa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aafe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab00:	4b27      	ldr	r3, [pc, #156]	; (800aba0 <prvHeapInit+0xac>)
 800ab02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f003 0307 	and.w	r3, r3, #7
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00c      	beq.n	800ab28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3307      	adds	r3, #7
 800ab12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f023 0307 	bic.w	r3, r3, #7
 800ab1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	4a1f      	ldr	r2, [pc, #124]	; (800aba0 <prvHeapInit+0xac>)
 800ab24:	4413      	add	r3, r2
 800ab26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab2c:	4a1d      	ldr	r2, [pc, #116]	; (800aba4 <prvHeapInit+0xb0>)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab32:	4b1c      	ldr	r3, [pc, #112]	; (800aba4 <prvHeapInit+0xb0>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab40:	2208      	movs	r2, #8
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0307 	bic.w	r3, r3, #7
 800ab4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	4a15      	ldr	r2, [pc, #84]	; (800aba8 <prvHeapInit+0xb4>)
 800ab54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab56:	4b14      	ldr	r3, [pc, #80]	; (800aba8 <prvHeapInit+0xb4>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab5e:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <prvHeapInit+0xb4>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	1ad2      	subs	r2, r2, r3
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab74:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <prvHeapInit+0xb4>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	4a0a      	ldr	r2, [pc, #40]	; (800abac <prvHeapInit+0xb8>)
 800ab82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	4a09      	ldr	r2, [pc, #36]	; (800abb0 <prvHeapInit+0xbc>)
 800ab8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab8c:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <prvHeapInit+0xc0>)
 800ab8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab92:	601a      	str	r2, [r3, #0]
}
 800ab94:	bf00      	nop
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	200007fc 	.word	0x200007fc
 800aba4:	200043fc 	.word	0x200043fc
 800aba8:	20004404 	.word	0x20004404
 800abac:	2000440c 	.word	0x2000440c
 800abb0:	20004408 	.word	0x20004408
 800abb4:	20004418 	.word	0x20004418

0800abb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abc0:	4b28      	ldr	r3, [pc, #160]	; (800ac64 <prvInsertBlockIntoFreeList+0xac>)
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	e002      	b.n	800abcc <prvInsertBlockIntoFreeList+0x14>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d8f7      	bhi.n	800abc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	4413      	add	r3, r2
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d108      	bne.n	800abfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	441a      	add	r2, r3
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	441a      	add	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d118      	bne.n	800ac40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	4b15      	ldr	r3, [pc, #84]	; (800ac68 <prvInsertBlockIntoFreeList+0xb0>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d00d      	beq.n	800ac36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	441a      	add	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	e008      	b.n	800ac48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac36:	4b0c      	ldr	r3, [pc, #48]	; (800ac68 <prvInsertBlockIntoFreeList+0xb0>)
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	e003      	b.n	800ac48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d002      	beq.n	800ac56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	200043fc 	.word	0x200043fc
 800ac68:	20004404 	.word	0x20004404

0800ac6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac70:	2200      	movs	r2, #0
 800ac72:	4912      	ldr	r1, [pc, #72]	; (800acbc <MX_USB_DEVICE_Init+0x50>)
 800ac74:	4812      	ldr	r0, [pc, #72]	; (800acc0 <MX_USB_DEVICE_Init+0x54>)
 800ac76:	f7fd fa8d 	bl	8008194 <USBD_Init>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac80:	f7f5 ff2c 	bl	8000adc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac84:	490f      	ldr	r1, [pc, #60]	; (800acc4 <MX_USB_DEVICE_Init+0x58>)
 800ac86:	480e      	ldr	r0, [pc, #56]	; (800acc0 <MX_USB_DEVICE_Init+0x54>)
 800ac88:	f7fd fab4 	bl	80081f4 <USBD_RegisterClass>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac92:	f7f5 ff23 	bl	8000adc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ac96:	490c      	ldr	r1, [pc, #48]	; (800acc8 <MX_USB_DEVICE_Init+0x5c>)
 800ac98:	4809      	ldr	r0, [pc, #36]	; (800acc0 <MX_USB_DEVICE_Init+0x54>)
 800ac9a:	f7fd f9a5 	bl	8007fe8 <USBD_CDC_RegisterInterface>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aca4:	f7f5 ff1a 	bl	8000adc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aca8:	4805      	ldr	r0, [pc, #20]	; (800acc0 <MX_USB_DEVICE_Init+0x54>)
 800acaa:	f7fd fad9 	bl	8008260 <USBD_Start>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800acb4:	f7f5 ff12 	bl	8000adc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800acb8:	bf00      	nop
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	200000b8 	.word	0x200000b8
 800acc0:	2000441c 	.word	0x2000441c
 800acc4:	20000020 	.word	0x20000020
 800acc8:	200000a4 	.word	0x200000a4

0800accc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800acd0:	2200      	movs	r2, #0
 800acd2:	4905      	ldr	r1, [pc, #20]	; (800ace8 <CDC_Init_FS+0x1c>)
 800acd4:	4805      	ldr	r0, [pc, #20]	; (800acec <CDC_Init_FS+0x20>)
 800acd6:	f7fd f9a1 	bl	800801c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800acda:	4905      	ldr	r1, [pc, #20]	; (800acf0 <CDC_Init_FS+0x24>)
 800acdc:	4803      	ldr	r0, [pc, #12]	; (800acec <CDC_Init_FS+0x20>)
 800acde:	f7fd f9bf 	bl	8008060 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ace2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	20004ef8 	.word	0x20004ef8
 800acec:	2000441c 	.word	0x2000441c
 800acf0:	200046f8 	.word	0x200046f8

0800acf4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800acf4:	b480      	push	{r7}
 800acf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800acf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	6039      	str	r1, [r7, #0]
 800ad0e:	71fb      	strb	r3, [r7, #7]
 800ad10:	4613      	mov	r3, r2
 800ad12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad14:	79fb      	ldrb	r3, [r7, #7]
 800ad16:	2b23      	cmp	r3, #35	; 0x23
 800ad18:	d84a      	bhi.n	800adb0 <CDC_Control_FS+0xac>
 800ad1a:	a201      	add	r2, pc, #4	; (adr r2, 800ad20 <CDC_Control_FS+0x1c>)
 800ad1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad20:	0800adb1 	.word	0x0800adb1
 800ad24:	0800adb1 	.word	0x0800adb1
 800ad28:	0800adb1 	.word	0x0800adb1
 800ad2c:	0800adb1 	.word	0x0800adb1
 800ad30:	0800adb1 	.word	0x0800adb1
 800ad34:	0800adb1 	.word	0x0800adb1
 800ad38:	0800adb1 	.word	0x0800adb1
 800ad3c:	0800adb1 	.word	0x0800adb1
 800ad40:	0800adb1 	.word	0x0800adb1
 800ad44:	0800adb1 	.word	0x0800adb1
 800ad48:	0800adb1 	.word	0x0800adb1
 800ad4c:	0800adb1 	.word	0x0800adb1
 800ad50:	0800adb1 	.word	0x0800adb1
 800ad54:	0800adb1 	.word	0x0800adb1
 800ad58:	0800adb1 	.word	0x0800adb1
 800ad5c:	0800adb1 	.word	0x0800adb1
 800ad60:	0800adb1 	.word	0x0800adb1
 800ad64:	0800adb1 	.word	0x0800adb1
 800ad68:	0800adb1 	.word	0x0800adb1
 800ad6c:	0800adb1 	.word	0x0800adb1
 800ad70:	0800adb1 	.word	0x0800adb1
 800ad74:	0800adb1 	.word	0x0800adb1
 800ad78:	0800adb1 	.word	0x0800adb1
 800ad7c:	0800adb1 	.word	0x0800adb1
 800ad80:	0800adb1 	.word	0x0800adb1
 800ad84:	0800adb1 	.word	0x0800adb1
 800ad88:	0800adb1 	.word	0x0800adb1
 800ad8c:	0800adb1 	.word	0x0800adb1
 800ad90:	0800adb1 	.word	0x0800adb1
 800ad94:	0800adb1 	.word	0x0800adb1
 800ad98:	0800adb1 	.word	0x0800adb1
 800ad9c:	0800adb1 	.word	0x0800adb1
 800ada0:	0800adb1 	.word	0x0800adb1
 800ada4:	0800adb1 	.word	0x0800adb1
 800ada8:	0800adb1 	.word	0x0800adb1
 800adac:	0800adb1 	.word	0x0800adb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800adb0:	bf00      	nop
  }

  return (USBD_OK);
 800adb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800adca:	6879      	ldr	r1, [r7, #4]
 800adcc:	4809      	ldr	r0, [pc, #36]	; (800adf4 <CDC_Receive_FS+0x34>)
 800adce:	f7fd f947 	bl	8008060 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800add2:	4808      	ldr	r0, [pc, #32]	; (800adf4 <CDC_Receive_FS+0x34>)
 800add4:	f7fd f9a8 	bl	8008128 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);
 800adde:	7bfb      	ldrb	r3, [r7, #15]
 800ade0:	461a      	mov	r2, r3
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	4804      	ldr	r0, [pc, #16]	; (800adf8 <CDC_Receive_FS+0x38>)
 800ade6:	f000 fc99 	bl	800b71c <memcpy>
  return (USBD_OK);
 800adea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	2000441c 	.word	0x2000441c
 800adf8:	20000638 	.word	0x20000638

0800adfc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae0c:	4b0d      	ldr	r3, [pc, #52]	; (800ae44 <CDC_Transmit_FS+0x48>)
 800ae0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e00b      	b.n	800ae3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae22:	887b      	ldrh	r3, [r7, #2]
 800ae24:	461a      	mov	r2, r3
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	4806      	ldr	r0, [pc, #24]	; (800ae44 <CDC_Transmit_FS+0x48>)
 800ae2a:	f7fd f8f7 	bl	800801c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae2e:	4805      	ldr	r0, [pc, #20]	; (800ae44 <CDC_Transmit_FS+0x48>)
 800ae30:	f7fd f934 	bl	800809c <USBD_CDC_TransmitPacket>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	2000441c 	.word	0x2000441c

0800ae48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	4613      	mov	r3, r2
 800ae54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ae5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	371c      	adds	r7, #28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
	...

0800ae6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	2212      	movs	r2, #18
 800ae7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ae7e:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	200000d4 	.word	0x200000d4

0800ae90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	2204      	movs	r2, #4
 800aea0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aea2:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	200000e8 	.word	0x200000e8

0800aeb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	4603      	mov	r3, r0
 800aebc:	6039      	str	r1, [r7, #0]
 800aebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d105      	bne.n	800aed2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	4907      	ldr	r1, [pc, #28]	; (800aee8 <USBD_FS_ProductStrDescriptor+0x34>)
 800aeca:	4808      	ldr	r0, [pc, #32]	; (800aeec <USBD_FS_ProductStrDescriptor+0x38>)
 800aecc:	f7fe fb74 	bl	80095b8 <USBD_GetString>
 800aed0:	e004      	b.n	800aedc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	4904      	ldr	r1, [pc, #16]	; (800aee8 <USBD_FS_ProductStrDescriptor+0x34>)
 800aed6:	4805      	ldr	r0, [pc, #20]	; (800aeec <USBD_FS_ProductStrDescriptor+0x38>)
 800aed8:	f7fe fb6e 	bl	80095b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aedc:	4b02      	ldr	r3, [pc, #8]	; (800aee8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	200056f8 	.word	0x200056f8
 800aeec:	0800b95c 	.word	0x0800b95c

0800aef0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	4603      	mov	r3, r0
 800aef8:	6039      	str	r1, [r7, #0]
 800aefa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	4904      	ldr	r1, [pc, #16]	; (800af10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af00:	4804      	ldr	r0, [pc, #16]	; (800af14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af02:	f7fe fb59 	bl	80095b8 <USBD_GetString>
  return USBD_StrDesc;
 800af06:	4b02      	ldr	r3, [pc, #8]	; (800af10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	200056f8 	.word	0x200056f8
 800af14:	0800b974 	.word	0x0800b974

0800af18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	6039      	str	r1, [r7, #0]
 800af22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	221a      	movs	r2, #26
 800af28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af2a:	f000 f843 	bl	800afb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af2e:	4b02      	ldr	r3, [pc, #8]	; (800af38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	200000ec 	.word	0x200000ec

0800af3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	6039      	str	r1, [r7, #0]
 800af46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d105      	bne.n	800af5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	4907      	ldr	r1, [pc, #28]	; (800af70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af52:	4808      	ldr	r0, [pc, #32]	; (800af74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800af54:	f7fe fb30 	bl	80095b8 <USBD_GetString>
 800af58:	e004      	b.n	800af64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	4904      	ldr	r1, [pc, #16]	; (800af70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af5e:	4805      	ldr	r0, [pc, #20]	; (800af74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800af60:	f7fe fb2a 	bl	80095b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af64:	4b02      	ldr	r3, [pc, #8]	; (800af70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800af66:	4618      	mov	r0, r3
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	200056f8 	.word	0x200056f8
 800af74:	0800b988 	.word	0x0800b988

0800af78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	6039      	str	r1, [r7, #0]
 800af82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d105      	bne.n	800af96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	4907      	ldr	r1, [pc, #28]	; (800afac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af8e:	4808      	ldr	r0, [pc, #32]	; (800afb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af90:	f7fe fb12 	bl	80095b8 <USBD_GetString>
 800af94:	e004      	b.n	800afa0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	4904      	ldr	r1, [pc, #16]	; (800afac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af9a:	4805      	ldr	r0, [pc, #20]	; (800afb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af9c:	f7fe fb0c 	bl	80095b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afa0:	4b02      	ldr	r3, [pc, #8]	; (800afac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	200056f8 	.word	0x200056f8
 800afb0:	0800b994 	.word	0x0800b994

0800afb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800afba:	4b0f      	ldr	r3, [pc, #60]	; (800aff8 <Get_SerialNum+0x44>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800afc0:	4b0e      	ldr	r3, [pc, #56]	; (800affc <Get_SerialNum+0x48>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800afc6:	4b0e      	ldr	r3, [pc, #56]	; (800b000 <Get_SerialNum+0x4c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4413      	add	r3, r2
 800afd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d009      	beq.n	800afee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800afda:	2208      	movs	r2, #8
 800afdc:	4909      	ldr	r1, [pc, #36]	; (800b004 <Get_SerialNum+0x50>)
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f000 f814 	bl	800b00c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800afe4:	2204      	movs	r2, #4
 800afe6:	4908      	ldr	r1, [pc, #32]	; (800b008 <Get_SerialNum+0x54>)
 800afe8:	68b8      	ldr	r0, [r7, #8]
 800afea:	f000 f80f 	bl	800b00c <IntToUnicode>
  }
}
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	1fff7a10 	.word	0x1fff7a10
 800affc:	1fff7a14 	.word	0x1fff7a14
 800b000:	1fff7a18 	.word	0x1fff7a18
 800b004:	200000ee 	.word	0x200000ee
 800b008:	200000fe 	.word	0x200000fe

0800b00c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b01e:	2300      	movs	r3, #0
 800b020:	75fb      	strb	r3, [r7, #23]
 800b022:	e027      	b.n	800b074 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	0f1b      	lsrs	r3, r3, #28
 800b028:	2b09      	cmp	r3, #9
 800b02a:	d80b      	bhi.n	800b044 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	0f1b      	lsrs	r3, r3, #28
 800b030:	b2da      	uxtb	r2, r3
 800b032:	7dfb      	ldrb	r3, [r7, #23]
 800b034:	005b      	lsls	r3, r3, #1
 800b036:	4619      	mov	r1, r3
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	440b      	add	r3, r1
 800b03c:	3230      	adds	r2, #48	; 0x30
 800b03e:	b2d2      	uxtb	r2, r2
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	e00a      	b.n	800b05a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	0f1b      	lsrs	r3, r3, #28
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	005b      	lsls	r3, r3, #1
 800b04e:	4619      	mov	r1, r3
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	440b      	add	r3, r1
 800b054:	3237      	adds	r2, #55	; 0x37
 800b056:	b2d2      	uxtb	r2, r2
 800b058:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	011b      	lsls	r3, r3, #4
 800b05e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b060:	7dfb      	ldrb	r3, [r7, #23]
 800b062:	005b      	lsls	r3, r3, #1
 800b064:	3301      	adds	r3, #1
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	4413      	add	r3, r2
 800b06a:	2200      	movs	r2, #0
 800b06c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
 800b070:	3301      	adds	r3, #1
 800b072:	75fb      	strb	r3, [r7, #23]
 800b074:	7dfa      	ldrb	r2, [r7, #23]
 800b076:	79fb      	ldrb	r3, [r7, #7]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d3d3      	bcc.n	800b024 <IntToUnicode+0x18>
  }
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
	...

0800b08c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b08a      	sub	sp, #40	; 0x28
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b094:	f107 0314 	add.w	r3, r7, #20
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	605a      	str	r2, [r3, #4]
 800b09e:	609a      	str	r2, [r3, #8]
 800b0a0:	60da      	str	r2, [r3, #12]
 800b0a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0ac:	d147      	bne.n	800b13e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	613b      	str	r3, [r7, #16]
 800b0b2:	4b25      	ldr	r3, [pc, #148]	; (800b148 <HAL_PCD_MspInit+0xbc>)
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b6:	4a24      	ldr	r2, [pc, #144]	; (800b148 <HAL_PCD_MspInit+0xbc>)
 800b0b8:	f043 0301 	orr.w	r3, r3, #1
 800b0bc:	6313      	str	r3, [r2, #48]	; 0x30
 800b0be:	4b22      	ldr	r3, [pc, #136]	; (800b148 <HAL_PCD_MspInit+0xbc>)
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b0ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b0d8:	f107 0314 	add.w	r3, r7, #20
 800b0dc:	4619      	mov	r1, r3
 800b0de:	481b      	ldr	r0, [pc, #108]	; (800b14c <HAL_PCD_MspInit+0xc0>)
 800b0e0:	f7f6 fcae 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b0e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b0e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b0f6:	230a      	movs	r3, #10
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0fa:	f107 0314 	add.w	r3, r7, #20
 800b0fe:	4619      	mov	r1, r3
 800b100:	4812      	ldr	r0, [pc, #72]	; (800b14c <HAL_PCD_MspInit+0xc0>)
 800b102:	f7f6 fc9d 	bl	8001a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b106:	4b10      	ldr	r3, [pc, #64]	; (800b148 <HAL_PCD_MspInit+0xbc>)
 800b108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b10a:	4a0f      	ldr	r2, [pc, #60]	; (800b148 <HAL_PCD_MspInit+0xbc>)
 800b10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b110:	6353      	str	r3, [r2, #52]	; 0x34
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	4b0c      	ldr	r3, [pc, #48]	; (800b148 <HAL_PCD_MspInit+0xbc>)
 800b118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11a:	4a0b      	ldr	r2, [pc, #44]	; (800b148 <HAL_PCD_MspInit+0xbc>)
 800b11c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b120:	6453      	str	r3, [r2, #68]	; 0x44
 800b122:	4b09      	ldr	r3, [pc, #36]	; (800b148 <HAL_PCD_MspInit+0xbc>)
 800b124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b12e:	2200      	movs	r2, #0
 800b130:	2105      	movs	r1, #5
 800b132:	2043      	movs	r0, #67	; 0x43
 800b134:	f7f6 f8de 	bl	80012f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b138:	2043      	movs	r0, #67	; 0x43
 800b13a:	f7f6 f8f7 	bl	800132c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b13e:	bf00      	nop
 800b140:	3728      	adds	r7, #40	; 0x28
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	40023800 	.word	0x40023800
 800b14c:	40020000 	.word	0x40020000

0800b150 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b164:	4619      	mov	r1, r3
 800b166:	4610      	mov	r0, r2
 800b168:	f7fd f8c7 	bl	80082fa <USBD_LL_SetupStage>
}
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b186:	78fa      	ldrb	r2, [r7, #3]
 800b188:	6879      	ldr	r1, [r7, #4]
 800b18a:	4613      	mov	r3, r2
 800b18c:	00db      	lsls	r3, r3, #3
 800b18e:	4413      	add	r3, r2
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	440b      	add	r3, r1
 800b194:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	78fb      	ldrb	r3, [r7, #3]
 800b19c:	4619      	mov	r1, r3
 800b19e:	f7fd f901 	bl	80083a4 <USBD_LL_DataOutStage>
}
 800b1a2:	bf00      	nop
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b1bc:	78fa      	ldrb	r2, [r7, #3]
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	440b      	add	r3, r1
 800b1ca:	334c      	adds	r3, #76	; 0x4c
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	78fb      	ldrb	r3, [r7, #3]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	f7fd f99a 	bl	800850a <USBD_LL_DataInStage>
}
 800b1d6:	bf00      	nop
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b082      	sub	sp, #8
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fd face 	bl	800878e <USBD_LL_SOF>
}
 800b1f2:	bf00      	nop
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b202:	2301      	movs	r3, #1
 800b204:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d102      	bne.n	800b214 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
 800b212:	e008      	b.n	800b226 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d102      	bne.n	800b222 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b21c:	2301      	movs	r3, #1
 800b21e:	73fb      	strb	r3, [r7, #15]
 800b220:	e001      	b.n	800b226 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b222:	f7f5 fc5b 	bl	8000adc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b22c:	7bfa      	ldrb	r2, [r7, #15]
 800b22e:	4611      	mov	r1, r2
 800b230:	4618      	mov	r0, r3
 800b232:	f7fd fa6e 	bl	8008712 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fd fa16 	bl	800866e <USBD_LL_Reset>
}
 800b242:	bf00      	nop
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
	...

0800b24c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fd fa69 	bl	8008732 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b272:	f043 0301 	orr.w	r3, r3, #1
 800b276:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d005      	beq.n	800b28c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b280:	4b04      	ldr	r3, [pc, #16]	; (800b294 <HAL_PCD_SuspendCallback+0x48>)
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	4a03      	ldr	r2, [pc, #12]	; (800b294 <HAL_PCD_SuspendCallback+0x48>)
 800b286:	f043 0306 	orr.w	r3, r3, #6
 800b28a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	e000ed00 	.word	0xe000ed00

0800b298 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fd fa59 	bl	800875e <USBD_LL_Resume>
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2c6:	78fa      	ldrb	r2, [r7, #3]
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fd fab1 	bl	8008832 <USBD_LL_IsoOUTIncomplete>
}
 800b2d0:	bf00      	nop
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2ea:	78fa      	ldrb	r2, [r7, #3]
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fd fa6d 	bl	80087ce <USBD_LL_IsoINIncomplete>
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fd fac3 	bl	8008896 <USBD_LL_DevConnected>
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b326:	4618      	mov	r0, r3
 800b328:	f7fd fac0 	bl	80088ac <USBD_LL_DevDisconnected>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d13c      	bne.n	800b3be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b344:	4a20      	ldr	r2, [pc, #128]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a1e      	ldr	r2, [pc, #120]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b350:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b354:	4b1c      	ldr	r3, [pc, #112]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b356:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b35a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b35c:	4b1a      	ldr	r3, [pc, #104]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b35e:	2204      	movs	r2, #4
 800b360:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b362:	4b19      	ldr	r3, [pc, #100]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b364:	2202      	movs	r2, #2
 800b366:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b368:	4b17      	ldr	r3, [pc, #92]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b36e:	4b16      	ldr	r3, [pc, #88]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b370:	2202      	movs	r2, #2
 800b372:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b374:	4b14      	ldr	r3, [pc, #80]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b376:	2200      	movs	r2, #0
 800b378:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b37a:	4b13      	ldr	r3, [pc, #76]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b380:	4b11      	ldr	r3, [pc, #68]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b382:	2200      	movs	r2, #0
 800b384:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b386:	4b10      	ldr	r3, [pc, #64]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b388:	2201      	movs	r2, #1
 800b38a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b38c:	4b0e      	ldr	r3, [pc, #56]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b38e:	2200      	movs	r2, #0
 800b390:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b392:	480d      	ldr	r0, [pc, #52]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b394:	f7f7 fb08 	bl	80029a8 <HAL_PCD_Init>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b39e:	f7f5 fb9d 	bl	8000adc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b3a2:	2180      	movs	r1, #128	; 0x80
 800b3a4:	4808      	ldr	r0, [pc, #32]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b3a6:	f7f8 fd60 	bl	8003e6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b3aa:	2240      	movs	r2, #64	; 0x40
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	4806      	ldr	r0, [pc, #24]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b3b0:	f7f8 fd14 	bl	8003ddc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b3b4:	2280      	movs	r2, #128	; 0x80
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	4803      	ldr	r0, [pc, #12]	; (800b3c8 <USBD_LL_Init+0x94>)
 800b3ba:	f7f8 fd0f 	bl	8003ddc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	200058f8 	.word	0x200058f8

0800b3cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7f7 fbfd 	bl	8002be2 <HAL_PCD_Start>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 f942 	bl	800b678 <USBD_Get_USB_Status>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	4608      	mov	r0, r1
 800b40c:	4611      	mov	r1, r2
 800b40e:	461a      	mov	r2, r3
 800b410:	4603      	mov	r3, r0
 800b412:	70fb      	strb	r3, [r7, #3]
 800b414:	460b      	mov	r3, r1
 800b416:	70bb      	strb	r3, [r7, #2]
 800b418:	4613      	mov	r3, r2
 800b41a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b420:	2300      	movs	r3, #0
 800b422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b42a:	78bb      	ldrb	r3, [r7, #2]
 800b42c:	883a      	ldrh	r2, [r7, #0]
 800b42e:	78f9      	ldrb	r1, [r7, #3]
 800b430:	f7f8 f8ce 	bl	80035d0 <HAL_PCD_EP_Open>
 800b434:	4603      	mov	r3, r0
 800b436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 f91c 	bl	800b678 <USBD_Get_USB_Status>
 800b440:	4603      	mov	r3, r0
 800b442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b444:	7bbb      	ldrb	r3, [r7, #14]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	460b      	mov	r3, r1
 800b458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b468:	78fa      	ldrb	r2, [r7, #3]
 800b46a:	4611      	mov	r1, r2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7f8 f917 	bl	80036a0 <HAL_PCD_EP_Close>
 800b472:	4603      	mov	r3, r0
 800b474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 f8fd 	bl	800b678 <USBD_Get_USB_Status>
 800b47e:	4603      	mov	r3, r0
 800b480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b482:	7bbb      	ldrb	r3, [r7, #14]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4a6:	78fa      	ldrb	r2, [r7, #3]
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7f8 f9ef 	bl	800388e <HAL_PCD_EP_SetStall>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 f8de 	bl	800b678 <USBD_Get_USB_Status>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b084      	sub	sp, #16
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4e4:	78fa      	ldrb	r2, [r7, #3]
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7f8 fa34 	bl	8003956 <HAL_PCD_EP_ClrStall>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 f8bf 	bl	800b678 <USBD_Get_USB_Status>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	460b      	mov	r3, r1
 800b512:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b51a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b51c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b520:	2b00      	cmp	r3, #0
 800b522:	da0b      	bge.n	800b53c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b524:	78fb      	ldrb	r3, [r7, #3]
 800b526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b52a:	68f9      	ldr	r1, [r7, #12]
 800b52c:	4613      	mov	r3, r2
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	4413      	add	r3, r2
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	440b      	add	r3, r1
 800b536:	333e      	adds	r3, #62	; 0x3e
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	e00b      	b.n	800b554 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b53c:	78fb      	ldrb	r3, [r7, #3]
 800b53e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b542:	68f9      	ldr	r1, [r7, #12]
 800b544:	4613      	mov	r3, r2
 800b546:	00db      	lsls	r3, r3, #3
 800b548:	4413      	add	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	440b      	add	r3, r1
 800b54e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b552:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b554:	4618      	mov	r0, r3
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b57a:	78fa      	ldrb	r2, [r7, #3]
 800b57c:	4611      	mov	r1, r2
 800b57e:	4618      	mov	r0, r3
 800b580:	f7f8 f801 	bl	8003586 <HAL_PCD_SetAddress>
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 f874 	bl	800b678 <USBD_Get_USB_Status>
 800b590:	4603      	mov	r3, r0
 800b592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b594:	7bbb      	ldrb	r3, [r7, #14]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b086      	sub	sp, #24
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	603b      	str	r3, [r7, #0]
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5bc:	7af9      	ldrb	r1, [r7, #11]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	f7f8 f91a 	bl	80037fa <HAL_PCD_EP_Transmit>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 f853 	bl	800b678 <USBD_Get_USB_Status>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	607a      	str	r2, [r7, #4]
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5fe:	7af9      	ldrb	r1, [r7, #11]
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	f7f8 f896 	bl	8003734 <HAL_PCD_EP_Receive>
 800b608:	4603      	mov	r3, r0
 800b60a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 f832 	bl	800b678 <USBD_Get_USB_Status>
 800b614:	4603      	mov	r3, r0
 800b616:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b618:	7dbb      	ldrb	r3, [r7, #22]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3718      	adds	r7, #24
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	460b      	mov	r3, r1
 800b62c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b634:	78fa      	ldrb	r2, [r7, #3]
 800b636:	4611      	mov	r1, r2
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f8 f8c6 	bl	80037ca <HAL_PCD_EP_GetRxCount>
 800b63e:	4603      	mov	r3, r0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b650:	4b03      	ldr	r3, [pc, #12]	; (800b660 <USBD_static_malloc+0x18>)
}
 800b652:	4618      	mov	r0, r3
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	20005e04 	.word	0x20005e04

0800b664 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]

}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d817      	bhi.n	800b6bc <USBD_Get_USB_Status+0x44>
 800b68c:	a201      	add	r2, pc, #4	; (adr r2, 800b694 <USBD_Get_USB_Status+0x1c>)
 800b68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b692:	bf00      	nop
 800b694:	0800b6a5 	.word	0x0800b6a5
 800b698:	0800b6ab 	.word	0x0800b6ab
 800b69c:	0800b6b1 	.word	0x0800b6b1
 800b6a0:	0800b6b7 	.word	0x0800b6b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6a8:	e00b      	b.n	800b6c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ae:	e008      	b.n	800b6c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b4:	e005      	b.n	800b6c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ba:	e002      	b.n	800b6c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	73fb      	strb	r3, [r7, #15]
    break;
 800b6c0:	bf00      	nop
  }
  return usb_status;
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <__libc_init_array>:
 800b6d0:	b570      	push	{r4, r5, r6, lr}
 800b6d2:	4d0d      	ldr	r5, [pc, #52]	; (800b708 <__libc_init_array+0x38>)
 800b6d4:	4c0d      	ldr	r4, [pc, #52]	; (800b70c <__libc_init_array+0x3c>)
 800b6d6:	1b64      	subs	r4, r4, r5
 800b6d8:	10a4      	asrs	r4, r4, #2
 800b6da:	2600      	movs	r6, #0
 800b6dc:	42a6      	cmp	r6, r4
 800b6de:	d109      	bne.n	800b6f4 <__libc_init_array+0x24>
 800b6e0:	4d0b      	ldr	r5, [pc, #44]	; (800b710 <__libc_init_array+0x40>)
 800b6e2:	4c0c      	ldr	r4, [pc, #48]	; (800b714 <__libc_init_array+0x44>)
 800b6e4:	f000 f908 	bl	800b8f8 <_init>
 800b6e8:	1b64      	subs	r4, r4, r5
 800b6ea:	10a4      	asrs	r4, r4, #2
 800b6ec:	2600      	movs	r6, #0
 800b6ee:	42a6      	cmp	r6, r4
 800b6f0:	d105      	bne.n	800b6fe <__libc_init_array+0x2e>
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
 800b6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6f8:	4798      	blx	r3
 800b6fa:	3601      	adds	r6, #1
 800b6fc:	e7ee      	b.n	800b6dc <__libc_init_array+0xc>
 800b6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b702:	4798      	blx	r3
 800b704:	3601      	adds	r6, #1
 800b706:	e7f2      	b.n	800b6ee <__libc_init_array+0x1e>
 800b708:	0800ba2c 	.word	0x0800ba2c
 800b70c:	0800ba2c 	.word	0x0800ba2c
 800b710:	0800ba2c 	.word	0x0800ba2c
 800b714:	0800ba30 	.word	0x0800ba30

0800b718 <__retarget_lock_acquire_recursive>:
 800b718:	4770      	bx	lr

0800b71a <__retarget_lock_release_recursive>:
 800b71a:	4770      	bx	lr

0800b71c <memcpy>:
 800b71c:	440a      	add	r2, r1
 800b71e:	4291      	cmp	r1, r2
 800b720:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b724:	d100      	bne.n	800b728 <memcpy+0xc>
 800b726:	4770      	bx	lr
 800b728:	b510      	push	{r4, lr}
 800b72a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b72e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b732:	4291      	cmp	r1, r2
 800b734:	d1f9      	bne.n	800b72a <memcpy+0xe>
 800b736:	bd10      	pop	{r4, pc}

0800b738 <memset>:
 800b738:	4402      	add	r2, r0
 800b73a:	4603      	mov	r3, r0
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d100      	bne.n	800b742 <memset+0xa>
 800b740:	4770      	bx	lr
 800b742:	f803 1b01 	strb.w	r1, [r3], #1
 800b746:	e7f9      	b.n	800b73c <memset+0x4>

0800b748 <cleanup_glue>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	460c      	mov	r4, r1
 800b74c:	6809      	ldr	r1, [r1, #0]
 800b74e:	4605      	mov	r5, r0
 800b750:	b109      	cbz	r1, 800b756 <cleanup_glue+0xe>
 800b752:	f7ff fff9 	bl	800b748 <cleanup_glue>
 800b756:	4621      	mov	r1, r4
 800b758:	4628      	mov	r0, r5
 800b75a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b75e:	f000 b87f 	b.w	800b860 <_free_r>
	...

0800b764 <_reclaim_reent>:
 800b764:	4b2c      	ldr	r3, [pc, #176]	; (800b818 <_reclaim_reent+0xb4>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4283      	cmp	r3, r0
 800b76a:	b570      	push	{r4, r5, r6, lr}
 800b76c:	4604      	mov	r4, r0
 800b76e:	d051      	beq.n	800b814 <_reclaim_reent+0xb0>
 800b770:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b772:	b143      	cbz	r3, 800b786 <_reclaim_reent+0x22>
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d14a      	bne.n	800b810 <_reclaim_reent+0xac>
 800b77a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b77c:	6819      	ldr	r1, [r3, #0]
 800b77e:	b111      	cbz	r1, 800b786 <_reclaim_reent+0x22>
 800b780:	4620      	mov	r0, r4
 800b782:	f000 f86d 	bl	800b860 <_free_r>
 800b786:	6961      	ldr	r1, [r4, #20]
 800b788:	b111      	cbz	r1, 800b790 <_reclaim_reent+0x2c>
 800b78a:	4620      	mov	r0, r4
 800b78c:	f000 f868 	bl	800b860 <_free_r>
 800b790:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b792:	b111      	cbz	r1, 800b79a <_reclaim_reent+0x36>
 800b794:	4620      	mov	r0, r4
 800b796:	f000 f863 	bl	800b860 <_free_r>
 800b79a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b79c:	b111      	cbz	r1, 800b7a4 <_reclaim_reent+0x40>
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f000 f85e 	bl	800b860 <_free_r>
 800b7a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b7a6:	b111      	cbz	r1, 800b7ae <_reclaim_reent+0x4a>
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 f859 	bl	800b860 <_free_r>
 800b7ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b7b0:	b111      	cbz	r1, 800b7b8 <_reclaim_reent+0x54>
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 f854 	bl	800b860 <_free_r>
 800b7b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b7ba:	b111      	cbz	r1, 800b7c2 <_reclaim_reent+0x5e>
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 f84f 	bl	800b860 <_free_r>
 800b7c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b7c4:	b111      	cbz	r1, 800b7cc <_reclaim_reent+0x68>
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 f84a 	bl	800b860 <_free_r>
 800b7cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ce:	b111      	cbz	r1, 800b7d6 <_reclaim_reent+0x72>
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 f845 	bl	800b860 <_free_r>
 800b7d6:	69a3      	ldr	r3, [r4, #24]
 800b7d8:	b1e3      	cbz	r3, 800b814 <_reclaim_reent+0xb0>
 800b7da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b7dc:	4620      	mov	r0, r4
 800b7de:	4798      	blx	r3
 800b7e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7e2:	b1b9      	cbz	r1, 800b814 <_reclaim_reent+0xb0>
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7ea:	f7ff bfad 	b.w	800b748 <cleanup_glue>
 800b7ee:	5949      	ldr	r1, [r1, r5]
 800b7f0:	b941      	cbnz	r1, 800b804 <_reclaim_reent+0xa0>
 800b7f2:	3504      	adds	r5, #4
 800b7f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7f6:	2d80      	cmp	r5, #128	; 0x80
 800b7f8:	68d9      	ldr	r1, [r3, #12]
 800b7fa:	d1f8      	bne.n	800b7ee <_reclaim_reent+0x8a>
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f000 f82f 	bl	800b860 <_free_r>
 800b802:	e7ba      	b.n	800b77a <_reclaim_reent+0x16>
 800b804:	680e      	ldr	r6, [r1, #0]
 800b806:	4620      	mov	r0, r4
 800b808:	f000 f82a 	bl	800b860 <_free_r>
 800b80c:	4631      	mov	r1, r6
 800b80e:	e7ef      	b.n	800b7f0 <_reclaim_reent+0x8c>
 800b810:	2500      	movs	r5, #0
 800b812:	e7ef      	b.n	800b7f4 <_reclaim_reent+0x90>
 800b814:	bd70      	pop	{r4, r5, r6, pc}
 800b816:	bf00      	nop
 800b818:	20000108 	.word	0x20000108

0800b81c <strstr>:
 800b81c:	780a      	ldrb	r2, [r1, #0]
 800b81e:	b570      	push	{r4, r5, r6, lr}
 800b820:	b96a      	cbnz	r2, 800b83e <strstr+0x22>
 800b822:	bd70      	pop	{r4, r5, r6, pc}
 800b824:	429a      	cmp	r2, r3
 800b826:	d109      	bne.n	800b83c <strstr+0x20>
 800b828:	460c      	mov	r4, r1
 800b82a:	4605      	mov	r5, r0
 800b82c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b830:	2b00      	cmp	r3, #0
 800b832:	d0f6      	beq.n	800b822 <strstr+0x6>
 800b834:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b838:	429e      	cmp	r6, r3
 800b83a:	d0f7      	beq.n	800b82c <strstr+0x10>
 800b83c:	3001      	adds	r0, #1
 800b83e:	7803      	ldrb	r3, [r0, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1ef      	bne.n	800b824 <strstr+0x8>
 800b844:	4618      	mov	r0, r3
 800b846:	e7ec      	b.n	800b822 <strstr+0x6>

0800b848 <__malloc_lock>:
 800b848:	4801      	ldr	r0, [pc, #4]	; (800b850 <__malloc_lock+0x8>)
 800b84a:	f7ff bf65 	b.w	800b718 <__retarget_lock_acquire_recursive>
 800b84e:	bf00      	nop
 800b850:	20006024 	.word	0x20006024

0800b854 <__malloc_unlock>:
 800b854:	4801      	ldr	r0, [pc, #4]	; (800b85c <__malloc_unlock+0x8>)
 800b856:	f7ff bf60 	b.w	800b71a <__retarget_lock_release_recursive>
 800b85a:	bf00      	nop
 800b85c:	20006024 	.word	0x20006024

0800b860 <_free_r>:
 800b860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b862:	2900      	cmp	r1, #0
 800b864:	d044      	beq.n	800b8f0 <_free_r+0x90>
 800b866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b86a:	9001      	str	r0, [sp, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f1a1 0404 	sub.w	r4, r1, #4
 800b872:	bfb8      	it	lt
 800b874:	18e4      	addlt	r4, r4, r3
 800b876:	f7ff ffe7 	bl	800b848 <__malloc_lock>
 800b87a:	4a1e      	ldr	r2, [pc, #120]	; (800b8f4 <_free_r+0x94>)
 800b87c:	9801      	ldr	r0, [sp, #4]
 800b87e:	6813      	ldr	r3, [r2, #0]
 800b880:	b933      	cbnz	r3, 800b890 <_free_r+0x30>
 800b882:	6063      	str	r3, [r4, #4]
 800b884:	6014      	str	r4, [r2, #0]
 800b886:	b003      	add	sp, #12
 800b888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b88c:	f7ff bfe2 	b.w	800b854 <__malloc_unlock>
 800b890:	42a3      	cmp	r3, r4
 800b892:	d908      	bls.n	800b8a6 <_free_r+0x46>
 800b894:	6825      	ldr	r5, [r4, #0]
 800b896:	1961      	adds	r1, r4, r5
 800b898:	428b      	cmp	r3, r1
 800b89a:	bf01      	itttt	eq
 800b89c:	6819      	ldreq	r1, [r3, #0]
 800b89e:	685b      	ldreq	r3, [r3, #4]
 800b8a0:	1949      	addeq	r1, r1, r5
 800b8a2:	6021      	streq	r1, [r4, #0]
 800b8a4:	e7ed      	b.n	800b882 <_free_r+0x22>
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	b10b      	cbz	r3, 800b8b0 <_free_r+0x50>
 800b8ac:	42a3      	cmp	r3, r4
 800b8ae:	d9fa      	bls.n	800b8a6 <_free_r+0x46>
 800b8b0:	6811      	ldr	r1, [r2, #0]
 800b8b2:	1855      	adds	r5, r2, r1
 800b8b4:	42a5      	cmp	r5, r4
 800b8b6:	d10b      	bne.n	800b8d0 <_free_r+0x70>
 800b8b8:	6824      	ldr	r4, [r4, #0]
 800b8ba:	4421      	add	r1, r4
 800b8bc:	1854      	adds	r4, r2, r1
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	6011      	str	r1, [r2, #0]
 800b8c2:	d1e0      	bne.n	800b886 <_free_r+0x26>
 800b8c4:	681c      	ldr	r4, [r3, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	6053      	str	r3, [r2, #4]
 800b8ca:	4421      	add	r1, r4
 800b8cc:	6011      	str	r1, [r2, #0]
 800b8ce:	e7da      	b.n	800b886 <_free_r+0x26>
 800b8d0:	d902      	bls.n	800b8d8 <_free_r+0x78>
 800b8d2:	230c      	movs	r3, #12
 800b8d4:	6003      	str	r3, [r0, #0]
 800b8d6:	e7d6      	b.n	800b886 <_free_r+0x26>
 800b8d8:	6825      	ldr	r5, [r4, #0]
 800b8da:	1961      	adds	r1, r4, r5
 800b8dc:	428b      	cmp	r3, r1
 800b8de:	bf04      	itt	eq
 800b8e0:	6819      	ldreq	r1, [r3, #0]
 800b8e2:	685b      	ldreq	r3, [r3, #4]
 800b8e4:	6063      	str	r3, [r4, #4]
 800b8e6:	bf04      	itt	eq
 800b8e8:	1949      	addeq	r1, r1, r5
 800b8ea:	6021      	streq	r1, [r4, #0]
 800b8ec:	6054      	str	r4, [r2, #4]
 800b8ee:	e7ca      	b.n	800b886 <_free_r+0x26>
 800b8f0:	b003      	add	sp, #12
 800b8f2:	bd30      	pop	{r4, r5, pc}
 800b8f4:	20006028 	.word	0x20006028

0800b8f8 <_init>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	bf00      	nop
 800b8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fe:	bc08      	pop	{r3}
 800b900:	469e      	mov	lr, r3
 800b902:	4770      	bx	lr

0800b904 <_fini>:
 800b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b906:	bf00      	nop
 800b908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b90a:	bc08      	pop	{r3}
 800b90c:	469e      	mov	lr, r3
 800b90e:	4770      	bx	lr
